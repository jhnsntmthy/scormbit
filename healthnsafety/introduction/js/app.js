(function() {
  'use strict';

  var globals = typeof window === 'undefined' ? global : window;
  if (typeof globals.require === 'function') return;

  var modules = {};
  var cache = {};
  var aliases = {};
  var has = ({}).hasOwnProperty;

  var expRe = /^\.\.?(\/|$)/;
  var expand = function(root, name) {
    var results = [], part;
    var parts = (expRe.test(name) ? root + '/' + name : name).split('/');
    for (var i = 0, length = parts.length; i < length; i++) {
      part = parts[i];
      if (part === '..') {
        results.pop();
      } else if (part !== '.' && part !== '') {
        results.push(part);
      }
    }
    return results.join('/');
  };

  var dirname = function(path) {
    return path.split('/').slice(0, -1).join('/');
  };

  var localRequire = function(path) {
    return function expanded(name) {
      var absolute = expand(dirname(path), name);
      return globals.require(absolute, path);
    };
  };

  var initModule = function(name, definition) {
    var hot = null;
    hot = hmr && hmr.createHot(name);
    var module = {id: name, exports: {}, hot: hot};
    cache[name] = module;
    definition(module.exports, localRequire(name), module);
    return module.exports;
  };

  var expandAlias = function(name) {
    return aliases[name] ? expandAlias(aliases[name]) : name;
  };

  var _resolve = function(name, dep) {
    return expandAlias(expand(dirname(name), dep));
  };

  var require = function(name, loaderPath) {
    if (loaderPath == null) loaderPath = '/';
    var path = expandAlias(name);

    if (has.call(cache, path)) return cache[path].exports;
    if (has.call(modules, path)) return initModule(path, modules[path]);

    throw new Error("Cannot find module '" + name + "' from '" + loaderPath + "'");
  };

  require.alias = function(from, to) {
    aliases[to] = from;
  };

  var extRe = /\.[^.\/]+$/;
  var indexRe = /\/index(\.[^\/]+)?$/;
  var addExtensions = function(bundle) {
    if (extRe.test(bundle)) {
      var alias = bundle.replace(extRe, '');
      if (!has.call(aliases, alias) || aliases[alias].replace(extRe, '') === alias + '/index') {
        aliases[alias] = bundle;
      }
    }

    if (indexRe.test(bundle)) {
      var iAlias = bundle.replace(indexRe, '');
      if (!has.call(aliases, iAlias)) {
        aliases[iAlias] = bundle;
      }
    }
  };

  require.register = require.define = function(bundle, fn) {
    if (typeof bundle === 'object') {
      for (var key in bundle) {
        if (has.call(bundle, key)) {
          require.register(key, bundle[key]);
        }
      }
    } else {
      modules[bundle] = fn;
      delete cache[bundle];
      addExtensions(bundle);
    }
  };

  require.list = function() {
    var list = [];
    for (var item in modules) {
      if (has.call(modules, item)) {
        list.push(item);
      }
    }
    return list;
  };

  var hmr = globals._hmr && new globals._hmr(_resolve, require, modules, cache);
  require._cache = cache;
  require.hmr = hmr && hmr.wrap;
  require.brunch = true;
  globals.require = require;
})();

(function() {
var global = window;
var __makeRelativeRequire = function(require, mappings, pref) {
  var none = {};
  var tryReq = function(name, pref) {
    var val;
    try {
      val = require(pref + '/node_modules/' + name);
      return val;
    } catch (e) {
      if (e.toString().indexOf('Cannot find module') === -1) {
        throw e;
      }

      if (pref.indexOf('node_modules') !== -1) {
        var s = pref.split('/');
        var i = s.lastIndexOf('node_modules');
        var newPref = s.slice(0, i).join('/');
        return tryReq(name, newPref);
      }
    }
    return none;
  };
  return function(name) {
    if (name in mappings) name = mappings[name];
    if (!name) return;
    if (name[0] !== '.' && pref) {
      var val = tryReq(name, pref);
      if (val !== none) return val;
    }
    return require(name);
  }
};
require.register("app.coffee", function(exports, require, module) {
var Application, Middleware;

Middleware = require("lib/middleware");

Application = {
  actions: Middleware.actions,
  action: Middleware.action,
  publish: Middleware.publish,
  subscribe: Middleware.subscribe,
  initialize: function(platform, isPlayer) {
    var Analytics, Lesson, Router;
    this.isPlayer = isPlayer;
    window.iostap.initialize();
    Middleware.initialize(platform);
    require("lib/i18n").initialize("en");
    Router = require("lib/router");
    this.router = new Router();
    Analytics = Middleware.actions("Analytics");
    Analytics.startTracking();
    Lesson = Middleware.actions("Lesson");
    Lesson.open();
    Backbone.history.start();
    return console.error("HISTORY START");
  }
};

module.exports = window.Application = Application;
});

;require.register("data/locales/ar.yaml", function(exports, require, module) {
module.exports = {"menu":{"go-back":"استعراض آخِر شريحة","restart":"إعادة الدرس","exit":"إنهاء الدرس","cancel":"إلغاء","page-count":"أنت في الشريحة %{index} من %{total}"},"buttons":{"continue":"متابعة","close-lesson":"اغلاق الدرس","done":"حسناً، لقد انتهيت","open-ed":"فتح تطبيق \"Ed\""},"lesson-info":{"lesson-label":"درس"},"audio-popup":{"cancel":"متابعة"},"game":{"labels":{"score":"النتيجة","timer":"عداد الوقت"},"your-score":"نتيجتك","your-best":"أفضل نتيجة لك","your-stars":"نجومك","play-again":"تشغيل مرة أخرى","move-on":"استمر","play-game":"حسناً، أنا مستعد!","go":"اذهب إلى"},"dialogs":{"disconnection":{"needs-background":"لإكمال هذا الدرس، ينبغي أن يكون تطبيق \"Ed\" يعمل في الخلفية.","please-open-ed":"للمتابعة، الرجاء فتح تطبيق \"Ed\" وإعادة تشغيل الدرس حتى يُمكن تتبع تقدمك المُحرز بشكل صحيح."}},"slide-answer":{"too-slow":"بطيء جداً!"},"stars":{"available":"%{smart_count} نجمات متوفرة |||| %{smart_count} نجمة متوفرة |||| نجمتان متوفرتان |||| %{smart_count} نجمات متوفرة |||| %{smart_count} نجمة متوفرة\n","all-earned":"%{smart_count} نجمات مكتسبة %{smart_count} نجمة مكتسبة |||| نجمتان مكتسبتان |||| %{smart_count} نجمات مكتسبة |||| %{smart_count} نجمة مكتسبة\n","earned":"لقد حصلت على %{earned} من عدد %{smart_count} نجمات لقد حصلت على %{earned} من %{smart_count} نجمة |||| لقد حصلت على %{earned} من نجمتين |||| لقد حصلت على %{earned} من عدد %{smart_count} نجمات |||| لقد حصلت على %{earned} من عدد %{smart_count} نجمات\n"},"pie-chart":{"touch-to-begin":"المس للبدء"},"slider":{"touch-to-slide":"المس للتمرير"},"dial":{"touch-to-rotate":"المس للتدوير"},"video":{"skip-video":"تخطي الفيديو","not-available":"عذراً، هذا الفيديو غير متوفر حالياً."},"image":{"tap-to-continue":"اضغط للمتابعة"},"game-jumble":{"drag-letters":"اسحب الحروف إلى الكلمة المذكورة أعلاه"},"game-jeopardy":{"is-true":"صواب","is-false":"خطأ"}}
});

;require.register("data/locales/en.yaml", function(exports, require, module) {
module.exports = {"menu":{"go-back":"Review last slide","restart":"Restart lesson","exit":"Exit lesson","cancel":"Cancel","page-count":"You’re on slide **%{index}** of **%{total}**"},"buttons":{"continue":"Continue","close-lesson":"Close Lesson","done":"Ok, I'm done","open-ed":"Open Ed"},"lesson-info":{"lesson-label":"Lesson"},"audio-popup":{"cancel":"Cancel"},"game":{"labels":{"score":"Score","timer":"Timer"},"your-score":"Your score","your-best":"Your best","your-stars":"Your stars","play-again":"Play Again","move-on":"Move On","play-game":"OK, I'm ready!","go":"GO"},"dialogs":{"disconnection":{"needs-background":"To complete this lesson, Ed needs to be running in the&nbsp;background.","please-open-ed":"To continue, please open Ed and restart the lesson so that your progress can be tracked&nbsp;correctly."}},"slide-answer":{"too-slow":"Too Slow!"},"slider":{"touch-to-slide":"Touch to slide"},"stars":{"available":"1 star available |||| %{smart_count} stars available","all-earned":"1 star earned |||| %{smart_count} stars earned","earned":"You earned %{earned} out of %{smart_count} star |||| You earned %{earned} out of %{smart_count} stars"},"pie-chart":{"touch-to-begin":"Touch to begin"},"dial":{"touch-to-rotate":"Touch&nbsp;to&nbsp;rotate"},"dial-distribution":{"touch-to-rotate":"Touch&nbsp;to&nbsp;rotate"},"video":{"skip-video":"Skip Video","not-available":"Sorry, this video is </br> unavailable at the moment."},"image":{"tap-to-continue":"Tap to continue"},"game-jumble":{"drag-letters":"Drag the letters to the word above"},"game-jeopardy":{"is-true":"True","is-false":"False"}}
});

;require.register("data/locales/es.yaml", function(exports, require, module) {
module.exports = {"stars":{"available":"1 estrella disponible |||| %{smart_count} estrellas disponibles","all-earned":"1 estrella ganada |||| %{smart_count} estrellas ganadas","earned":" Has ganado %{earned} de %{smart_count} estrella |||| Has ganado %{earned} de %{smart_count} estrellas"},"audio-popup":{"cancel":"Cancelar"},"menu":{"cancel":"Cancelar","exit":"Salir de la lección","restart":"Reiniciar la lección","go-back":"Rever la última diapositiva","page-count":"Estás en la diapositiva X de Y"},"buttons":{"continue":"Continuar","done":"Bien, ya terminé","open-ed":"Abrir Ed","close-lesson":"Cerrar la lección"},"game-jumble":{"drag-letters":"Arrastra las letras hasta la palabra de arriba"},"lesson-info":{"lesson-label":"Lección"},"game":{"move-on":"Seguir con otra","play-game":"Bien, ¡estoy listo!","play-again":"Jugar de nuevo","labels":{"score":"Puntuación","timer":"Cronómetro"},"your-best":"Tu mejor","your-score":"Tu puntuación","your-stars":"Tus estrallas","go":"IR"},"video":{"not-available":"Lo lamentamos, este video no está disponible en este momento.","skip-video":"Saltear video"},"image":{"tap-to-continue":"Toca para continuar"},"dialogs":{"disconnection":{"needs-background":"Para completar esta lección, Ed necesita ejecutarse en modo proceso de fondo.","please-open-ed":"Para continuar, abra Ed y reinicia la lecciónpara que tu progreso se siga correctamente."}},"slide-answer":{"too-slow":"¡Demasiado lento!"},"pie-chart":{"touch-to-begin":"Toca para comenzar"},"dial":{"touch-to-rotate":"Toca para rotar"},"slider":{"touch-to-slide":"Toca para deslizar"}}
});

;require.register("data/locales/ja.yaml", function(exports, require, module) {
module.exports = {"stars":{"available":"一つの利用可能な星||||%{smart_count}の利用可能な星","all-earned":"一つの星を獲得||||%{smart_count}}の星を獲得","earned":"あなたは%{smart_count}の星の中から%{earned}を獲得しました||||あなたは一つの星の中から%{earned}を獲得しました "},"audio-popup":{"cancel":"キャンセル"},"menu":{"cancel":"キャンセル","exit":"レッスン終了","restart":"レッスンを再開する","go-back":"最後のスライドを確認する","page-count":"一つの利用可能な星"},"buttons":{"continue":"続ける","done":"OK、完成した。","open-ed":"Edを開く","close-lesson":"レッスンを閉じる"},"game-jumble":{"drag-letters":"文字を上の単語にドラッグしてください"},"lesson-info":{"lesson-label":"レッスン"},"game":{"move-on":"次へ進む","play-game":"OK、準備完了！","play-again":"もう一回挑戦する","labels":{"score":"得点","timer":"タイマー"},"your-best":"最高記録","your-score":"得点","your-stars":"獲得した星","go":"スタート"},"video":{"not-available":"申し訳ありませんが、この動画は現時点ではご利用いただけません。","skip-video":"動画をスキップする"},"image":{"tap-to-continue":"タップして続けましょう"},"dialogs":{"disconnection":{"needs-background":"このレッスンを完成するにはEdがバックグラウンドで動作する必要があります。","please-open-ed":"進行状況を正しく追跡できるように、続ける前に、Edを開いてからレッスンを再開してください。"}},"slide-answer":{"too-slow":"遅すぎます!"},"pie-chart":{"touch-to-begin":"タッチして開始させます"},"dial":{"touch-to-rotate":"タッチして回転させます"},"dial-distribution":{"touch-to-rotate":"タッチして回転させます"},"slider":{"touch-to-slide":"タッチしてスライドさせます"}}
});

;require.register("engine/aicc/model.yaml", function(exports, require, module) {
module.exports = {"title":"aicc","display":"AICC","category":"Advanced","description":"Play an AICC Package","features":{"stars":true},"model":{"package":{"type":"aicc","default":"aicc/aicc.zip","display":"AICC File","help":"Upload your AICC package."},"shouldOpenInPopup":{"default":false,"type":"boolean","display":"Open in a new window","help":"Some AICC content performs better in a separate window. If your AICC package is performing poorly, this option may help.\n"},"isRequiredForLessonCompletion":{"default":true,"type":"boolean","display":"Required Content","help":"The learner must complete the AICC content before the lesson is marked as complete.\n"},"button":{"text":{"type":"text"},"position":{"type":"select","enum":["Below","Overlay Bottom","Overlay Top","None"],"default":"Below","help":"Choose the best position based on your content. If you choose not to display the button, your AICC content must allow the learner to exit, or they will not be able to continue.\n"}},"background":{"type":"html","default":"","display":"Background Color","help":"This color (eg. \"orange\", \"#f90\", \"rgb(255,160,0)\") will be used for the background of the entire screen in lightbox mode.\n"},"allowPopups":{"type":"boolean","default":false,"help":"The learner will be able to open links from the AICC slide.\n"}}}
});

;require.register("engine/aicc/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (allowedSandboxedFeatures, button, i18n) {
buf.push("<div class=\"full-screen content-fill hide-overflow\"><iframe type=\"text/html\" frameborder=\"0\"" + (jade.attr("sandbox", allowedSandboxedFeatures, true, false)) + " class=\"scorm-object\"></iframe><div class=\"exit-btn btn\">" + (jade.escape(null == (jade_interp = button.text || i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");}.call(this,"allowedSandboxedFeatures" in locals_for_with?locals_for_with.allowedSandboxedFeatures:typeof allowedSandboxedFeatures!=="undefined"?allowedSandboxedFeatures:undefined,"button" in locals_for_with?locals_for_with.button:typeof button!=="undefined"?button:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/aicc/view.coffee", function(exports, require, module) {
var AICCView, Device, Lesson, Session, SlideView, _ref, _ref1,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SlideView = require("views/slide");

_ref = Application.actions(), Session = _ref.Session, Lesson = _ref.Lesson;

Device = require("lib/device");

AICCView = (function(_super) {
  __extends(AICCView, _super);

  function AICCView() {
    _ref1 = AICCView.__super__.constructor.apply(this, arguments);
    return _ref1;
  }

  AICCView.prototype.template = require("./template");

  AICCView.prototype.events = function() {
    return {
      "iostap .exit-btn": "stopAICC"
    };
  };

  AICCView.prototype.initialize = function() {
    return AICCView.__super__.initialize.apply(this, arguments);
  };

  AICCView.prototype.beforeShow = function() {
    var position, _ref2, _ref3;
    position = ((_ref2 = this.options.data.button) != null ? (_ref3 = _ref2.position) != null ? _ref3.toLowerCase() : void 0 : void 0) || "none";
    this.setState(written.hyphenCase(position), "exit-btn");
    this.trigger("ui", {
      lightbox: this.options.data.background || true,
      fullscreen: true
    });
    return this.onResize();
  };

  AICCView.prototype.beforeHide = function() {
    return this.trigger("ui", {
      lightbox: false,
      fullscreen: false
    });
  };

  AICCView.prototype.show = function() {
    this.listenTo(this, "resize", this.onResize);
    return this.initAICC(function(err) {
      if (err != null) {
        return console.error("Error while initializing AICC", err);
      }
    });
  };

  AICCView.prototype.onRefresh = function() {
    this.beforeShow();
    return AICCView.__super__.onRefresh.apply(this, arguments);
  };

  AICCView.prototype.onResize = function() {
    var button, iframe;
    if (this.currentState["exit-btn"] === "below") {
      button = this.findOne(".exit-btn");
      iframe = this.findOne(".scorm-object");
      iframe.style.bottom = "" + button.offsetHeight + "px";
      return iframe.style.height = "" + (iframe.parentNode.offsetHeight - button.offsetHeight) + "px";
    }
  };

  AICCView.prototype.getAttempt = function(done) {
    return this.getAICCPackageURLAndSID(function(err, _arg) {
      var aiccSID, aiccURL;
      aiccURL = _arg.aiccURL, aiccSID = _arg.aiccSID;
      return $.ajax({
        url: "" + aiccURL + "/result",
        type: "POST",
        data: {
          session_id: aiccSID
        },
        success: function(d) {
          return done(null, d);
        },
        error: function(e) {
          return done(e);
        }
      });
    });
  };

  AICCView.prototype.stopAICC = function() {
    var _this = this;
    return this.getAttempt(function(err, attempt) {
      var attemptCompletion, attemptScore, completed, interaction, score, _ref2, _ref3, _ref4;
      attemptScore = (attempt != null ? (_ref2 = attempt.Core) != null ? _ref2.Score : void 0 : void 0) || "0";
      attemptCompletion = (attempt != null ? (_ref3 = attempt.Core) != null ? _ref3.Lesson_Status : void 0 : void 0) || "";
      score = parseInt(attemptScore) * 0.01;
      completed = attemptCompletion === "P";
      interaction = {
        id: _this.options.id,
        name: _this.options.name,
        type: _this.options.type,
        slideData: _this.options.data,
        attempt: attempt,
        answerDetails: [],
        metadata: _this.options.metadata,
        isAiccAttempt: true,
        isCompleted: completed,
        isRequiredForLessonCompletion: _this.options.data.isRequiredForLessonCompletion,
        score: score,
        configuration: (_ref4 = _this.options.data) != null ? _ref4.challenge_configuration : void 0,
        success: completed
      };
      _this.lesson.processInteraction(interaction);
      if (window.ED_CMS_MODE) {

      } else if (_this.isLastSlide) {
        Lesson.complete();
        return _this.exit();
      } else {
        return _this.next();
      }
    });
  };

  AICCView.prototype.getAICCPackageURLAndSID = function(done) {
    var slideId;
    slideId = this.options.id;
    return Session.get(function(err, _arg) {
      var aiccSID, aiccURL, attempt, id, lessonId, userId;
      id = _arg.id, userId = _arg.userId, attempt = _arg.attempt, aiccURL = _arg.aiccURL;
      if (err != null) {
        return done(err);
      }
      lessonId = id;
      aiccSID = lessonId ? "" + lessonId + "|" + slideId + "|" + userId + "|" + attempt : "lessonId|slideId||userId|attempt";
      aiccURL = window.location.origin + "/api/aicc";
      return done(null, {
        aiccURL: aiccURL,
        aiccSID: aiccSID
      });
    });
  };

  AICCView.prototype.serialize = function() {
    var data, sandboxedFeatures;
    data = AICCView.__super__.serialize.apply(this, arguments);
    sandboxedFeatures = ["allow-scripts", "allow-same-origin", "allow-modals"];
    if (data.allowPopups) {
      sandboxedFeatures.push("allow-popups");
      sandboxedFeatures.push("allow-popups-to-escape-sandbox");
    }
    if (Device.isIE()) {
      data.allowedSandboxedFeatures = sandboxedFeatures.join(" ");
    }
    return data;
  };

  AICCView.prototype.initAICCResource = function(done) {
    var data, resource,
      _this = this;
    data = this.serialize();
    resource = data["package"];
    return this.getAICCPackageURLAndSID(function(err, _arg) {
      var aiccSID, aiccURL, aiccWindow, params, pollTimer;
      aiccURL = _arg.aiccURL, aiccSID = _arg.aiccSID;
      if (err != null) {
        return done(err);
      }
      params = "aicc_url=" + aiccURL + "&aicc_sid=" + aiccSID;
      resource += resource.match(/\?/) ? resource.match(/\&$/) ? "" + params : "&" + params : "?" + params;
      if (!window.ED_CMS_MODE && data.shouldOpenInPopup) {
        aiccWindow = window.open(resource);
        pollTimer = window.setInterval(function() {
          if (aiccWindow.closed !== false) {
            window.clearInterval(pollTimer);
            return _this.stopAICC();
          }
        }, 200);
      } else {
        _this.findOne(".scorm-object").src = resource;
      }
      return done();
    });
  };

  AICCView.prototype.initAICC = function(done) {
    return this.initAICCResource(done);
  };

  return AICCView;

})(SlideView);

module.exports = AICCView;
});

;require.register("engine/carousel/model.yaml", function(exports, require, module) {
module.exports = {"title":"carousel","display":"Carousel","category":"Multiple Choice","features":{"stars":true},"model":{"title":{"type":"html","default":"Ask a question"},"answers":{"min":2,"max":8,"type":[{"content":{"type":"html"},"correct":{"type":"boolean"}}]},"randomize":{"type":"boolean","default":false,"help":"Shuffle the order of carousel items from left to right\n"},"answer":{"text":{"type":"html","default":"","display":"Answer Text"},"correct":{"type":"html","default":"That's correct!","display":"Correct Reinforcement"},"incorrect":{"type":"html","default":"Not quite...","display":"Incorrect Reinforcement"},"takeaway":{"type":"html","default":"","display":"Core Message"}},"prompt":{"type":"html","default":"Swipe to select an answer"},"game":{"timer":{"limit":{"type":"number","default":-1,"display":"Time Limit (ms)"}}}},"examples":[{"title":"What's the correct answer?","answers":[{"content":"Answer 1"},{"correct":true,"content":"Answer 2.<br> This is the correct answer and it contains more text.\n"},{"content":"Answer 3"}]}]}
});

;require.register("engine/carousel/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (answers, continueBtnText, game, hasNarration, hasPrompt, i18n, prompt, title, undefined) {
if ( game && game.timer && game.timer.limit > 0)
{
buf.push("<div class=\"full-screen\"><div class=\"game-stepper text-lg text-bold\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div></div>");
}
buf.push("<div class=\"content-fill\"><div class=\"content-md-fill content-sm-ver content-fit\"><div class=\"content-md-ver text-center block-v-lg\"><h1 class=\"block-h-xl fade-in\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"row carousel-container block-h-xl block-v-lg\"><div class=\"col-md-8 col-md-offset-2 col-sm-12\"><div class=\"carousel slide-up delay-6\"><div" + (jade.attr("style", "width: " + (answers.length * 100) + "%;", true, false)) + " class=\"carousel-slider block-flex-ver clearfix\">");
// iterate answers
;(function(){
  var $$obj = answers;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var answer = $$obj[$index];

buf.push("<div" + (jade.attr("data-is-correct", answer.correct, true, false)) + (jade.attr("data-answer-id", answer.id, true, false)) + (jade.attr("style", "width: " + (100 / answers.length) + "%;", true, false)) + (jade.cls(['carousel-item','block-md',answer.correct ? "carousel-item-correct" : ""], [null,null,true])) + "><div class=\"carousel-block block-md block-dk draggy draggy-ver delay-3\"><div" + (jade.cls(['carousel-btn','btn','btn-solid','btn-block',answer.content.length > 20 ? "btn-long" : ""], [null,null,null,null,true])) + "><div class=\"text-center\">" + (null == (jade_interp = answer.content) ? "" : jade_interp) + "</div></div></div></div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var answer = $$obj[$index];

buf.push("<div" + (jade.attr("data-is-correct", answer.correct, true, false)) + (jade.attr("data-answer-id", answer.id, true, false)) + (jade.attr("style", "width: " + (100 / answers.length) + "%;", true, false)) + (jade.cls(['carousel-item','block-md',answer.correct ? "carousel-item-correct" : ""], [null,null,true])) + "><div class=\"carousel-block block-md block-dk draggy draggy-ver delay-3\"><div" + (jade.cls(['carousel-btn','btn','btn-solid','btn-block',answer.content.length > 20 ? "btn-long" : ""], [null,null,null,null,true])) + "><div class=\"text-center\">" + (null == (jade_interp = answer.content) ? "" : jade_interp) + "</div></div></div></div>");
    }

  }
}).call(this);

buf.push("</div></div></div></div></div></div></div><div class=\"pagination\">");
// iterate answers
;(function(){
  var $$obj = answers;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var answer = $$obj[i];

buf.push("<div class=\"page\"></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var answer = $$obj[i];

buf.push("<div class=\"page\"></div>");
    }

  }
}).call(this);

buf.push("</div><div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"answers" in locals_for_with?locals_for_with.answers:typeof answers!=="undefined"?answers:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"game" in locals_for_with?locals_for_with.game:typeof game!=="undefined"?game:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/carousel/view.coffee", function(exports, require, module) {
var CarouselView, DraggyView, GameView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

GameView = require("views/base/game");

DraggyView = require("views/components/draggy");

CarouselView = (function(_super) {
  __extends(CarouselView, _super);

  function CarouselView() {
    _ref = CarouselView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  CarouselView.prototype.template = require("./template");

  CarouselView.prototype.currentIndex = 0;

  CarouselView.prototype.events = {
    "iostap .btn-done": "endGame"
  };

  CarouselView.prototype.serialize = function() {
    var answers, data, randomize, _ref1, _ref2;
    data = CarouselView.__super__.serialize.apply(this, arguments);
    randomize = data.randomize;
    answers = (((_ref1 = data.metadata.questions) != null ? (_ref2 = _ref1[0]) != null ? _ref2.answers : void 0 : void 0) || []).map(function(a) {
      return {
        content: a.content,
        correct: a.correct,
        id: a.id
      };
    });
    answers = answers.filter(function(m) {
      return m.content;
    });
    if (this.options.config().direction === "rtl") {
      answers = answers.reverse();
    }
    if (randomize) {
      answers = _.shuffle(answers);
    }
    data.answers = answers;
    return data;
  };

  CarouselView.prototype.show = function(index) {
    var el, ln, min, x;
    if (index == null) {
      index = 0;
    }
    CarouselView.__super__.show.apply(this, arguments);
    el = this.findOne(".carousel");
    this.setEl(this.findOne(".pagination"), "pagination");
    this.setEl(el.firstChild, "scroller");
    ln = this.serialize().answers.length;
    min = -el.offsetWidth * (ln - 1);
    this.draggy = new DraggyView({
      el: el,
      minX: min,
      maxX: 0,
      lock: "y"
    });
    this.listenTo(this.draggy, "drag", this.onDrag);
    this.listenTo(this.draggy, "drop", this.onDrop);
    this.listenTo(this, "resize", this.onResize);
    if (this.options.config().direction === "rtl") {
      x = -this.draggy.el.offsetWidth * (ln - 1 - index);
    } else {
      x = -this.draggy.el.offsetWidth * index;
    }
    this.draggy.reset({
      x: x
    });
    this.onResize();
    return this.enterGame();
  };

  CarouselView.prototype.onDrag = function(draggy, isInitial) {
    this.transform(this.getEl("scroller"), {
      x: this.getScrollDist(draggy),
      transition: isInitial ? "all 300ms" : ""
    });
    return this.updateChildren(draggy, isInitial && "none");
  };

  CarouselView.prototype.onDrop = function(draggy, isReset) {
    var child, func, i, m, step, transition, x, _i, _len, _ref1;
    if (isReset) {
      transition = this.currentIndex != null ? "all 300ms" : "";
      this.currentIndex = Math.floor(-draggy.x / draggy.offset.width);
      this.setState(this.currentIndex, "page");
      _ref1 = this.getEl("pagination").children;
      for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
        child = _ref1[i];
        child.classList.toggle("active", i === this.currentIndex);
      }
      this.transform(this.getEl("scroller"), {
        x: this.getScrollDist(draggy),
        transition: transition
      });
      return this.updateChildren(draggy, transition);
    } else {
      x = draggy.velocity.x;
      m = 0.9;
      func = x < -m ? "ceil" : x > m ? "floor" : "round";
      step = Math[func](Math.min(draggy.x / draggy.offset.width, 1));
      draggy.reset({
        x: step * draggy.offset.width
      });
      if (this.currentState.state === "prompt") {
        return this.setState("touched");
      }
    }
  };

  CarouselView.prototype.updateChildren = function(draggy, transition) {
    var button, child, i, width, _i, _len, _ref1;
    width = draggy.offset.width;
    _ref1 = this.getEl("scroller").children;
    for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
      child = _ref1[i];
      if (!(button = child.querySelector(".btn"))) {
        return;
      }
      if (transition) {
        child.classList.toggle("active", i === this.currentIndex);
        this.transition(button, transition, true);
      }
      this.transform(button, {
        scale: 1 - Math.abs(draggy.x + (i * width)) / width / 5,
        opacity: 1 - Math.abs(draggy.x + (i * width)) / width
      });
    }
  };

  CarouselView.prototype.getScrollDist = function(draggy) {
    return "" + (draggy.x / draggy.offset.width / this.options.data.answers.length * 100) + "%";
  };

  CarouselView.prototype.answerDetails = function() {
    var answer, details, question, questions, selectedAnswerId, _ref1, _ref2;
    questions = ((_ref1 = this.options.metadata) != null ? _ref1.questions : void 0) || [];
    if (!(questions.length > 0)) {
      return [];
    }
    question = questions[0];
    selectedAnswerId = $((_ref2 = this.getEl("scroller")) != null ? _ref2.children[this.currentIndex || 0] : void 0).data("answer-id");
    answer = _.find(question.answers, function(a) {
      return a.id === selectedAnswerId;
    });
    details = {
      question: question.question,
      answer: answer
    };
    return [details];
  };

  CarouselView.prototype.isCorrect = function() {
    var _ref1;
    return ((_ref1 = this.getEl("scroller")) != null ? _ref1.children[this.currentIndex || 0].dataset.isCorrect : void 0) != null;
  };

  CarouselView.prototype.onResize = function() {
    var height, scroller, _ref1;
    if (scroller = this.getEl("scroller")) {
      if ((_ref1 = this.draggy) != null) {
        _ref1.options.minX = -this.draggy.el.offsetWidth * (this.options.data.answers.length - 1);
      }
      scroller.style.height = "";
      height = scroller.offsetHeight;
      scroller.style.height = "" + height + "px";
      return height;
    }
  };

  CarouselView.prototype.refresh = function(params) {
    var changed, content, i, _i, _len, _ref1, _ref2;
    _ref1 = params.data.answers;
    for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
      content = _ref1[i].content;
      if (content && ((_ref2 = this.options.data.answers[i]) != null ? _ref2.content : void 0) !== content) {
        changed = i;
      }
    }
    CarouselView.__super__.refresh.apply(this, arguments);
    this.currentIndex = null;
    return this.show(changed);
  };

  CarouselView.prototype.endGame = function() {
    CarouselView.__super__.endGame.apply(this, arguments);
    return this.submit();
  };

  return CarouselView;

})(GameView);

module.exports = CarouselView;
});

;require.register("engine/categorise/model.yaml", function(exports, require, module) {
module.exports = {"title":"categorise","display":"Categorise","category":"Multiple Choice","links":{"academy":"https://academy.edapp.com/how-to-categorise/"},"features":{"stars":true},"model":{"title":{"types":["text","image","video","audio"],"default":"Which category?"},"buttonText":{"type":"html","default":"","display":"Answer"},"categories":{"min":2,"max":2,"type":[{"text":{"type":"html"},"correct":{"type":"boolean"}}]},"answer":{"text":{"type":"html","default":"","display":"Answer Text"},"correct":{"type":"html","default":"That's correct!","display":"Correct Reinforcement"},"incorrect":{"type":"html","default":"Not quite...","display":"Incorrect Reinforcement"},"takeaway":{"type":"html","default":"","display":"Core Message"}},"prompt":{"type":"html","default":"Drag to the correct category"},"game":{"timer":{"limit":{"type":"number","default":-1,"display":"Time Limit (ms)"}}}},"examples":[{"title":"Is the following statement true or false?","buttonText":"Product Z is the latest addition to the Product family.","categories":[{"text":"True","correct":true},{"text":"False","correct":false}],"answer":{"text":"This statement is correct."}},{"title":"Is Product X type 1 or type 2?","buttonText":"Product X","categories":[{"text":"Type 1","correct":true},{"text":"Type 2","correct":false}],"answer":{"text":"Product X is type 1."}}]}
});

;require.register("engine/categorise/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (buttonClass, buttonText, categories, config, continueBtnText, game, hasNarration, hasPrompt, i18n, prompt) {
jade_mixins["multi-content"] = jade_interp = function(prop, obj){
var block = (this && this.block), attributes = (this && this.attributes) || {};
obj = obj || locals;
switch (obj[prop + "Type"]){
case "image":
buf.push("<div" + (jade.attr("data-content", obj.image, true, false)) + " class=\"multi-content-wrapper multi-content-wrapper-image block-md block-lt\"><div class=\"block-sm multi-content-media\"><img" + (jade.attr("src", obj[prop], true, false)) + " class=\"multi-content multi-content-image\"/></div></div>");
  break;
case "video":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-video block-md block-lt\"><div class=\"block-sm multi-content-media\"><video" + (jade.attr("src", obj[prop], true, false)) + " webkit-playsinline=\"webkit-playsinline\" playsinline=\"playsinline\" preload=\"auto\" controls=\"controls\"" + (jade.attr("dir", config.direction, true, false)) + " class=\"video-js multi-content multi-content-video block-dk\"></video></div></div>");
  break;
case "audio":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-audio block-md block-lt\"><div class=\"block-sm multi-content-media\"><audio" + (jade.attr("src", obj[prop], true, false)) + " webkit-playsinline=\"webkit-playsinline\" playsinline=\"playsinline\" preload=\"auto\" controls=\"controls\"" + (jade.attr("dir", config.direction, true, false)) + " class=\"multi-content multi-content-audio block-dk\"></audio></div></div>");
  break;
case "iframe":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-iframe block-md block-lt\"><div class=\"block-sm multi-content-iframe\">");
var iframe = obj[prop].match(/<iframe[^<]*<\/iframe>/)
if ( iframe)
{
buf.push(null == (jade_interp = iframe[0].replace(/ (width|height)=["'\d\w]+/g, "")) ? "" : jade_interp);
}
buf.push("</div></div>");
  break;
default:
buf.push("<span class=\"multi-content multi-content-text\">" + (null == (jade_interp = obj[prop]) ? "" : jade_interp) + "</span>");
  break;
}
};
if ( game && game.timer && game.timer.limit > 0)
{
buf.push("<div class=\"full-screen\"><div class=\"game-stepper text-lg text-bold\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div></div>");
}
buf.push("<div class=\"content-fill content-fit\"><div class=\"row content-lg-fill content-sm-ver content-md-ver\"><div class=\"col-lg-6 col-sm-12 content-lg-ver block-v-md\"><h1 class=\"slide-title text-lg-right text-md-center text-sm-center fade-in tight\">");
jade_mixins["multi-content"]("title");
buf.push("</h1></div><div class=\"col-lg-6 col-sm-12 content-lg-ver block-v-md\"><div class=\"draggy-parent\"><div" + (jade.attr("data-correct", categories[0].correct, true, false)) + (jade.attr("data-answer-id", categories[0].id, true, false)) + (jade.cls(['category','droppy','droppy-top','block-v-md','delay-4',"droppy-" + (categories[0].correct) + ""], [null,null,null,null,null,true])) + "><div class=\"droppy-child block-dk text-center text-lg slide-left\"><div class=\"content-ver block-sm\">" + (null == (jade_interp = categories[0].content) ? "" : jade_interp) + "</div></div></div><div class=\"draggy block-v-md\"><div" + (jade.cls(['btn','btn-solid','btn-block','selectable','draggy-btn','fade-in','delay-6',buttonClass], [null,null,null,null,null,null,null,true])) + "><div class=\"btn-text\">" + (null == (jade_interp = buttonText) ? "" : jade_interp) + "</div></div></div><div" + (jade.attr("data-correct", categories[1].correct, true, false)) + (jade.attr("data-answer-id", categories[1].id, true, false)) + (jade.cls(['category','droppy','droppy-bottom','block-v-md','delay-4',"droppy-" + (categories[1].correct) + ""], [null,null,null,null,null,true])) + "><div class=\"droppy-child block-dk text-center text-lg slide-right\"><div class=\"content-ver\">" + (null == (jade_interp = categories[1].content) ? "" : jade_interp) + "</div></div></div></div></div></div></div><div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"buttonClass" in locals_for_with?locals_for_with.buttonClass:typeof buttonClass!=="undefined"?buttonClass:undefined,"buttonText" in locals_for_with?locals_for_with.buttonText:typeof buttonText!=="undefined"?buttonText:undefined,"categories" in locals_for_with?locals_for_with.categories:typeof categories!=="undefined"?categories:undefined,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"game" in locals_for_with?locals_for_with.game:typeof game!=="undefined"?game:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/categorise/view.coffee", function(exports, require, module) {
var CategoriseView, Device, Draggy, GameView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

GameView = require("views/base/game");

Draggy = require("views/components/draggy");

Device = require("lib/device");

CategoriseView = (function(_super) {
  __extends(CategoriseView, _super);

  function CategoriseView() {
    _ref = CategoriseView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  CategoriseView.prototype.template = require("./template");

  CategoriseView.prototype.fitTextOnResize = false;

  CategoriseView.prototype.fitTextOnRender = false;

  CategoriseView.prototype.serialize = function() {
    var data, maxTextLength;
    data = CategoriseView.__super__.serialize.apply(this, arguments);
    maxTextLength = data.width > 375 ? 30 : 20;
    if (data.buttonText.length > maxTextLength) {
      data.buttonClass = "btn-long";
    }
    data.categories = _.shuffle(data.metadata.questions[0].answers);
    return data;
  };

  CategoriseView.prototype.events = function() {
    return {
      "iostap .btn-done": "endGame"
    };
  };

  CategoriseView.prototype.show = function() {
    CategoriseView.__super__.show.apply(this, arguments);
    delete this.index;
    this.setEl(this.findOne(".draggy-btn"), "draggyBtn");
    this.setEl(this.findOne(".draggy-parent"), "draggyParent");
    this.setEl(this.findAll(".droppy"), "droppies");
    this.setEl(this.findAll(".droppy-child"), "droppyChild");
    this.createDraggy();
    return this.enterGame();
  };

  CategoriseView.prototype.createDraggy = function() {
    this.draggy = new Draggy({
      el: this.findOne(".draggy"),
      lock: "x"
    });
    this.draggy.el.classList.add("no-delay");
    this.listenTo(this.draggy, "drag", this.onDrag);
    this.listenTo(this.draggy, "drop", this.onDrop);
    this.listenTo(this, "resize", this.onResize);
    return this.updateDroppyHeight();
  };

  CategoriseView.prototype.onDrag = function(draggy, isInitialDrag) {
    var droppy, i, _i, _len, _ref1;
    this.index = draggy.y < 0 ? 0 : 1;
    _ref1 = this.getEl("droppies");
    for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
      droppy = _ref1[i];
      droppy.classList.add("no-delay");
      droppy.classList.toggle("active", i === this.index);
    }
    return this.transform(draggy.el, {
      y: draggy.y,
      scale: 1.05,
      transition: isInitialDrag ? "all 300ms" : "none"
    });
  };

  CategoriseView.prototype.onDrop = function(draggy, isReset) {
    var y;
    if (isReset) {
      this.transform(draggy.el, {
        y: draggy.y,
        transition: "all 300ms"
      });
    } else {
      if (!(this.currentDroppy = this.getEl("droppies")[this.index])) {
        return;
      }
      this.draggy.el.classList.add("draggy-drop");
      this.moveDroppies();
      y = (this.currentDroppy.offsetHeight - this.draggy.offset.height) / 2;
      if (draggy.y < 0) {
        y = -y - draggy.offset.height / 2;
      } else {
        y = y + draggy.offset.height / 2;
      }
      draggy.reset({
        x: 0,
        y: y
      });
    }
    return this.setState("touched");
  };

  CategoriseView.prototype.moveDroppies = function() {
    var el, i, toTransform, y, _i, _len, _results;
    y = this.draggy.offset.height / 2;
    toTransform = __slice.call(this.getEl("droppies"));
    if (Device.breakpoint(["xs", "sm", "md"])) {
      toTransform.push(this.findOne(".slide-title"));
    }
    _results = [];
    for (i = _i = 0, _len = toTransform.length; _i < _len; i = ++_i) {
      el = toTransform[i];
      _results.push(this.transform(el, {
        y: i === 1 ? -y : y,
        transition: "all 300ms"
      }));
    }
    return _results;
  };

  CategoriseView.prototype.updateDroppyHeight = function() {
    var el, fontSize, height, i, _i, _j, _len, _len1, _ref1, _ref2, _ref3,
      _this = this;
    this.draggy.getOffset();
    if (!((_ref1 = this.currentState) != null ? _ref1.refresh : void 0)) {
      this.el.classList.remove("active");
    }
    _ref2 = this.getEl("droppies");
    for (i = _i = 0, _len = _ref2.length; _i < _len; i = ++_i) {
      el = _ref2[i];
      el.firstChild.style.height = "";
    }
    fontSize = parseInt(window.getComputedStyle(this.getEl("droppies")[0]).fontSize);
    height = _.reduce(this.getEl("droppies"), function(m, el) {
      if (m > el.offsetHeight) {
        return m;
      } else {
        return el.offsetHeight;
      }
    }, this.draggy.el.firstChild.offsetHeight);
    _ref3 = this.getEl("droppies");
    for (i = _j = 0, _len1 = _ref3.length; _j < _len1; i = ++_j) {
      el = _ref3[i];
      el.firstChild.style.height = "" + (height / fontSize) + "em";
    }
    this.draggy.options.minY = -height;
    this.draggy.options.maxY = height;
    return this.fitText(function() {
      return window.setTimeout((function() {
        return _this.el.classList.add("active");
      }), 300);
    });
  };

  CategoriseView.prototype.answerDetails = function() {
    var answer, details, id, question, questions, _ref1;
    questions = ((_ref1 = this.options.metadata) != null ? _ref1.questions : void 0) || [];
    if (!(questions.length > 0 && (this.currentDroppy != null))) {
      return [];
    }
    question = questions[0];
    id = this.currentDroppy.dataset.answerId;
    answer = _.findWhere(question.answers, {
      id: id
    });
    details = {
      question: question.question,
      answer: answer
    };
    return [details];
  };

  CategoriseView.prototype.isCorrect = function() {
    var _ref1;
    return ((_ref1 = this.currentDroppy) != null ? _ref1.dataset.correct : void 0) != null;
  };

  CategoriseView.prototype.onRefresh = function() {
    var el, i, _i, _len, _ref1;
    if (this.draggy) {
      this.draggy.el.classList.remove("no-delay");
      _ref1 = this.getEl("droppies");
      for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
        el = _ref1[i];
        el.classList.remove("no-delay");
      }
    }
    return CategoriseView.__super__.onRefresh.apply(this, arguments);
  };

  CategoriseView.prototype.onResize = function() {
    this.updateDroppyHeight();
    return this.onDrop(this.draggy);
  };

  CategoriseView.prototype.endGame = function() {
    CategoriseView.__super__.endGame.apply(this, arguments);
    return this.submit();
  };

  return CategoriseView;

})(GameView);

module.exports = CategoriseView;
});

;require.register("engine/chat/model.yaml", function(exports, require, module) {
module.exports = {"title":"chat","display":"Chat","category":"Multiple Choice","links":{"academy":"https://academy.edapp.com/how-to-chat/"},"features":{"stars":true},"model":{"title":{"type":"html"},"message":{"content":{"type":"html"},"sender":{"type":"html"},"responder":{"type":"html","default":"You"}},"answers":{"correct":{"display":"Correct Answer","type":"html"},"incorrect":{"display":"Incorrect Answers","type":[{"type":"html"}],"min":1,"max":2}},"answer":{"text":{"type":"html","default":"","display":"Answer Text"},"correct":{"type":"html","default":"That's correct!","display":"Correct Reinforcement"},"incorrect":{"type":"html","default":"Not quite...","display":"Incorrect Reinforcement"},"takeaway":{"type":"html","default":"","display":"Core Message"}},"prompt":{"type":"html","default":"Select the correct answer"},"game":{"timer":{"limit":{"type":"number","default":-1,"display":"Time Limit (ms)"}}}},"examples":[{"message":{"sender":"The customer asks","responder":"What's your answer?","content":"Which product is the cheapest?"},"answers":{"correct":"Product X is cheapest","incorrect":["Product Y is cheapest","Product Z is cheapest"]},"answer":{"text":"It's important to help the customer understand that Product X is in fact the cheapest product.\n"}}]}
});

;require.register("engine/chat/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (allAnswers, continueBtnText, game, hasNarration, hasPrompt, i18n, message, prompt, title, undefined) {
if ( game && game.timer && game.timer.limit > 0)
{
buf.push("<div class=\"full-screen\"><div class=\"game-stepper text-lg text-bold\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div></div>");
}
buf.push("<div class=\"content-fill\"><div class=\"block-v-md content-ver text-md content-fit\">");
if ( title)
{
buf.push("<h2 class=\"fade-in\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h2>");
}
buf.push("<div class=\"row\">");
if ( message.content)
{
buf.push("<div class=\"col-lg-10 col-sm-12\">");
if ( message.sender)
{
buf.push("<h4 class=\"fade-in block-v-sm\">" + (null == (jade_interp = message.sender) ? "" : jade_interp) + "</h4>");
}
buf.push("<div class=\"chat-msg slide-up delay-1 pull-left\"><div class=\"chat-msg-elli\"> <span class=\"bullet delay-1\">&bullet;</span><span class=\"bullet delay-2\">&bullet;</span><span class=\"bullet delay-3\">&bullet;</span></div><div class=\"chat-msg-text\">" + (null == (jade_interp = message.content) ? "" : jade_interp) + "</div></div></div>");
}
if ( message.responder)
{
buf.push("<h4 class=\"col-sm-12 block-v-sm text-right chat-responder delay-4\">" + (null == (jade_interp = message.responder) ? "" : jade_interp) + "</h4>");
}
// iterate allAnswers
;(function(){
  var $$obj = allAnswers;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var answer = $$obj[$index];

buf.push("<div class=\"col-md-10 col-md-offset-2 col-sm-12\"><div" + (jade.attr("data-id", answer.id, true, false)) + (jade.cls(['chat-msg','pull-right','text-right','selectable',([
              "delay-" + (answer.delay) + "",
              answer.isCorrect ? "correct" : "incorrect"
            ].join(" "))], [null,null,null,null,true])) + ">" + (null == (jade_interp = answer.text) ? "" : jade_interp) + "</div></div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var answer = $$obj[$index];

buf.push("<div class=\"col-md-10 col-md-offset-2 col-sm-12\"><div" + (jade.attr("data-id", answer.id, true, false)) + (jade.cls(['chat-msg','pull-right','text-right','selectable',([
              "delay-" + (answer.delay) + "",
              answer.isCorrect ? "correct" : "incorrect"
            ].join(" "))], [null,null,null,null,true])) + ">" + (null == (jade_interp = answer.text) ? "" : jade_interp) + "</div></div>");
    }

  }
}).call(this);

buf.push("</div></div></div><div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"allAnswers" in locals_for_with?locals_for_with.allAnswers:typeof allAnswers!=="undefined"?allAnswers:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"game" in locals_for_with?locals_for_with.game:typeof game!=="undefined"?game:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"message" in locals_for_with?locals_for_with.message:typeof message!=="undefined"?message:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/chat/view.coffee", function(exports, require, module) {
var ChatView, GameView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

GameView = require("views/base/game");

ChatView = (function(_super) {
  __extends(ChatView, _super);

  function ChatView() {
    _ref = ChatView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  ChatView.prototype.template = require("./template");

  ChatView.prototype.events = function() {
    return {
      "iostap .selectable": "selectAnswer",
      "iostap .btn-done": "endGame"
    };
  };

  ChatView.prototype.serialize = function() {
    var answers, d, _ref1, _ref2, _ref3;
    d = ChatView.__super__.serialize.apply(this, arguments);
    answers = ((_ref1 = d.metadata) != null ? (_ref2 = _ref1.questions) != null ? (_ref3 = _ref2[0]) != null ? _ref3.answers : void 0 : void 0 : void 0) || [];
    d.allAnswers = _.shuffle(answers).map(function(a, i) {
      return {
        id: a.id,
        text: typogr.typogrify(a.content.toString() || ""),
        isCorrect: a.correct,
        delay: 6 + i * 2
      };
    });
    return d;
  };

  ChatView.prototype.onRefresh = function() {
    ChatView.__super__.onRefresh.apply(this, arguments);
    return this.resetChat(true);
  };

  ChatView.prototype.resetChat = function(isRefresh) {
    var delay, el, _i, _len, _ref1, _ref2,
      _this = this;
    this.setState("prompt");
    this.setState(false, "show-msg");
    delay = isRefresh ? 0 : !this.options.data.message.content ? 300 : 1000;
    if (((_ref1 = this.options.data.game) != null ? _ref1.timer.limit : void 0) > 0) {
      _ref2 = this.getEl("answers");
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        el = _ref2[_i];
        el.classList.add("no-delay");
      }
    }
    if (isRefresh) {
      this.getEl("chatElli").classList.add("hide");
    }
    window.clearTimeout(this.timeout);
    return this.timeout = window.setTimeout((function() {
      _this.setState(true, "show-msg");
      return _this.getEl("chatElli").classList.remove("hide");
    }), delay);
  };

  ChatView.prototype.show = function() {
    ChatView.__super__.show.apply(this, arguments);
    this.setEl(this.findAll(".selectable"), "answers");
    this.setEl(this.findOne(".chat-msg-elli"), "chatElli");
    this.resetChat();
    return this.enterGame();
  };

  ChatView.prototype.hide = function() {
    this.setState(false, "show-msg");
    return ChatView.__super__.hide.apply(this, arguments);
  };

  ChatView.prototype.endGame = function() {
    ChatView.__super__.endGame.apply(this, arguments);
    return this.submit();
  };

  ChatView.prototype.selectAnswer = function(e) {
    var el, target, width, _i, _len, _ref1;
    if (this.currentState.state === "complete") {
      return;
    }
    _ref1 = this.getEl("answers");
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      el = _ref1[_i];
      el.classList.remove("active");
      this.transform(el, {
        scale: 1
      });
    }
    target = e.currentTarget;
    width = target.offsetWidth;
    target.classList.add("active", "no-delay");
    this.transform(target, {
      scale: 1 + 16 / width
    });
    this.setEl(target, "selected");
    return this.setState("touched");
  };

  ChatView.prototype.answerDetails = function() {
    var details, id, question, questions, _ref1, _ref2;
    questions = ((_ref1 = this.options.metadata) != null ? _ref1.questions : void 0) || [];
    if (!(questions.length > 0)) {
      return [];
    }
    question = questions[0];
    id = (_ref2 = this.getEl("selected")) != null ? _ref2.dataset.id : void 0;
    details = {
      answer: _.find(question.answers, {
        id: id
      }),
      question: question.question
    };
    return [details];
  };

  ChatView.prototype.isCorrect = function() {
    var _ref1, _ref2;
    return (_ref1 = (_ref2 = this.getEl("selected")) != null ? _ref2.classList.contains("correct") : void 0) != null ? _ref1 : false;
  };

  return ChatView;

})(GameView);

module.exports = ChatView;
});

;require.register("engine/circle-the-answer/model.yaml", function(exports, require, module) {
module.exports = {"title":"circle-the-answer","display":"Circle the Answer","category":"Multiple Choice","features":{"stars":true},"model":{"title":{"types":["text","image","video","audio"],"default":""},"answers":{"correct":{"display":"Correct Answer","type":"html"},"incorrect":{"display":"Incorrect Answers","type":[{"type":"html"}],"min":1,"max":3}},"answer":{"text":{"type":"html","default":"","display":"Answer Text"},"correct":{"type":"html","default":"That's correct!","display":"Correct Reinforcement"},"incorrect":{"type":"html","default":"Not quite...","display":"Incorrect Reinforcement"},"takeaway":{"type":"html","default":"","display":"Core Message"}},"prompt":{"type":"html","default":"Circle the correct answer"},"game":{"timer":{"limit":{"type":"number","default":-1,"display":"Time Limit (ms)"}}}},"examples":[{"title":"Ed makes learning fun with a massive range of engaging templates","titleType":"text","answers":{"correct":"That’s right!","incorrect":["Yes, I suppose so...","I'm not sure"]}}]}
});

;require.register("engine/circle-the-answer/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (allAnswers, config, continueBtnText, game, hasNarration, hasPrompt, i18n, prompt, undefined) {
jade_mixins["multi-content"] = jade_interp = function(prop, obj){
var block = (this && this.block), attributes = (this && this.attributes) || {};
obj = obj || locals;
switch (obj[prop + "Type"]){
case "image":
buf.push("<div" + (jade.attr("data-content", obj.image, true, false)) + " class=\"multi-content-wrapper multi-content-wrapper-image block-md block-lt\"><div class=\"block-sm multi-content-media\"><img" + (jade.attr("src", obj[prop], true, false)) + " class=\"multi-content multi-content-image\"/></div></div>");
  break;
case "video":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-video block-md block-lt\"><div class=\"block-sm multi-content-media\"><video" + (jade.attr("src", obj[prop], true, false)) + " webkit-playsinline=\"webkit-playsinline\" playsinline=\"playsinline\" preload=\"auto\" controls=\"controls\"" + (jade.attr("dir", config.direction, true, false)) + " class=\"video-js multi-content multi-content-video block-dk\"></video></div></div>");
  break;
case "audio":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-audio block-md block-lt\"><div class=\"block-sm multi-content-media\"><audio" + (jade.attr("src", obj[prop], true, false)) + " webkit-playsinline=\"webkit-playsinline\" playsinline=\"playsinline\" preload=\"auto\" controls=\"controls\"" + (jade.attr("dir", config.direction, true, false)) + " class=\"multi-content multi-content-audio block-dk\"></audio></div></div>");
  break;
case "iframe":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-iframe block-md block-lt\"><div class=\"block-sm multi-content-iframe\">");
var iframe = obj[prop].match(/<iframe[^<]*<\/iframe>/)
if ( iframe)
{
buf.push(null == (jade_interp = iframe[0].replace(/ (width|height)=["'\d\w]+/g, "")) ? "" : jade_interp);
}
buf.push("</div></div>");
  break;
default:
buf.push("<span class=\"multi-content multi-content-text\">" + (null == (jade_interp = obj[prop]) ? "" : jade_interp) + "</span>");
  break;
}
};
if ( game && game.timer && game.timer.limit > 0)
{
buf.push("<div class=\"full-screen\"><div class=\"game-stepper text-lg text-bold\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div></div>");
}
buf.push("<div class=\"full-screen circle-canvas-container\"><canvas class=\"circle-canvas\"></canvas></div><div class=\"block-v-lg content-fill content-fit circle-boxes\"><div class=\"row content-lg-fill content-sm-ver content-md-ver\"><div class=\"col-lg-6 col-sm-12 content-lg-ver block-v-md\"><h1 class=\"fade-in text-lg-right text-md-center text-sm-center\">");
jade_mixins["multi-content"]("title");
buf.push("</h1></div><div class=\"col-lg-6 col-sm-12 content-lg-ver block-v-md text-center\">");
// iterate allAnswers
;(function(){
  var $$obj = allAnswers;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var answer = $$obj[i];

buf.push("<div" + (jade.attr("data-correct", answer.isCorrect, true, false)) + (jade.attr("data-answer-id", answer.id, true, false)) + (jade.cls(['circle-box','slide-up','text-md',([
            "delay-" + (answer.delay) + "",
            answer.isCorrect ? "correct" : "incorrect"
          ].join(" "))], [null,null,null,true])) + "><div class=\"block-lg circle-box-text\">" + (null == (jade_interp = answer.text) ? "" : jade_interp) + "</div></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var answer = $$obj[i];

buf.push("<div" + (jade.attr("data-correct", answer.isCorrect, true, false)) + (jade.attr("data-answer-id", answer.id, true, false)) + (jade.cls(['circle-box','slide-up','text-md',([
            "delay-" + (answer.delay) + "",
            answer.isCorrect ? "correct" : "incorrect"
          ].join(" "))], [null,null,null,true])) + "><div class=\"block-lg circle-box-text\">" + (null == (jade_interp = answer.text) ? "" : jade_interp) + "</div></div>");
    }

  }
}).call(this);

buf.push("</div></div></div><div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"allAnswers" in locals_for_with?locals_for_with.allAnswers:typeof allAnswers!=="undefined"?allAnswers:undefined,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"game" in locals_for_with?locals_for_with.game:typeof game!=="undefined"?game:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/circle-the-answer/view.coffee", function(exports, require, module) {
var CircleTheAnswerView, DraggyView, GameView, SmoothLine, animate, dpi, easie, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

GameView = require("views/base/game");

DraggyView = require("views/components/draggy");

SmoothLine = require("lib/draw/smooth-line");

easie = require("lib/easie");

animate = require("lib/animate");

dpi = require("lib/device").dpi;

CircleTheAnswerView = (function(_super) {
  __extends(CircleTheAnswerView, _super);

  function CircleTheAnswerView() {
    _ref = CircleTheAnswerView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  CircleTheAnswerView.prototype.template = require("./template");

  CircleTheAnswerView.prototype.events = function() {
    return {
      "iostap .btn-done": "endGame"
    };
  };

  CircleTheAnswerView.prototype.serialize = function() {
    var allAnswers, answers, d, _ref1, _ref2, _ref3;
    d = CircleTheAnswerView.__super__.serialize.apply(this, arguments);
    allAnswers = ((_ref1 = d.metadata) != null ? (_ref2 = _ref1.questions) != null ? (_ref3 = _ref2[0]) != null ? _ref3.answers : void 0 : void 0 : void 0) || [];
    answers = allAnswers.map(function(a, i) {
      return {
        id: a.id,
        text: typogr.typogrify(a.content.toString() || ""),
        isCorrect: a.correct,
        delay: 4 + i * 2
      };
    });
    d.allAnswers = _.shuffle(answers);
    return d;
  };

  CircleTheAnswerView.prototype.show = function() {
    var el, _base, _base1, _i, _len, _ref1;
    CircleTheAnswerView.__super__.show.apply(this, arguments);
    this.setEl(this.findAll(".circle-box"), "boxes");
    this.draggy = new DraggyView({
      el: this.findOne("canvas"),
      isParent: true
    });
    this.context = (typeof (_base = this.draggy.el).getContext === "function" ? _base.getContext("2d") : void 0) || {};
    this.listenTo(this.draggy, "drag", this.onDrag);
    this.listenTo(this.draggy, "drop", this.onDrop);
    this.listenTo(this, "resize", this.onResize);
    this.onResize();
    if (typeof (_base1 = this.context).clearRect === "function") {
      _base1.clearRect(0, 0, this.draggy.el.width, this.draggy.el.height);
    }
    _ref1 = this.getEl("boxes");
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      el = _ref1[_i];
      el.classList.remove("active", "complete");
    }
    return this.enterGame();
  };

  CircleTheAnswerView.prototype.onResize = function() {
    var el, _ref1;
    if (el = (_ref1 = this.draggy) != null ? _ref1.el : void 0) {
      el.width = this.el.firstChild.offsetWidth * dpi;
      return el.height = this.el.firstChild.offsetHeight * dpi;
    }
  };

  CircleTheAnswerView.prototype.onDrag = function(draggy, isInitial) {
    var box, left, top, _i, _len, _ref1, _ref2, _ref3, _ref4, _ref5;
    window.clearTimeout(this.timeout);
    _ref1 = this.getBounds(this.el.firstChild), left = _ref1.left, top = _ref1.top;
    if (isInitial) {
      if ((_ref2 = this.line) != null) {
        if ((_ref3 = _ref2.animation) != null) {
          _ref3.cancel();
        }
      }
      if ((_ref4 = this.animation) != null) {
        _ref4.cancel();
      }
      this.context.lineCap = "round";
      this.context.globalAlpha = 1;
      this.line = new SmoothLine([], window.getComputedStyle(this.el).color, 4 * dpi);
      this.activeBox = null;
      _ref5 = this.getEl("boxes");
      for (_i = 0, _len = _ref5.length; _i < _len; _i++) {
        box = _ref5[_i];
        box.classList.remove("active");
      }
    }
    return this.addPoint(draggy);
  };

  CircleTheAnswerView.prototype.onDrop = function() {
    this.findAnswer(this.line.getPoints());
    if (this.activeBox) {
      return this.setState("touched");
    } else {
      return this.setState("prompt");
    }
  };

  CircleTheAnswerView.prototype.addPoint = function(_arg) {
    var x, y;
    x = _arg.x, y = _arg.y;
    this.line.add({
      x: x * dpi,
      y: y * dpi
    });
    return this.drawLines();
  };

  CircleTheAnswerView.prototype.drawLines = function() {
    this.draggy.el.offsetHeight;
    this.context.clearRect(0, 0, this.draggy.el.width, this.draggy.el.height);
    this.context.beginPath();
    return this.line.draw(this.context);
  };

  CircleTheAnswerView.prototype.getClosestBox = function(centerX, centerY) {
    var offset,
      _this = this;
    offset = {
      x: -this.draggy.offset.left,
      y: -this.draggy.offset.top
    };
    return _.sortBy(this.getEl("boxes"), function(box) {
      var bounds, x, y;
      bounds = _this.getBounds(box, offset);
      x = (bounds.left + bounds.width / 2) - centerX / dpi;
      y = (bounds.top + bounds.height / 2) - centerY / dpi;
      return Math.sqrt(x * x + y * y);
    })[0];
  };

  CircleTheAnswerView.prototype.getDistance = function(p1, p2) {
    var distX, distY;
    distX = p1.x - p2.x;
    distY = p1.y - p2.y;
    return Math.sqrt(Math.pow(distX, 2) + Math.pow(distY, 2));
  };

  CircleTheAnswerView.prototype.findAnswer = function(points) {
    var bounds, boxX, boxY, buffer, centerX, centerY, el, isACircle, isWithin, maxX, maxY, minX, minY, offset, radius, type, x, y, _i, _len, _ref1, _ref2;
    minX = minY = Infinity;
    maxX = maxY = -Infinity;
    for (_i = 0, _len = points.length; _i < _len; _i++) {
      _ref1 = points[_i], x = _ref1.x, y = _ref1.y;
      if (x < minX) {
        minX = x;
      }
      if (x > maxX) {
        maxX = x;
      }
      if (y < minY) {
        minY = y;
      }
      if (y > maxY) {
        maxY = y;
      }
    }
    buffer = 80;
    centerX = _.average(_.pluck(points, "x"));
    centerY = _.average(_.pluck(points, "y"));
    radius = ((maxX - minX) / 2 + (maxY - minY) / 2) / 2;
    el = this.getClosestBox(centerX, centerY);
    offset = {
      x: -this.draggy.offset.left,
      y: -this.draggy.offset.top
    };
    bounds = this.getBounds(el, offset);
    boxX = bounds.left + bounds.width / 2;
    boxY = bounds.top + bounds.height / 2;
    isACircle = this.getDistance(points[0], _.last(points)) < 250;
    isWithin = boxX * dpi > minX - buffer && boxX * dpi < maxX + buffer && boxY * dpi > minY - buffer && boxY * dpi < maxY + buffer;
    this.activeBox = isACircle && isWithin ? el : void 0;
    if ((_ref2 = this.activeBox) != null) {
      _ref2.classList.add("active");
    }
    type = !isACircle ? "line" : isWithin ? "on" : "off";
    return this.animateAnswer(type, centerX, centerY, radius);
  };

  CircleTheAnswerView.prototype.animateAnswer = function(type, x, y, radius) {
    var draw, duration, wrap,
      _this = this;
    switch (type) {
      case "line":
        this.line.erase(this.context, function() {
          return _this.context.clearRect(0, 0, _this.draggy.el.width, _this.draggy.el.height);
        });
        break;
      case "on":
        duration = 1000;
        this.context.fillStyle = window.getComputedStyle(this.el).color;
        draw = function(dist) {
          var scale;
          scale = easie.elasticInOut(dist + 1, 0, 1.25, 2, 1.25, 1.25);
          _this.context.arc(x, y, radius * scale, 0, 2 * Math.PI);
          return _this.context.fill();
        };
        break;
      case "off":
        duration = 1000;
        draw = function(dist) {
          var scale;
          scale = easie.elasticIn(1 - dist, 0.8, 0.2, 1, 0.5);
          _this.context.arc(x, y, radius * scale, 0, 2 * Math.PI);
          return _this.context.stroke();
        };
    }
    if (draw) {
      wrap = function(d) {
        _this.context.clearRect(0, 0, _this.draggy.el.width, _this.draggy.el.height);
        _this.context.beginPath();
        _this.context.globalAlpha = 1 - d;
        return draw(d);
      };
      return this.animation = animate(wrap, duration);
    }
  };

  CircleTheAnswerView.prototype.isCorrect = function() {
    var _ref1;
    return ((_ref1 = this.activeBox) != null ? _ref1.dataset.correct : void 0) != null;
  };

  CircleTheAnswerView.prototype.isMatch = function(left, right) {
    var ll, lr, rl, rr;
    lr = this.options.data.pairs[+left.dataset.index].right;
    rr = this.options.data.pairs[+right.dataset.index].right;
    ll = this.options.data.pairs[+left.dataset.index].left;
    rl = this.options.data.pairs[+right.dataset.index].left;
    return lr === rr || ll === rl;
  };

  CircleTheAnswerView.prototype.endGame = function() {
    CircleTheAnswerView.__super__.endGame.apply(this, arguments);
    return this.submit();
  };

  CircleTheAnswerView.prototype.answerDetails = function() {
    var details, id, question, questions, _ref1;
    questions = ((_ref1 = this.options.metadata) != null ? _ref1.questions : void 0) || [];
    if (!(questions.length > 0)) {
      return [];
    }
    question = questions[0];
    id = this.$(this.activeBox).data("answer-id");
    details = {
      answer: _.find(question.answers, {
        id: id
      }),
      question: question.question
    };
    return [details];
  };

  return CircleTheAnswerView;

})(GameView);

module.exports = CircleTheAnswerView;
});

;require.register("engine/comparison/model.yaml", function(exports, require, module) {
module.exports = {"title":"comparison","display":"Comparison","category":"Content","description":"Juxtapose two items in a slider","features":{"narration":true},"model":{"title":{"type":"html","default":"Ask a question"},"before":{"content":{"types":["text","image"]},"label":{"type":"text"}},"after":{"content":{"types":["text","image"]},"label":{"type":"text"}},"startPosition":{"type":"select","enum":["Before - Start with the first section visible","Middle - Show the content equally divided","After - The second section is shown first"],"default":"Middle","display":"Start Position"},"prompt":{"type":"html","default":"Drag to compare the content"}},"examples":[{"title":"Product X vs. Product Y","before":{"content":"img/examples/product-1.png","contentType":"image","label":"**Product X**\n\nClassic Everyday Sizing\n"},"after":{"content":"img/examples/product-2.png","contentType":"image","label":"**Product Y**\n\nBetter Value With More Packed In\n"}},{"title":"Product X","before":{"content":"## The Classic\n","contentType":"text"},"after":{"content":"This is the original product in our line and is a great source of pride for the company.\n\nIt's important to help the customer understand that Product X is in fact the cheapest product.\n","contentType":"text"},"startPosition":"Before - Start with the first section visible","prompt":"Drag to reveal the content"}]}
});

;require.register("engine/comparison/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (after, before, config, continueBtnText, hasNarration, hasPrompt, i18n, prompt, title, undefined) {
jade_mixins["multi-content"] = jade_interp = function(prop, obj){
var block = (this && this.block), attributes = (this && this.attributes) || {};
obj = obj || locals;
switch (obj[prop + "Type"]){
case "image":
buf.push("<div" + (jade.attr("data-content", obj.image, true, false)) + " class=\"multi-content-wrapper multi-content-wrapper-image block-md block-lt\"><div class=\"block-sm multi-content-media\"><img" + (jade.attr("src", obj[prop], true, false)) + " class=\"multi-content multi-content-image\"/></div></div>");
  break;
case "video":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-video block-md block-lt\"><div class=\"block-sm multi-content-media\"><video" + (jade.attr("src", obj[prop], true, false)) + " webkit-playsinline=\"webkit-playsinline\" playsinline=\"playsinline\" preload=\"auto\" controls=\"controls\"" + (jade.attr("dir", config.direction, true, false)) + " class=\"video-js multi-content multi-content-video block-dk\"></video></div></div>");
  break;
case "audio":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-audio block-md block-lt\"><div class=\"block-sm multi-content-media\"><audio" + (jade.attr("src", obj[prop], true, false)) + " webkit-playsinline=\"webkit-playsinline\" playsinline=\"playsinline\" preload=\"auto\" controls=\"controls\"" + (jade.attr("dir", config.direction, true, false)) + " class=\"multi-content multi-content-audio block-dk\"></audio></div></div>");
  break;
case "iframe":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-iframe block-md block-lt\"><div class=\"block-sm multi-content-iframe\">");
var iframe = obj[prop].match(/<iframe[^<]*<\/iframe>/)
if ( iframe)
{
buf.push(null == (jade_interp = iframe[0].replace(/ (width|height)=["'\d\w]+/g, "")) ? "" : jade_interp);
}
buf.push("</div></div>");
  break;
default:
buf.push("<span class=\"multi-content multi-content-text\">" + (null == (jade_interp = obj[prop]) ? "" : jade_interp) + "</span>");
  break;
}
};
buf.push("<div class=\"content-fit content-fill\"><div class=\"content-ver text-center block-v-lg\"><div class=\"row\"><div class=\"col-sm-12 col-md-8 col-md-offset-2\"><div class=\"block-v-md\"><h1 class=\"slide-down\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1></div><div class=\"block-v-lg fade-in delay-3\"><div class=\"slider\"><div class=\"slider-knob\"></div><div class=\"slider-items\">");
// iterate [ before, after ]
;(function(){
  var $$obj = [ before, after ];
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var item = $$obj[i];

buf.push("<div" + (jade.cls(['slider-item','content-fill',"slider-item-" + (i) + ""], [null,null,true])) + "><div class=\"slider-content content-fill\">");
jade_mixins["multi-content"]("content", item);
buf.push("</div></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var item = $$obj[i];

buf.push("<div" + (jade.cls(['slider-item','content-fill',"slider-item-" + (i) + ""], [null,null,true])) + "><div class=\"slider-content content-fill\">");
jade_mixins["multi-content"]("content", item);
buf.push("</div></div>");
    }

  }
}).call(this);

buf.push("</div></div></div><div class=\"slider-labels text-md slide-up\"><div class=\"slider-label slider-label-before\">" + (null == (jade_interp = before.label) ? "" : jade_interp) + "</div><div class=\"slider-label slider-label-after\">" + (null == (jade_interp = after.label) ? "" : jade_interp) + "</div></div></div></div></div></div><div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"after" in locals_for_with?locals_for_with.after:typeof after!=="undefined"?after:undefined,"before" in locals_for_with?locals_for_with.before:typeof before!=="undefined"?before:undefined,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/comparison/view.coffee", function(exports, require, module) {
var ComparisonView, Draggy, Preloader, SlideView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SlideView = require("views/slide");

Draggy = require("views/components/draggy");

Preloader = require("lib/preload");

ComparisonView = (function(_super) {
  __extends(ComparisonView, _super);

  function ComparisonView() {
    _ref = ComparisonView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  ComparisonView.prototype.template = require("./template");

  ComparisonView.prototype.events = {
    "iostap .btn-done": "submit"
  };

  ComparisonView.prototype.show = function() {
    this.createDraggy();
    return this.slideToStart();
  };

  ComparisonView.prototype.getStartPosition = function() {
    var _ref1;
    return ((_ref1 = this.options.data.startPosition) != null ? typeof _ref1.split === "function" ? _ref1.split(" ")[0].toLowerCase() : void 0 : void 0) || "middle";
  };

  ComparisonView.prototype.slideToStart = function() {
    var offset,
      _this = this;
    offset = (function() {
      switch (this.getStartPosition()) {
        case "before":
          return 1;
        case "after":
          return 0;
        default:
          return 0.5;
      }
    }).call(this);
    return window.setTimeout(function() {
      var _ref1;
      return (_ref1 = _this.draggy) != null ? _ref1.reset({
        x: _this.draggy.offset.width * offset
      }) : void 0;
    }, 1);
  };

  ComparisonView.prototype.beforeShow = function() {
    var images,
      _this = this;
    images = this.findAll("img");
    this.setEl(this.findOne(".slider"), "slider");
    this.setEl(this.findOne(".slider-knob"), "knob");
    this.setEl(this.findAll(".slider-item"), "items");
    this.draggy = null;
    delete this.draggy;
    if (images.length > 0) {
      return Preloader.load(_.pluck(images, "src"), function() {
        return _this.sizeContent();
      });
    } else {
      return this.sizeContent();
    }
  };

  ComparisonView.prototype.refresh = function(params) {
    var position;
    position = !_.isEqual(params.data.before, this.options.data.before) ? 0.75 : !_.isEqual(params.data.after, this.options.data.after) ? 0.25 : void 0;
    ComparisonView.__super__.refresh.apply(this, arguments);
    this.beforeShow();
    if (position) {
      this.createDraggy();
      this.draggy.reset({
        x: this.draggy.offset.width * position
      });
      return this.onDrag(this.draggy, false, 1);
    } else {
      return this.show();
    }
  };

  ComparisonView.prototype.onRefresh = function() {};

  ComparisonView.prototype.createDraggy = function() {
    var width;
    width = this.getEl("slider").offsetWidth;
    this.draggy = new Draggy({
      el: this.getEl("slider"),
      minX: 0,
      maxX: width,
      lock: "y",
      isParent: true
    });
    this.listenTo(this, "resize", this.onResize);
    this.listenTo(this.draggy, "drag", this.onDrag);
    return this.listenTo(this.draggy, "drop", this.onDrop);
  };

  ComparisonView.prototype.onDrag = function(draggy, isInitialDrag, scale) {
    var el, i, s, side, transition, x, _i, _len, _ref1, _results;
    if (scale == null) {
      scale = 1.1;
    }
    transition = isInitialDrag ? "all 300ms" : "";
    this.transform(this.getEl("knob"), {
      x: Math.round(draggy.x),
      scale: scale,
      transition: transition
    });
    x = Math.round(Math.max(Math.min(draggy.x, draggy.offset.width), 0));
    if (!this.draggy || draggy.x === draggy.offset.width / 2) {
      this.setState(false, "side");
    } else {
      side = x > draggy.offset.width / 2 ? "before" : "after";
      this.setState(side, "side");
    }
    _ref1 = this.getEl("items");
    _results = [];
    for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
      el = _ref1[i];
      s = i === 0 ? draggy.offset.width + .5 : -.5;
      this.transform(el, {
        x: x - s,
        transition: transition
      });
      _results.push(this.transform(el.firstChild, {
        x: s - x,
        transition: transition
      }));
    }
    return _results;
  };

  ComparisonView.prototype.onDrop = function(draggy, isReset) {
    if (isReset) {
      return this.onDrag(draggy, true, 1);
    } else {
      this.onDrag(draggy, true, 1);
      return this.setState("touched");
    }
  };

  ComparisonView.prototype.onResize = function(e, data) {
    return this.sizeContent();
  };

  ComparisonView.prototype.sizeContent = function() {
    var els, height, labels, size, start;
    this.setState(false, "sized");
    els = this.findAll(".multi-content-wrapper, .multi-content-text");
    labels = this.findOne(".slider-labels");
    this.getEl("slider").style.height = "";
    this.getEl("slider").style.width = "";
    height = _.reduce(labels.children, function(m, el) {
      return Math.max(m, el.offsetHeight);
    }, 0);
    labels.style.height = "" + height + "px";
    size = _.reduce(els, function(m, el) {
      return {
        h: Math.max(m.h, el.offsetHeight),
        w: Math.max(m.w, el.offsetWidth)
      };
    }, {
      h: 80,
      w: 0
    });
    this.getEl("slider").style.height = "" + size.h + "px";
    this.getEl("slider").style.width = "" + size.w + "px";
    this.setState(true, "sized");
    if (this.draggy != null) {
      this.draggy.options.maxX = size.w;
      return this.draggy.getOffset();
    } else {
      start = (function() {
        switch (this.getStartPosition()) {
          case "before":
          case "after":
            return 0.5;
          default:
            return 0;
        }
      }).call(this);
      return this.onDrag({
        x: size.w * start,
        offset: {
          width: size.w
        }
      }, false, 1);
    }
  };

  return ComparisonView;

})(SlideView);

module.exports = ComparisonView;
});

;require.register("engine/connect/model.yaml", function(exports, require, module) {
module.exports = {"title":"connect","display":"Connect","category":"Relationships","features":{"stars":true},"model":{"title":{"types":["text","image","video","audio"],"default":""},"pairs":{"min":2,"max":4,"type":[{"left":{"types":["text","image"]},"right":{"types":["text","image"]}}]},"answer":{"text":{"type":"html","default":"","display":"Answer Text"},"correct":{"type":"html","default":"That's correct!","display":"Correct Reinforcement"},"incorrect":{"type":"html","default":"Not quite...","display":"Incorrect Reinforcement"},"takeaway":{"type":"html","default":"","display":"Core Message"}},"prompt":{"type":"html","default":"Draw a line between each pair"},"game":{"timer":{"limit":{"type":"number","default":-1,"display":"Time Limit (ms)"}}}},"examples":[{"title":"Match the products with their attributes","titleType":"text","pairs":[{"left":"Product X","right":"The first product"},{"left":"Product Y","right":"The second one"},{"left":"Product Z","right":"The last product"}]}]}
});

;require.register("engine/connect/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (config, continueBtnText, game, hasNarration, hasPrompt, i18n, leftItems, prompt, rightItems, undefined) {
jade_mixins["multi-content"] = jade_interp = function(prop, obj){
var block = (this && this.block), attributes = (this && this.attributes) || {};
obj = obj || locals;
switch (obj[prop + "Type"]){
case "image":
buf.push("<div" + (jade.attr("data-content", obj.image, true, false)) + " class=\"multi-content-wrapper multi-content-wrapper-image block-md block-lt\"><div class=\"block-sm multi-content-media\"><img" + (jade.attr("src", obj[prop], true, false)) + " class=\"multi-content multi-content-image\"/></div></div>");
  break;
case "video":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-video block-md block-lt\"><div class=\"block-sm multi-content-media\"><video" + (jade.attr("src", obj[prop], true, false)) + " webkit-playsinline=\"webkit-playsinline\" playsinline=\"playsinline\" preload=\"auto\" controls=\"controls\"" + (jade.attr("dir", config.direction, true, false)) + " class=\"video-js multi-content multi-content-video block-dk\"></video></div></div>");
  break;
case "audio":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-audio block-md block-lt\"><div class=\"block-sm multi-content-media\"><audio" + (jade.attr("src", obj[prop], true, false)) + " webkit-playsinline=\"webkit-playsinline\" playsinline=\"playsinline\" preload=\"auto\" controls=\"controls\"" + (jade.attr("dir", config.direction, true, false)) + " class=\"multi-content multi-content-audio block-dk\"></audio></div></div>");
  break;
case "iframe":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-iframe block-md block-lt\"><div class=\"block-sm multi-content-iframe\">");
var iframe = obj[prop].match(/<iframe[^<]*<\/iframe>/)
if ( iframe)
{
buf.push(null == (jade_interp = iframe[0].replace(/ (width|height)=["'\d\w]+/g, "")) ? "" : jade_interp);
}
buf.push("</div></div>");
  break;
default:
buf.push("<span class=\"multi-content multi-content-text\">" + (null == (jade_interp = obj[prop]) ? "" : jade_interp) + "</span>");
  break;
}
};
if ( game && game.timer && game.timer.limit > 0)
{
buf.push("<div class=\"full-screen\"><div class=\"game-stepper text-lg text-bold\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div></div>");
}
buf.push("<div class=\"full-screen connect-canvas-container\"><canvas class=\"connect-canvas\"></canvas></div><div class=\"content-fill\"><div class=\"content-fit connect-boxes content-md-fill content-sm-ver block-v-lg\"><div class=\"content-md-ver text-center\"><h1 class=\"fade-in\">");
jade_mixins["multi-content"]("title");
buf.push("</h1>");
// iterate leftItems
;(function(){
  var $$obj = leftItems;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var left = $$obj[i];

buf.push("<div class=\"row\"><div" + (jade.cls(['block-v-sm','col-sm-6','col-lg-5','col-lg-offset-1','slide-right',"delay-" + (i + 4) + ""], [null,null,null,null,null,true])) + "><div" + (jade.attr("data-index", left.index, true, false)) + " data-type=\"left\"" + (jade.attr("data-question-id", left.id, true, false)) + " class=\"connect-box block-md block-dk\">");
jade_mixins["multi-content"]("content", left);
buf.push("</div></div><div" + (jade.cls(['block-v-sm','col-sm-6','col-lg-5','slide-left',"delay-" + (i + 4) + ""], [null,null,null,null,true])) + "><div" + (jade.attr("data-index", rightItems[left.index].index, true, false)) + " data-type=\"right\"" + (jade.attr("data-answer-ids", rightItems[left.index].ids, true, false)) + " class=\"connect-box block-md block-dk\">");
jade_mixins["multi-content"]("content", rightItems[left.index]);
buf.push("</div></div></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var left = $$obj[i];

buf.push("<div class=\"row\"><div" + (jade.cls(['block-v-sm','col-sm-6','col-lg-5','col-lg-offset-1','slide-right',"delay-" + (i + 4) + ""], [null,null,null,null,null,true])) + "><div" + (jade.attr("data-index", left.index, true, false)) + " data-type=\"left\"" + (jade.attr("data-question-id", left.id, true, false)) + " class=\"connect-box block-md block-dk\">");
jade_mixins["multi-content"]("content", left);
buf.push("</div></div><div" + (jade.cls(['block-v-sm','col-sm-6','col-lg-5','slide-left',"delay-" + (i + 4) + ""], [null,null,null,null,true])) + "><div" + (jade.attr("data-index", rightItems[left.index].index, true, false)) + " data-type=\"right\"" + (jade.attr("data-answer-ids", rightItems[left.index].ids, true, false)) + " class=\"connect-box block-md block-dk\">");
jade_mixins["multi-content"]("content", rightItems[left.index]);
buf.push("</div></div></div>");
    }

  }
}).call(this);

buf.push("</div></div></div><div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"game" in locals_for_with?locals_for_with.game:typeof game!=="undefined"?game:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"leftItems" in locals_for_with?locals_for_with.leftItems:typeof leftItems!=="undefined"?leftItems:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"rightItems" in locals_for_with?locals_for_with.rightItems:typeof rightItems!=="undefined"?rightItems:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/connect/view.coffee", function(exports, require, module) {
var ConnectView, DraggyView, GameView, Preloader, SmoothLine, dpi, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

GameView = require("views/base/game");

DraggyView = require("views/components/draggy");

SmoothLine = require("lib/draw/smooth-line");

Preloader = require("lib/preload");

dpi = require("lib/device").dpi;

ConnectView = (function(_super) {
  __extends(ConnectView, _super);

  function ConnectView() {
    _ref = ConnectView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  ConnectView.prototype.template = require("./template");

  ConnectView.prototype.fitTextOnResize = false;

  ConnectView.prototype.fitTextOnRender = false;

  ConnectView.prototype.events = function() {
    return {
      "iostap .btn-done": "endGame"
    };
  };

  ConnectView.prototype.serialize = function() {
    var answerIdsByContentDict, data;
    data = ConnectView.__super__.serialize.apply(this, arguments);
    this.options.data.pairs = data.pairs = _.chain(this.options.metadata.questions).map(function(_arg) {
      var answers, question;
      question = _arg.question, answers = _arg.answers;
      return {
        left: question,
        right: _.find(answers, 'correct')
      };
    }).filter(function(_arg) {
      var left, right;
      left = _arg.left, right = _arg.right;
      return left && right;
    }).value();
    answerIdsByContentDict = _.chain(data.pairs).pluck('right').groupBy(function(i) {
      return i.content;
    }).mapObject(function(answers) {
      return _.pluck(answers, 'id');
    }).value();
    data.leftItems = _.chain(data.pairs).pluck('left').map(function(_arg, index) {
      var content, id, type;
      content = _arg.content, type = _arg.type, id = _arg.id;
      return {
        content: content,
        contentType: type,
        index: index,
        id: id
      };
    }).shuffle().value();
    data.rightItems = _.chain(data.pairs).pluck('right').map(function(_arg, index) {
      var content, type;
      content = _arg.content, type = _arg.type;
      return {
        content: content,
        contentType: type,
        index: index,
        ids: answerIdsByContentDict[content]
      };
    }).shuffle().value();
    return data;
  };

  ConnectView.prototype.show = function() {
    var el, _base, _base1, _i, _len, _ref1;
    ConnectView.__super__.show.apply(this, arguments);
    this.setEl(this.findAll(".connect-box"), "boxes");
    this.draggy = new DraggyView({
      el: this.findOne("canvas"),
      isParent: true
    });
    this.context = (typeof (_base = this.draggy.el).getContext === "function" ? _base.getContext("2d") : void 0) || {};
    this.listenTo(this.draggy, "drag", this.onDrag);
    this.listenTo(this.draggy, "drop", this.onDrop);
    this.listenTo(this, "resize", this.onResize);
    this.onResize();
    this.pairs = [];
    if (typeof (_base1 = this.context).clearRect === "function") {
      _base1.clearRect(0, 0, this.draggy.el.width, this.draggy.el.height);
    }
    _ref1 = this.getEl("boxes");
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      el = _ref1[_i];
      el.classList.remove("active", "complete");
    }
    return this.enterGame();
  };

  ConnectView.prototype.onRefresh = function() {
    var el, _i, _len, _ref1, _results;
    ConnectView.__super__.onRefresh.apply(this, arguments);
    _ref1 = this.getEl("boxes") || [];
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      el = _ref1[_i];
      el.style.height = "";
      _results.push(el.offsetHeight);
    }
    return _results;
  };

  ConnectView.prototype.onResize = function(done) {
    var el, images, _i, _len, _ref1, _ref2, _ref3,
      _this = this;
    if ((_ref1 = this.findOne(".content-fit")) != null) {
      _ref1.style.fontSize = "";
    }
    _ref2 = this.getEl("boxes");
    for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
      el = _ref2[_i];
      el.style.height = "";
    }
    if (!((_ref3 = this.currentState) != null ? _ref3.refresh : void 0)) {
      this.el.classList.remove("active");
    }
    images = this.findAll("img");
    return Preloader.load(_.pluck(images, "src"), function(errors) {
      var fontSize, height, _j, _len1, _ref4, _ref5;
      if (errors == null) {
        errors = [];
      }
      fontSize = parseInt(window.getComputedStyle(_this.el).fontSize);
      height = _.reduce(_this.getEl("boxes"), function(m, el) {
        if (el.offsetHeight > m) {
          return el.offsetHeight;
        } else {
          return m;
        }
      }, 0);
      _ref4 = _this.getEl("boxes");
      for (_j = 0, _len1 = _ref4.length; _j < _len1; _j++) {
        el = _ref4[_j];
        el.style.height = height / fontSize + "em";
        el.classList.remove("active");
      }
      if (el = (_ref5 = _this.draggy) != null ? _ref5.el : void 0) {
        el.width = _this.el.firstChild.offsetWidth * dpi;
        el.height = _this.el.firstChild.offsetHeight * dpi;
      }
      return _this.fitText(function() {
        return window.setTimeout((function() {
          return _this.el.classList.add("active");
        }), 300);
      });
    });
  };

  ConnectView.prototype.onDrag = function(draggy, isInitial) {
    var bounds, el, i, isWithin, left, top, _i, _j, _len, _len1, _ref1, _ref2, _ref3, _ref4, _ref5;
    window.clearTimeout(this.timeout);
    _ref1 = this.getBounds(this.el.firstChild), left = _ref1.left, top = _ref1.top;
    if (isInitial) {
      if ((_ref2 = this.line) != null) {
        if ((_ref3 = _ref2.animation) != null) {
          _ref3.cancel();
        }
      }
      this.context.lineCap = "round";
      this.context.globalAlpha = 1;
      this.line = new SmoothLine([], window.getComputedStyle(this.el).color, 4 * dpi);
      this.activeBox = null;
      _ref4 = this.getEl("boxes");
      for (i = _i = 0, _len = _ref4.length; _i < _len; i = ++_i) {
        el = _ref4[i];
        bounds = this.getBounds(el, {
          x: -left,
          y: -top
        });
        isWithin = draggy.isWithin(bounds, 0);
        el.classList.toggle("active", isWithin);
        if (isWithin) {
          el.classList.remove("complete");
          this.activeBox = el;
          this.removeActivePairs(el);
        }
      }
    } else if (this.activeBox) {
      _ref5 = this.getEl("boxes");
      for (_j = 0, _len1 = _ref5.length; _j < _len1; _j++) {
        el = _ref5[_j];
        if (el !== this.activeBox && el.dataset.type !== this.activeBox.dataset.type) {
          bounds = this.getBounds(el, {
            x: -left,
            y: -top
          });
          isWithin = draggy.isWithin(bounds, 0);
          el.classList.toggle("active", isWithin);
        }
      }
    }
    return this.addPoint(draggy);
  };

  ConnectView.prototype.onDrop = function() {
    var active, b, el, _i, _j, _len, _len1,
      _this = this;
    active = (function() {
      var _i, _len, _ref1, _results;
      _ref1 = this.getEl("boxes");
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        b = _ref1[_i];
        if (b.classList.contains("active")) {
          _results.push(b);
        }
      }
      return _results;
    }).call(this);
    if (active.length === 2) {
      for (_i = 0, _len = active.length; _i < _len; _i++) {
        el = active[_i];
        el.classList.add("complete");
        this.removeActivePairs(el);
      }
      this.pairs.push({
        active: active,
        line: new SmoothLine(this.line.getPoints(), "rgba(0,0,0,.25)", 8 * dpi)
      });
    }
    for (_j = 0, _len1 = active.length; _j < _len1; _j++) {
      el = active[_j];
      el.classList.remove("active");
    }
    this.line.erase(this.context, function() {
      var line, _k, _len2, _ref1, _results;
      _this.context.clearRect(0, 0, _this.draggy.el.width, _this.draggy.el.height);
      _this.context.globalAlpha = 1;
      _ref1 = _this.pairs;
      _results = [];
      for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
        line = _ref1[_k].line;
        _results.push(line.draw(_this.context));
      }
      return _results;
    });
    if (this.pairs.length === this.options.data.pairs.length) {
      return this.setState("touched");
    } else {
      return this.setState("prompt");
    }
  };

  ConnectView.prototype.removeActivePairs = function(el) {
    var active, pair, _i, _len, _ref1, _results;
    _ref1 = this.pairs;
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      pair = _ref1[_i];
      if (_.include(pair.active, el)) {
        this.pairs = _.without(this.pairs, pair);
        _results.push((function() {
          var _j, _len1, _ref2, _results1;
          _ref2 = pair.active;
          _results1 = [];
          for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
            active = _ref2[_j];
            if (active !== el) {
              _results1.push(active.classList.remove("complete"));
            }
          }
          return _results1;
        })());
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  ConnectView.prototype.addPoint = function(_arg) {
    var x, y;
    x = _arg.x, y = _arg.y;
    this.line.add({
      x: x * dpi,
      y: y * dpi
    });
    return this.drawLines();
  };

  ConnectView.prototype.drawLines = function() {
    var line, _i, _len, _ref1;
    this.draggy.el.offsetHeight;
    this.context.clearRect(0, 0, this.draggy.el.width, this.draggy.el.height);
    _ref1 = this.pairs;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      line = _ref1[_i].line;
      line.draw(this.context);
    }
    return this.line.draw(this.context);
  };

  ConnectView.prototype.showAnswer = function() {
    var isIncorrect, left, right, _i, _len, _ref1, _ref2, _results;
    _ref1 = this.pairs;
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      _ref2 = _ref1[_i].active, left = _ref2[0], right = _ref2[1];
      isIncorrect = !this.isMatch(left, right);
      left.classList.toggle("incorrect", isIncorrect);
      _results.push(right.classList.toggle("incorrect", isIncorrect));
    }
    return _results;
  };

  ConnectView.prototype.isCorrect = function() {
    var correct,
      _this = this;
    correct = _.filter(this.pairs, function(_arg) {
      var left, right, _ref1;
      _ref1 = _arg.active, left = _ref1[0], right = _ref1[1];
      return _this.isMatch(left, right);
    });
    return correct.length === this.options.data.pairs.length;
  };

  ConnectView.prototype.getQuestionAnswerFromInput = function(questions) {
    return function(els) {
      var answer, answerIds, answers, question, questionId, questionsById, _ref1, _ref2;
      questionsById = _.indexBy(questions, function(_arg) {
        var question;
        question = _arg.question;
        return question.id;
      });
      questionId = (_ref1 = _.find(els, (function(e) {
        return e.dataset.questionId;
      })).dataset) != null ? _ref1.questionId : void 0;
      answerIds = JSON.parse(_.find(els, (function(e) {
        return e.dataset.answerIds;
      })).dataset.answerIds);
      _ref2 = questionsById[questionId], question = _ref2.question, answers = _ref2.answers;
      answer = _.find(answers, function(_arg) {
        var id;
        id = _arg.id;
        return __indexOf.call(answerIds, id) >= 0;
      });
      return {
        question: question,
        answer: answer
      };
    };
  };

  ConnectView.prototype.isMatch = function(left, right) {
    var answer, _ref1;
    answer = this.getQuestionAnswerFromInput((_ref1 = this.options.metadata) != null ? _ref1.questions : void 0)([left, right]).answer;
    return answer != null ? answer.correct : void 0;
  };

  ConnectView.prototype.answerDetails = function() {
    var getQuestionAnswerFromInput, questions, _ref1,
      _this = this;
    questions = ((_ref1 = this.options.metadata) != null ? _ref1.questions : void 0) || [];
    if (!(questions.length > 0)) {
      return [];
    }
    getQuestionAnswerFromInput = this.getQuestionAnswerFromInput(questions);
    return _.chain(this.pairs).map(function(_arg) {
      var active;
      active = _arg.active;
      return getQuestionAnswerFromInput(active);
    }).filter(function(_arg) {
      var answer, question;
      question = _arg.question, answer = _arg.answer;
      return question && answer;
    }).value();
  };

  ConnectView.prototype.endGame = function() {
    ConnectView.__super__.endGame.apply(this, arguments);
    return this.submit();
  };

  return ConnectView;

})(GameView);

module.exports = ConnectView;
});

;require.register("engine/construct-sentence/model.yaml", function(exports, require, module) {
module.exports = {"title":"construct-sentence","display":"Sentence Construction","category":"Concepts","features":{"stars":true},"model":{"title":{"type":"html","default":"Select the missing words in this sentence"},"decoys":{"min":0,"max":3,"type":[{"type":"html","default":""}]},"answer":{"text":{"type":"html","default":"","display":"Answer Text"},"correct":{"type":"html","default":"That's correct!","display":"Correct Reinforcement"},"incorrect":{"type":"html","default":"Not quite...","display":"Incorrect Reinforcement"},"takeaway":{"type":"html","default":"","display":"Core Message"}},"prompt":{"type":"html","default":"Drag the words into order"},"game":{"timer":{"limit":{"type":"number","default":-1,"display":"Time Limit (ms)"}}}},"examples":[{"title":"Fill in the important information about Product X","decoys":["Y"],"answer":{"text":"Reinforce concepts by constructing the sentence in order."}}]}
});

;require.register("engine/construct-sentence/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (continueBtnText, game, hasNarration, hasPrompt, i18n, prompt, undefined, words) {
if ( game && game.timer && game.timer.limit > 0)
{
buf.push("<div class=\"full-screen\"><div class=\"game-stepper text-lg text-bold\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div></div>");
}
buf.push("<div class=\"content-fill\"><div class=\"content-fit text-center block-v-md content-ver\"><div class=\"row fade-in\"><div class=\"col-lg-10 col-lg-offset-1 col-sm-12\"><div class=\"block-v-md block-box-sizing\"><div class=\"block-dk content-fill block-sm content-fill\"><div class=\"droppy-container content-fill\"><div class=\"droppy-placeholder block-sm\"><div class=\"block-dk content-fill\"></div></div></div></div></div><div class=\"block-v-md block-box-sizing\"><div class=\"draggy-container block-dk content-fill block-sm\">");
// iterate words 
;(function(){
  var $$obj = words ;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var component = $$obj[i];

buf.push("<div" + (jade.attr("data-word", component.word, true, false)) + (jade.attr("data-index", component.index, true, false)) + " class=\"draggy block-sm block-inline\"><div" + (jade.cls(['btn','btn-sm','btn-solid','slide-up',"delay-" + (i) + ""], [null,null,null,null,true])) + ">" + (null == (jade_interp = component.word) ? "" : jade_interp) + "</div></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var component = $$obj[i];

buf.push("<div" + (jade.attr("data-word", component.word, true, false)) + (jade.attr("data-index", component.index, true, false)) + " class=\"draggy block-sm block-inline\"><div" + (jade.cls(['btn','btn-sm','btn-solid','slide-up',"delay-" + (i) + ""], [null,null,null,null,true])) + ">" + (null == (jade_interp = component.word) ? "" : jade_interp) + "</div></div>");
    }

  }
}).call(this);

buf.push("</div></div></div></div></div></div><div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"game" in locals_for_with?locals_for_with.game:typeof game!=="undefined"?game:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined,"words" in locals_for_with?locals_for_with.words:typeof words!=="undefined"?words:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/construct-sentence/view.coffee", function(exports, require, module) {
var ConstructSentenceView, Draggy, GameView, convert, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

GameView = require("views/base/game");

Draggy = require("views/components/draggy");

convert = require("lib/convert");

ConstructSentenceView = (function(_super) {
  __extends(ConstructSentenceView, _super);

  function ConstructSentenceView() {
    _ref = ConstructSentenceView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  ConstructSentenceView.prototype.template = require("./template");

  ConstructSentenceView.prototype.events = {
    "iostap .btn-done": "endGame"
  };

  ConstructSentenceView.prototype.serialize = function() {
    var data, decoys, index, title, word, _ref1;
    data = ConstructSentenceView.__super__.serialize.apply(this, arguments);
    title = data.title, decoys = data.decoys;
    title = convert.toText(title);
    this.words = title.trim().split(" ");
    if (decoys == null) {
      decoys = [];
    }
    data.words = (function() {
      var _i, _len, _ref1, _results;
      _ref1 = this.words;
      _results = [];
      for (index = _i = 0, _len = _ref1.length; _i < _len; index = ++_i) {
        word = _ref1[index];
        _results.push({
          word: word,
          index: index
        });
      }
      return _results;
    }).call(this);
    data.words = (_ref1 = data.words).concat.apply(_ref1, (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = decoys.length; _i < _len; _i++) {
        word = decoys[_i];
        _results.push({
          word: word,
          index: -1
        });
      }
      return _results;
    })());
    data.words = _.shuffle(data.words);
    return data;
  };

  ConstructSentenceView.prototype.beforeShow = function() {
    return this.sizeElements();
  };

  ConstructSentenceView.prototype.show = function() {
    var draggy, el, i;
    ConstructSentenceView.__super__.show.apply(this, arguments);
    this.draggies = (function() {
      var _i, _len, _ref1, _results;
      _ref1 = this.findAll(".draggy");
      _results = [];
      for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
        el = _ref1[i];
        draggy = new Draggy({
          el: el
        });
        this.listenTo(draggy, "drag", this.onDrag);
        this.listenTo(draggy, "drop", this.onDrop);
        _results.push(draggy);
      }
      return _results;
    }).call(this);
    this.resetDraggies();
    this.listenTo(this, "resize", this.onResize);
    return this.enterGame();
  };

  ConstructSentenceView.prototype.onRefresh = function() {
    this.beforeShow();
    return ConstructSentenceView.__super__.onRefresh.apply(this, arguments);
  };

  ConstructSentenceView.prototype.onDrag = function(draggy, isInitialDrag) {
    var child, isWithin;
    if (isInitialDrag) {
      this.droppy.bounds = this.droppy.el.getBoundingClientRect();
      draggy.el.className = draggy.el.className.replace(/delay-\d/, "");
      child = draggy.el.firstChild;
      this.droppy.placeholder.style.width = child.offsetWidth + "px";
      this.droppy.placeholder.style.height = child.offsetHeight + "px";
    }
    if (isWithin = draggy.isWithin(this.droppy.bounds, 60)) {
      draggy.isPositioned = true;
      this.droppy.el.classList.add("active");
      this.droppy.placeholder.classList.add("active");
    } else {
      draggy.isPositioned = false;
      this.droppy.el.classList.remove("active");
      this.droppy.placeholder.classList.remove("active");
    }
    this.rearrangeDraggies(this.draggiesInOrder(), draggy);
    return this.transform(draggy.el, {
      x: draggy.x,
      y: draggy.y,
      transition: isInitialDrag ? "all 300ms" : "none"
    });
  };

  ConstructSentenceView.prototype.onDrop = function(draggy, isReset) {
    if (!isReset) {
      this.droppy.placeholder.classList.remove("active");
      this.setState("touched");
      if (draggy.isPositioned) {
        this.rearrangeDraggies(this.draggiesInOrder());
      } else {
        draggy.reset({
          x: 0,
          y: 0
        });
      }
    }
    return this.transform(draggy.el, {
      x: draggy.x,
      y: draggy.y,
      transition: "all 300ms"
    });
  };

  ConstructSentenceView.prototype.rearrangeDraggies = function(order, activeDraggy) {
    var draggy, i, offsetX, offsetY, width, x, y, _i, _len, _ref1, _results;
    width = this.droppy.bounds.width;
    offsetX = 0;
    offsetY = 0;
    _results = [];
    for (i = _i = 0, _len = order.length; _i < _len; i = ++_i) {
      draggy = order[i];
      x = -draggy.offset.left + offsetX + this.droppy.bounds.left;
      y = -draggy.offset.top + offsetY + this.droppy.bounds.top;
      if (this.options.config().direction === "rtl") {
        x = -draggy.offset.right - offsetX + this.droppy.bounds.right;
      }
      if ((draggy.x !== x || draggy.y !== y) && draggy !== activeDraggy) {
        draggy.reset({
          x: x,
          y: y
        });
      }
      if (draggy === activeDraggy) {
        x = offsetX;
        y = offsetY;
        if (this.options.config().direction === "rtl") {
          x = width - x - this.droppy.placeholder.offsetWidth;
        }
        this.transform(this.droppy.placeholder, {
          x: x,
          y: y
        });
      }
      offsetX += draggy.offset.width;
      if (offsetX >= width - (((_ref1 = order[i + 1]) != null ? _ref1.offset.width : void 0) || 0)) {
        offsetX = 0;
        _results.push(offsetY += draggy.offset.height);
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  ConstructSentenceView.prototype.draggiesInOrder = function() {
    var height, top, width, _ref1,
      _this = this;
    _ref1 = this.droppy.bounds, width = _ref1.width, height = _ref1.height, top = _ref1.top;
    return _.chain(this.draggies).where({
      isPositioned: true
    }).groupBy(function(d) {
      return Math.floor(Math.max(d.y + d.offset.top, top) / d.offset.height);
    }).map(function(group, key) {
      return group.sort(function(a, b) {
        var d;
        d = _this.options.config().direction === "rtl" ? -1 : 1;
        return (a.offset.left + (a.x + a.offset.width / 2)) * d - (b.offset.left + (b.x + b.offset.width / 2)) * d;
      });
    }).flatten().value();
  };

  ConstructSentenceView.prototype.showAnswer = function() {
    var clone, d, decoys, kindOrder, _i, _len, _ref1, _results;
    decoys = _.filter(this.draggies, function(d) {
      return +(d != null ? d.el.dataset.index : void 0) < 0;
    });
    clone = _.clone(this.words);
    kindOrder = (_ref1 = _.chain(this.draggiesInOrder()).union(this.draggies)).without.apply(_ref1, decoys).uniq().map(function(d, i) {
      var index;
      index = clone.indexOf(d.el.dataset.word);
      clone[index] = void 0;
      return {
        draggy: d,
        index: index
      };
    }).sortBy("index").pluck("draggy").value();
    this.rearrangeDraggies(kindOrder);
    _results = [];
    for (_i = 0, _len = decoys.length; _i < _len; _i++) {
      d = decoys[_i];
      _results.push(d.reset({
        x: 0,
        y: 0
      }));
    }
    return _results;
  };

  ConstructSentenceView.prototype.onResize = function() {
    var _this = this;
    return window.setTimeout(function() {
      _this.sizeElements();
      return _this.resetDraggies();
    }, 300);
  };

  ConstructSentenceView.prototype.sizeElements = function() {
    var draggyEl, droppyEl, fontSize;
    draggyEl = this.findOne(".draggy-container");
    droppyEl = this.findOne(".droppy-container");
    fontSize = parseInt(window.getComputedStyle(droppyEl).fontSize);
    droppyEl.style.height = draggyEl.offsetHeight / fontSize + "em";
    return this.droppy = {
      el: droppyEl,
      placeholder: this.findOne(".droppy-placeholder")
    };
  };

  ConstructSentenceView.prototype.resetDraggies = function() {
    var d, _i, _len, _ref1;
    if (this.draggies && this.droppy) {
      this.droppy.bounds = this.droppy.el.getBoundingClientRect();
      _ref1 = this.draggies;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        d = _ref1[_i];
        d.getOffset();
      }
      return this.rearrangeDraggies(this.draggiesInOrder());
    }
  };

  ConstructSentenceView.prototype.isCorrect = function() {
    var clone, correct, d, i, inOrder, isCorrect, prev, _i, _len;
    correct = _.filter(this.draggies, function(d) {
      return +(d != null ? d.el.dataset.index : void 0) >= 0;
    });
    inOrder = this.draggiesInOrder();
    isCorrect = inOrder.length === correct.length;
    prev = -1;
    clone = _.clone(this.words);
    for (i = _i = 0, _len = inOrder.length; _i < _len; i = ++_i) {
      d = inOrder[i];
      isCorrect = isCorrect && d.el.dataset.word === clone.shift();
    }
    return isCorrect;
  };

  ConstructSentenceView.prototype.answerDetails = function() {
    var answer, details, isCorrect, questions, wordsInOrder;
    questions = this.options.metadata.questions || [];
    if (!(questions.length > 0)) {
      return [];
    }
    wordsInOrder = _.map(this.draggiesInOrder(), function(draggy) {
      return draggy.$el.text();
    });
    isCorrect = this.isCorrect();
    answer = _.find(questions[0].answers, function(a) {
      return a.correct === isCorrect;
    });
    answer.content = wordsInOrder.join(" ");
    details = {
      question: questions[0].question,
      answer: answer
    };
    return [details];
  };

  ConstructSentenceView.prototype.endGame = function() {
    ConstructSentenceView.__super__.endGame.apply(this, arguments);
    return this.submit();
  };

  return ConstructSentenceView;

})(GameView);

module.exports = ConstructSentenceView;
});

;require.register("engine/construct/components/letters.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (undefined, word) {
buf.push("<div class=\"block-md block-dk\">");
// iterate word
;(function(){
  var $$obj = word;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var letter = $$obj[$index];

buf.push("<div" + (jade.attr("data-letter", letter.toLowerCase(), true, false)) + " class=\"letter btn btn-solid\">" + (null == (jade_interp = letter) ? "" : jade_interp) + "</div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var letter = $$obj[$index];

buf.push("<div" + (jade.attr("data-letter", letter.toLowerCase(), true, false)) + " class=\"letter btn btn-solid\">" + (null == (jade_interp = letter) ? "" : jade_interp) + "</div>");
    }

  }
}).call(this);

buf.push("</div>");}.call(this,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined,"word" in locals_for_with?locals_for_with.word:typeof word!=="undefined"?word:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/construct/model.yaml", function(exports, require, module) {
module.exports = {"title":"construct","display":"Word Construction","category":"Concepts","features":{"stars":true},"model":{"title":{"type":"html","default":""},"words":{"min":1,"max":8,"type":[{"type":"html"}]},"answer":{"text":{"type":"html","default":"","display":"Answer Text"},"correct":{"type":"html","default":"That's correct!","display":"Correct Reinforcement"},"incorrect":{"type":"html","default":"Not quite...","display":"Incorrect Reinforcement"},"takeaway":{"type":"html","default":"","display":"Core Message"}},"prompt":{"type":"html","default":"Fill in the missing words"},"game":{"timer":{"limit":{"type":"number","default":-1,"display":"Time Limit (ms)"}}}},"examples":[{"title":"Fill in the missing words in this sentence.","subtitle":"","prompt":"Fill in the missing words","words":["missing","this"]}]}
});

;require.register("engine/construct/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (components, continueBtnText, game, hasNarration, hasPrompt, i18n, prompt, titleClass, undefined) {
if ( game && game.timer && game.timer.limit > 0)
{
buf.push("<div class=\"full-screen\"><div class=\"game-stepper text-lg text-bold\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div></div>");
}
buf.push("<div class=\"content-fill\"><div class=\"content-md-fill content-sm-ver text-center content-fit\"><div class=\"row content-md-ver\"><div class=\"col-sm-12 col-md-10 col-md-offset-1 col-lg-12 col-lg-offset-0\"><h1" + (jade.cls(['statement','fade-in',titleClass], [null,null,true])) + ">");
// iterate components
;(function(){
  var $$obj = components;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var component = $$obj[i];

if ( component.hidden)
{
buf.push("<span" + (jade.attr("data-word", component.word.replace((/[^A-Z0-9]/gi), ""), true, false)) + " data-guess=\"\" class=\"word-hidden\">");
// iterate component.word
;(function(){
  var $$obj = component.word;
  if ('number' == typeof $$obj.length) {

    for (var j = 0, $$l = $$obj.length; j < $$l; j++) {
      var letter = $$obj[j];

if ( !letter.match(/[A-Z0-9]/gi))
{
buf.push(jade.escape(null == (jade_interp = letter) ? "" : jade_interp));
}
else
{
buf.push("<span" + (jade.attr("data-letter", letter.toLowerCase(), true, false)) + " class=\"blank hidden-letter\"><span class=\"letter-inner\">" + (jade.escape(null == (jade_interp = letter) ? "" : jade_interp)) + "</span></span>");
}
    }

  } else {
    var $$l = 0;
    for (var j in $$obj) {
      $$l++;      var letter = $$obj[j];

if ( !letter.match(/[A-Z0-9]/gi))
{
buf.push(jade.escape(null == (jade_interp = letter) ? "" : jade_interp));
}
else
{
buf.push("<span" + (jade.attr("data-letter", letter.toLowerCase(), true, false)) + " class=\"blank hidden-letter\"><span class=\"letter-inner\">" + (jade.escape(null == (jade_interp = letter) ? "" : jade_interp)) + "</span></span>");
}
    }

  }
}).call(this);

buf.push("</span>");
}
else
{
buf.push("<span" + (jade.cls(['word',component.klass], [null,true])) + ">" + (null == (jade_interp = component.word) ? "" : jade_interp) + "</span>");
}
buf.push(jade.escape(null == (jade_interp = " ") ? "" : jade_interp));
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var component = $$obj[i];

if ( component.hidden)
{
buf.push("<span" + (jade.attr("data-word", component.word.replace((/[^A-Z0-9]/gi), ""), true, false)) + " data-guess=\"\" class=\"word-hidden\">");
// iterate component.word
;(function(){
  var $$obj = component.word;
  if ('number' == typeof $$obj.length) {

    for (var j = 0, $$l = $$obj.length; j < $$l; j++) {
      var letter = $$obj[j];

if ( !letter.match(/[A-Z0-9]/gi))
{
buf.push(jade.escape(null == (jade_interp = letter) ? "" : jade_interp));
}
else
{
buf.push("<span" + (jade.attr("data-letter", letter.toLowerCase(), true, false)) + " class=\"blank hidden-letter\"><span class=\"letter-inner\">" + (jade.escape(null == (jade_interp = letter) ? "" : jade_interp)) + "</span></span>");
}
    }

  } else {
    var $$l = 0;
    for (var j in $$obj) {
      $$l++;      var letter = $$obj[j];

if ( !letter.match(/[A-Z0-9]/gi))
{
buf.push(jade.escape(null == (jade_interp = letter) ? "" : jade_interp));
}
else
{
buf.push("<span" + (jade.attr("data-letter", letter.toLowerCase(), true, false)) + " class=\"blank hidden-letter\"><span class=\"letter-inner\">" + (jade.escape(null == (jade_interp = letter) ? "" : jade_interp)) + "</span></span>");
}
    }

  }
}).call(this);

buf.push("</span>");
}
else
{
buf.push("<span" + (jade.cls(['word',component.klass], [null,true])) + ">" + (null == (jade_interp = component.word) ? "" : jade_interp) + "</span>");
}
buf.push(jade.escape(null == (jade_interp = " ") ? "" : jade_interp));
    }

  }
}).call(this);

buf.push("</h1></div></div></div><div class=\"word-letters block-xl\"></div></div><div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"components" in locals_for_with?locals_for_with.components:typeof components!=="undefined"?components:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"game" in locals_for_with?locals_for_with.game:typeof game!=="undefined"?game:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"titleClass" in locals_for_with?locals_for_with.titleClass:typeof titleClass!=="undefined"?titleClass:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/construct/view.coffee", function(exports, require, module) {
var ConstructView, GameView, convert, theAlphabet, theNumerals, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

GameView = require("views/base/game");

convert = require("lib/convert");

theAlphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".split("");

theNumerals = "0123456789".split("");

ConstructView = (function(_super) {
  __extends(ConstructView, _super);

  function ConstructView() {
    _ref = ConstructView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  ConstructView.prototype.template = require("./template");

  ConstructView.prototype.templates = {
    letters: require("./components/letters")
  };

  ConstructView.prototype.events = function() {
    return {
      "iostap .letter": "selectLetter",
      "iostap .word-hidden": "activateWord",
      "iostap .word-letters": "selectContainer",
      "iostap .btn-done": "endGame",
      "iostap": "deactivateWord"
    };
  };

  ConstructView.prototype.show = function() {
    ConstructView.__super__.show.apply(this, arguments);
    this.setEl(this.findOne(".word-letters"), "letters");
    this.setEl(this.findOne(".statement"), "statement");
    this.setEl(this.findAll(".word-hidden"), "words");
    this.enterGame();
    return this.listenTo(this, "resize", this.onResize);
  };

  ConstructView.prototype.onResize = function() {
    var el, hyphen, next, offsetTop, width, word, _i, _j, _k, _len, _len1, _len2, _ref1, _ref2, _ref3, _results;
    _ref1 = this.findAll(".hyphen");
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      el = _ref1[_i];
      el.parentNode.removeChild(el);
    }
    hyphen = function() {
      el = document.createElement("span");
      el.classList.add("hyphen");
      el.innerHTML = "-";
      return el;
    };
    width = this.getEl("statement").offsetWidth;
    _ref2 = this.getEl("words");
    for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
      word = _ref2[_j];
      word.classList.remove("break");
    }
    _ref3 = this.getEl("words");
    _results = [];
    for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
      word = _ref3[_k];
      if (!(word.offsetWidth > width)) {
        continue;
      }
      word.classList.add("break");
      offsetTop = word.children[0].offsetTop;
      _results.push((function() {
        var _l, _len3, _ref4, _results1;
        _ref4 = word.children;
        _results1 = [];
        for (_l = 0, _len3 = _ref4.length; _l < _len3; _l++) {
          next = _ref4[_l];
          if (next.offsetTop > offsetTop) {
            next.insertAdjacentElement("beforeBegin", hyphen());
          }
          _results1.push(offsetTop = next.offsetTop);
        }
        return _results1;
      })());
    }
    return _results;
  };

  ConstructView.prototype.serialize = function() {
    var component, data, i, index, length, title, word, words, _i, _len;
    data = ConstructView.__super__.serialize.apply(this, arguments);
    words = (function() {
      var _i, _len, _ref1, _results;
      _ref1 = data.words;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        word = _ref1[_i];
        _results.push(convert.toText(word));
      }
      return _results;
    })();
    title = convert.toText(data.title) || "";
    length = title.length;
    for (i = _i = 0, _len = words.length; _i < _len; i = ++_i) {
      word = words[i];
      title = title.replace(word, "{{" + i + "}}");
    }
    data.titleClass = length > 120 ? "text-lg" : "";
    data.components = (function() {
      var _j, _len1, _ref1, _ref2, _results;
      _ref1 = title.split(/\s/);
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        component = _ref1[_j];
        index = +((_ref2 = component.match(/\{\{(\d+)\}\}/)) != null ? _ref2[1] : void 0);
        _results.push({
          klass: "delay-" + (_.random(3)) + " scale-" + (_.sample(["down", "up"])),
          word: words[index] || component,
          hidden: words[index] != null
        });
      }
      return _results;
    })();
    return data;
  };

  ConstructView.prototype.selectContainer = function(e) {
    return e.stopImmediatePropagation();
  };

  ConstructView.prototype.deactivateWord = function(e) {
    var activeEl, el, _i, _len, _ref1,
      _this = this;
    if (activeEl = this.getEl("active")) {
      _ref1 = [activeEl, activeEl.querySelector(".active")];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        el = _ref1[_i];
        if (el != null) {
          el.classList.remove("active");
        }
      }
      this.elements.active = null;
      this.getEl("letters").classList.remove("active");
      window.clearTimeout(this.timeout);
      return this.timeout = window.setTimeout(function() {
        return _this.transform(_this.getEl("statement"), {
          y: 0
        });
      }, 150);
    }
  };

  ConstructView.prototype.activateWord = function(e, el) {
    var extra, letters, mixed, word,
      _this = this;
    if (e != null) {
      e.stopImmediatePropagation();
    }
    if (el == null) {
      el = e.currentTarget;
    }
    if (el === this.getEl("active")) {
      return;
    }
    this.deactivateWord();
    this.setEl(el, "active");
    el.classList.add("active");
    this.activateNextLetter(el.dataset.guess.length);
    word = el.dataset.word.slice(el.dataset.guess.length);
    if (word.match(/^\d+$/)) {
      extra = theNumerals;
    } else {
      extra = theAlphabet;
    }
    letters = word.split("");
    extra = _.sample(extra, _.random(1, 3));
    mixed = _.shuffle(letters.concat(extra));
    window.clearTimeout(this.timeout);
    return this.timeout = window.setTimeout(function() {
      var offset;
      _this.getEl("letters").innerHTML = _this.templates.letters({
        word: mixed
      });
      offset = _this.getEl("letters").firstChild.offsetHeight / 2;
      _this.transform(_this.getEl("statement"), {
        y: -offset
      });
      return _this.getEl("letters").classList.add("active");
    }, 300);
  };

  ConstructView.prototype.selectLetter = function(e) {
    var blanks, el, index, isCorrect, next;
    e.stopImmediatePropagation();
    el = e.currentTarget;
    index = this.getEl("active").dataset.guess.length;
    blanks = this.getEl("active").querySelectorAll(".blank");
    next = blanks.item(index);
    isCorrect = el.dataset.letter === next.dataset.letter;
    if (isCorrect) {
      this.getEl("active").dataset.guess += next.dataset.letter;
    }
    if (el.dataset.letter.toLowerCase() === next.dataset.letter.toLowerCase()) {
      next.classList.add("visible");
      el.classList.add("disabled");
      this.activateNextLetter(index + 1);
    } else {
      el.classList.add("incorrect");
      window.setTimeout((function() {
        return el.classList.remove("incorrect");
      }), 300);
    }
    if (this.getEl("active").dataset.guess.length === blanks.length) {
      this.getEl("active").classList.add("disabled");
      index = _.indexOf(this.getEl("words"), this.getEl("active")) + 1;
      this.activateNextWord(index);
    }
    return this.setState("touched");
  };

  ConstructView.prototype.activateNextWord = function(index) {
    var el, hasLetters, words;
    words = this.getEl("words");
    el = words.item(index);
    hasLetters = function(el) {
      return el.querySelectorAll(".visible").length < el.dataset.word.length;
    };
    if (el && hasLetters(el)) {
      return this.activateWord(null, el);
    } else {
      this.deactivateWord();
      el = _.filter(words, hasLetters)[0];
      if (el != null) {
        return this.activateWord(null, el);
      }
    }
  };

  ConstructView.prototype.activateNextLetter = function(index) {
    var blanks, el, i, next, _i, _len, _results;
    if (index == null) {
      index = 0;
    }
    blanks = this.getEl("active").querySelectorAll(".blank");
    next = blanks.item(index);
    _results = [];
    for (i = _i = 0, _len = blanks.length; _i < _len; i = ++_i) {
      el = blanks[i];
      _results.push(el.classList.toggle("active", index === i));
    }
    return _results;
  };

  ConstructView.prototype.isCorrect = function() {
    var total, visible;
    total = this.findAll(".blank").length;
    visible = this.findAll(".blank.visible").length;
    return total === visible;
  };

  ConstructView.prototype.answerDetails = function() {
    var answer, details, isCorrect, q, questionDetails, questions, words, _i, _len;
    questions = this.options.metadata.questions || [];
    if (!(questions.length > 0)) {
      return [];
    }
    details = [];
    words = this.$(".word-hidden");
    isCorrect = this.isCorrect();
    for (_i = 0, _len = questions.length; _i < _len; _i++) {
      q = questions[_i];
      answer = _.find(q.answers, function(a) {
        return a.correct === isCorrect;
      });
      answer.content = this.$(words[questions.indexOf(q)]).data("guess");
      questionDetails = {
        question: q.question,
        answer: answer
      };
      details.push(questionDetails);
    }
    return details;
  };

  ConstructView.prototype.endGame = function() {
    ConstructView.__super__.endGame.apply(this, arguments);
    return this.submit();
  };

  return ConstructView;

})(GameView);

module.exports = ConstructView;
});

;require.register("engine/dial-distribution/model.yaml", function(exports, require, module) {
module.exports = {"title":"dial-distribution","display":"Dial - Distribution","category":"Numbers","features":{"stars":true},"model":{"title":{"type":"html","default":"Ask a question"},"dial":{"correct":{"type":"number"},"incorrect":{"min":1,"max":8,"type":[{"type":"number"}]},"prefix":{"type":"html","default":""},"suffix":{"type":"html","default":""}},"distribution":{"enum":["Equal","Linear","Logarithmic"],"default":"Linear","type":"text","help":"Use distribution to determine how the numbers are positioned on the dial. “Equal” spreads the options out evenly regardless of their number value, whereas “Linear” and “Logarithmic” compute the distribution based on those scales. Linear works best for equidistant numbers, where Logarithmic is best for numbers which differ by an order of magnitude.\n"},"overlap":{"type":"boolean","default":true,"display":"Overlap Extremes","help":"Display the minimum and maximum values at the same position on the dial.\n"},"answer":{"text":{"type":"html","default":"","display":"Answer Text"},"correct":{"type":"html","default":"That's correct!","display":"Correct Reinforcement"},"incorrect":{"type":"html","default":"Not quite...","display":"Incorrect Reinforcement"},"takeaway":{"type":"html","default":"","display":"Core Message"}},"prompt":{"type":"html","default":"Drag to set the correct value"},"game":{"timer":{"limit":{"type":"number","default":-1,"display":"Time Limit (ms)"}}}},"examples":[{"title":"How much growth has Product X seen in the last sales cycle?","dial":{"correct":37,"incorrect":[0,19,7,53,100],"prefix":"","suffix":"%"},"answer":{"text":"Product X saw a massive **37% increase in growth** during the last sales cycle\n"}}]}
});

;require.register("engine/dial-distribution/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (continueBtnText, dial, game, hasNarration, hasPrompt, i18n, overlap, prompt, title, undefined, values) {
if ( game && game.timer && game.timer.limit > 0)
{
buf.push("<div class=\"full-screen\"><div class=\"game-stepper text-lg text-bold\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div></div>");
}
buf.push("<div class=\"content-fit block-v-xl content-fill\"><div class=\"row content-lg-fill content-sm-ver content-md-ver\"><div class=\"col-lg-6 col-sm-12 content-lg-ver block-v-lg block-v-lg\"><h1 class=\"text-lg-right text-center fade-in\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1></div><div class=\"col-lg-6 col-sm-12 content-lg-ver text-center block-v-lg\"><div" + (jade.cls(['dial','scale-up',overlap ? "dial-overlap" : "dial-discreet"], [null,null,true])) + "><div class=\"dial-ring\"></div><div class=\"dial-knob dial-knob-input\"><div class=\"dial-knob-value dial-knob-input-value text-lg\">" + (null == (jade_interp = i18n("dial.touch-to-rotate")) ? "" : jade_interp) + "</div></div><div class=\"dial-knob dial-knob-answer\"><div class=\"dial-knob-value dial-knob-answer-value text-lg\">" + (null == (jade_interp = dial.prefix) ? "" : jade_interp) + (null == (jade_interp = dial.correct) ? "" : jade_interp) + (null == (jade_interp = dial.suffix) ? "" : jade_interp) + "</div></div><div class=\"dial-notches\">");
// iterate values
;(function(){
  var $$obj = values;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var label = $$obj[$index];

buf.push("<div class=\"dial-notch\"></div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var label = $$obj[$index];

buf.push("<div class=\"dial-notch\"></div>");
    }

  }
}).call(this);

buf.push("</div><div class=\"dial-labels\">");
// iterate values
;(function(){
  var $$obj = values;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var label = $$obj[$index];

buf.push("<div class=\"dial-label\"><div class=\"dial-label-text\">" + (null == (jade_interp = dial.prefix) ? "" : jade_interp) + (null == (jade_interp = dial.decimals ? label.content.toFixed(dial.decimals) : label.content) ? "" : jade_interp) + (null == (jade_interp = dial.suffix) ? "" : jade_interp) + "</div></div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var label = $$obj[$index];

buf.push("<div class=\"dial-label\"><div class=\"dial-label-text\">" + (null == (jade_interp = dial.prefix) ? "" : jade_interp) + (null == (jade_interp = dial.decimals ? label.content.toFixed(dial.decimals) : label.content) ? "" : jade_interp) + (null == (jade_interp = dial.suffix) ? "" : jade_interp) + "</div></div>");
    }

  }
}).call(this);

buf.push("</div></div></div></div></div><div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"dial" in locals_for_with?locals_for_with.dial:typeof dial!=="undefined"?dial:undefined,"game" in locals_for_with?locals_for_with.game:typeof game!=="undefined"?game:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"overlap" in locals_for_with?locals_for_with.overlap:typeof overlap!=="undefined"?overlap:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined,"values" in locals_for_with?locals_for_with.values:typeof values!=="undefined"?values:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/dial-distribution/view.coffee", function(exports, require, module) {
var DialDistributionView, Draggy, GameView, Prefix, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

GameView = require("views/base/game");

Prefix = require("lib/prefix");

Draggy = require("views/components/draggy");

DialDistributionView = (function(_super) {
  __extends(DialDistributionView, _super);

  function DialDistributionView() {
    _ref = DialDistributionView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  DialDistributionView.prototype.template = require("./template");

  DialDistributionView.prototype.events = {
    "iostap .btn-done": "endGame"
  };

  DialDistributionView.prototype.serialize = function() {
    var d;
    d = DialDistributionView.__super__.serialize.apply(this, arguments);
    d.values = _.chain(d.metadata.questions[0].answers).filter(function(a) {
      return _.isNumber(a.content);
    }).map(function(a) {
      a.content = parseFloat(a.content) || 0;
      return a;
    }).sort(function(a, b) {
      return a.content - b.content;
    }).value();
    return d;
  };

  DialDistributionView.prototype.beforeShow = function() {
    this.distribution = this.getDistribution();
    this.setEl(this.findOne(".dial"), "dial");
    this.setEl(this.findOne(".dial-knob-input"), "knob-input");
    this.setEl(this.findOne(".dial-knob-input-value"), "knob-input-value");
    this.setEl(this.findOne(".dial-knob-answer"), "knob-answer");
    this.setEl(this.findOne(".dial-knob-answer-value"), "knob-answer-value");
    this.setEl(this.findOne(".dial-knob-value"), "knob-value");
    this.setEl(this.findAll(".dial-notch"), "notches");
    this.setEl(this.findAll(".dial-label"), "labels");
    this.rotateElements(this.getEl("notches"));
    return this.rotateElements(this.getEl("labels"));
  };

  DialDistributionView.prototype.onRefresh = function() {
    this.beforeShow();
    return DialDistributionView.__super__.onRefresh.apply(this, arguments);
  };

  DialDistributionView.prototype.show = function() {
    var el;
    DialDistributionView.__super__.show.apply(this, arguments);
    el = this.findOne(".content-fit");
    this.draggy = new Draggy({
      el: this.getEl("dial"),
      radius: this.getEl("dial").offsetWidth / 2,
      isParent: true
    });
    this.listenTo(this.draggy, "drag", this.onDrag);
    this.listenTo(this.draggy, "drop", this.onDrop);
    return this.enterGame();
  };

  DialDistributionView.prototype.rotateElements = function(elements) {
    var dir, el, i, _i, _len, _results;
    dir = this.options.config().direction === "rtl" ? -1 : 1;
    _results = [];
    for (i = _i = 0, _len = elements.length; _i < _len; i = ++_i) {
      el = elements[i];
      _results.push(this.transform(el, {
        rotate: this.distribution[i] * 360 * dir
      }));
    }
    return _results;
  };

  DialDistributionView.prototype.getDistribution = function() {
    var base, d, dist, distribution, factor, i, max, min, overlap, v, values, _i, _len, _ref1, _results;
    _ref1 = this.serialize(), values = _ref1.values, distribution = _ref1.distribution, overlap = _ref1.overlap;
    min = values[0].content;
    max = values[values.length - 1].content;
    dist = Math.abs(max - min);
    base = Math.log(dist) * Math.log(dist);
    factor = overlap ? 1 : 1 - 1 / values.length;
    _results = [];
    for (i = _i = 0, _len = values.length; _i < _len; i = ++_i) {
      v = values[i];
      switch (distribution) {
        case "Equal":
          _results.push(factor * i / (values.length - 1));
          break;
        case "Linear":
          _results.push(factor * (v.content - min) / dist);
          break;
        case "Logarithmic":
          d = Math.abs(v.content - min);
          if (d === 0) {
            _results.push(0);
          } else {
            _results.push(factor * (Math.log(d) * Math.log(dist)) / base);
          }
          break;
        default:
          _results.push(void 0);
      }
    }
    return _results;
  };

  DialDistributionView.prototype.onDrag = function(draggy, isInitialDrag) {
    this.currentAnswer = this.getSelectedAnswer(draggy);
    this.currentValue = this.currentAnswer.content;
    this.labelEl(this.getEl("knob-value"), this.currentValue);
    this.transform(this.getEl("knob-input"), {
      rotate: "" + draggy.t + "rad",
      transition: isInitialDrag ? "all 300ms" : "none"
    });
    return this.transform(this.getEl("knob-input-value"), {
      x: "-50%",
      rotate: "" + (-draggy.t) + "rad",
      transition: isInitialDrag ? "all 300ms" : "none"
    });
  };

  DialDistributionView.prototype.onDrop = function(draggy, isReset) {
    if (!isReset) {
      return draggy.reset({
        t: this.roundPos(draggy)
      });
    } else {
      this.currentAnswer = this.getSelectedAnswer(draggy);
      this.currentValue = this.currentAnswer.content;
      this.labelEl(this.getEl("knob-value"), this.currentValue);
      this.transform(this.getEl("knob-input"), {
        rotate: "" + draggy.t + "rad",
        transition: "all 300ms"
      });
      this.transform(this.getEl("knob-input-value"), {
        x: "-50%",
        rotate: "" + (-draggy.t) + "rad",
        transition: "all 300ms"
      });
      if (this.currentValue != null) {
        return this.setState("touched");
      }
    }
  };

  DialDistributionView.prototype.getSelectedAnswer = function(draggy) {
    var index, percent, values;
    values = this.serialize().values;
    percent = this.roundPercent(draggy);
    index = this.distribution.indexOf(percent);
    if (index === -1) {
      index = 0;
    }
    if (this.options.config().direction === "rtl") {
      return values[values.length - 1 - index];
    } else {
      return values[index];
    }
  };

  DialDistributionView.prototype.roundPos = function(draggy) {
    return (Math.PI * 2) * this.roundPercent(draggy);
  };

  DialDistributionView.prototype.roundPercent = function(draggy) {
    var length, percent, values;
    values = this.serialize().values;
    length = values.length;
    percent = _.limit(draggy.t / (Math.PI * 2), 0, 1);
    return _.nearest([1].concat(this.distribution), percent);
  };

  DialDistributionView.prototype.labelEl = function(el, value) {
    var prefix, suffix, _ref1;
    _ref1 = this.options.data.dial, prefix = _ref1.prefix, suffix = _ref1.suffix;
    value = this.currentValue;
    return el.innerHTML = "" + prefix + value + suffix;
  };

  DialDistributionView.prototype.showAnswer = function() {
    this.animateAnswerKnob();
    return this.draggy.lock();
  };

  DialDistributionView.prototype.isCorrect = function() {
    return (this.currentValue != null) && this.currentValue === this.options.data.dial.correct;
  };

  DialDistributionView.prototype.animateAnswerKnob = function() {
    var correctIndex, dial, percent, values, _ref1;
    _ref1 = this.serialize(), dial = _ref1.dial, values = _ref1.values;
    correctIndex = _.findIndex(values, function(v) {
      return v.correct;
    });
    percent = this.distribution[correctIndex];
    this.transform(this.getEl("knob-answer"), {
      rotate: "" + this.draggy.t + "rad",
      transition: "none"
    });
    this.transform(this.getEl("knob-answer-value"), {
      x: "-50%",
      rotate: "-" + this.draggy.t + "rad",
      transition: "none"
    });
    this.getEl("knob-answer").offsetWidth;
    this.transform(this.getEl("knob-answer"), {
      rotate: "" + (percent * Math.PI * 2) + "rad",
      transition: this.draggy.locked ? "none" : "all 600ms"
    });
    return this.transform(this.getEl("knob-answer-value"), {
      x: "-50%",
      rotate: "-" + (percent * Math.PI * 2) + "rad",
      transition: this.draggy.locked ? "none" : "all 600ms"
    });
  };

  DialDistributionView.prototype.answerDetails = function() {
    var question, _ref1, _ref2;
    question = (_ref1 = this.options.metadata) != null ? (_ref2 = _ref1.questions) != null ? _ref2[0] : void 0 : void 0;
    if (question && this.currentAnswer) {
      return [
        {
          question: question,
          answer: this.currentAnswer
        }
      ];
    } else {
      return [];
    }
  };

  DialDistributionView.prototype.endGame = function() {
    DialDistributionView.__super__.endGame.apply(this, arguments);
    return this.submit();
  };

  return DialDistributionView;

})(GameView);

module.exports = DialDistributionView;
});

;require.register("engine/dial/model.yaml", function(exports, require, module) {
module.exports = {"title":"dial","display":"Dial","category":"Numbers","features":{"stars":true},"model":{"title":{"type":"html","default":"Ask a question"},"dial":{"min":{"type":"number","default":0,"display":"Min. Value"},"max":{"type":"number","default":10,"display":"Max. Value"},"prefix":{"type":"html","default":""},"suffix":{"type":"html","default":""},"increment":{"type":"number","default":1},"labels":{"type":"int","min":0,"max":10,"default":4},"decimals":{"type":"int","min":0,"max":8,"default":0}},"answer":{"text":{"type":"html","default":"","display":"Answer Text"},"value":{"type":"number","default":5,"display":"Correct Value"},"correct":{"type":"html","default":"That's correct!","display":"Correct Reinforcement"},"incorrect":{"type":"html","default":"Not quite...","display":"Incorrect Reinforcement"},"takeaway":{"type":"html","default":"","display":"Core Message"}},"prompt":{"type":"html","default":"Drag to set the correct value"},"game":{"timer":{"limit":{"type":"number","default":-1,"display":"Time Limit (ms)"}}}},"examples":[{"title":"How many states have over 10% market share?","dial":{"min":0,"max":20,"labels":4,"prefix":"","suffix":""},"answer":{"value":10,"takeaway":"There are 10 states with over 10% market share","text":"We're a true market leader with 10 states.\n"}}]}
});

;require.register("engine/dial/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (Array, answer, continueBtnText, dial, game, hasNarration, hasPrompt, i18n, labelValues, notches, prompt, title, undefined) {
if ( game && game.timer && game.timer.limit > 0)
{
buf.push("<div class=\"full-screen\"><div class=\"game-stepper text-lg text-bold\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div></div>");
}
buf.push("<div class=\"content-fit block-v-xl content-fill\"><div class=\"row content-lg-fill content-sm-ver content-md-ver\"><div class=\"col-lg-6 col-sm-12 content-lg-ver block-v-lg block-v-lg\"><h1 class=\"text-lg-right text-center fade-in\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1></div><div class=\"col-lg-6 col-sm-12 content-lg-ver text-center block-v-lg\"><div class=\"dial scale-up\"><div class=\"dial-ring\"></div><div class=\"dial-knob dial-knob-input\"><div class=\"dial-knob-value dial-knob-input-value text-lg\">" + (null == (jade_interp = i18n("dial.touch-to-rotate")) ? "" : jade_interp) + "</div></div><div class=\"dial-knob dial-knob-answer\"><div class=\"dial-knob-value dial-knob-answer-value text-lg\">" + (null == (jade_interp = dial.prefix) ? "" : jade_interp) + (null == (jade_interp = answer.value) ? "" : jade_interp) + (null == (jade_interp = dial.suffix) ? "" : jade_interp) + "</div></div><div class=\"dial-notches\">");
// iterate new Array(notches)
;(function(){
  var $$obj = new Array(notches);
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var notch = $$obj[i];

buf.push("<div class=\"dial-notch\"></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var notch = $$obj[i];

buf.push("<div class=\"dial-notch\"></div>");
    }

  }
}).call(this);

buf.push("</div>");
if ( dial.labels)
{
buf.push("<div class=\"dial-labels\">");
// iterate labelValues
;(function(){
  var $$obj = labelValues;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var label = $$obj[$index];

buf.push("<div class=\"dial-label\"><div class=\"dial-label-text\">" + (null == (jade_interp = dial.prefix) ? "" : jade_interp) + (null == (jade_interp = dial.decimals ? label.toFixed(dial.decimals) : label) ? "" : jade_interp) + (null == (jade_interp = dial.suffix) ? "" : jade_interp) + "</div></div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var label = $$obj[$index];

buf.push("<div class=\"dial-label\"><div class=\"dial-label-text\">" + (null == (jade_interp = dial.prefix) ? "" : jade_interp) + (null == (jade_interp = dial.decimals ? label.toFixed(dial.decimals) : label) ? "" : jade_interp) + (null == (jade_interp = dial.suffix) ? "" : jade_interp) + "</div></div>");
    }

  }
}).call(this);

buf.push("</div>");
}
buf.push("</div></div></div></div><div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"Array" in locals_for_with?locals_for_with.Array:typeof Array!=="undefined"?Array:undefined,"answer" in locals_for_with?locals_for_with.answer:typeof answer!=="undefined"?answer:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"dial" in locals_for_with?locals_for_with.dial:typeof dial!=="undefined"?dial:undefined,"game" in locals_for_with?locals_for_with.game:typeof game!=="undefined"?game:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"labelValues" in locals_for_with?locals_for_with.labelValues:typeof labelValues!=="undefined"?labelValues:undefined,"notches" in locals_for_with?locals_for_with.notches:typeof notches!=="undefined"?notches:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/dial/view.coffee", function(exports, require, module) {
var DialView, Draggy, GameView, Prefix, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

GameView = require("views/base/game");

Prefix = require("lib/prefix");

Draggy = require("views/components/draggy");

DialView = (function(_super) {
  __extends(DialView, _super);

  function DialView() {
    _ref = DialView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  DialView.prototype.template = require("./template");

  DialView.prototype.events = {
    "iostap .btn-done": "endGame"
  };

  DialView.prototype.serialize = function() {
    var d, increment, max, min, _i, _ref1, _results;
    d = DialView.__super__.serialize.apply(this, arguments);
    increment = parseFloat(d.dial.increment, 10) || 1;
    min = parseFloat(d.dial.min, 10);
    max = parseFloat(d.dial.max, 10);
    d.notches = Math.round((max - min) / increment);
    d.labels = _.nearest(_.factors(d.notches).map(function(m) {
      return m;
    }), d.dial.labels);
    d.labelValues = (function() {
      _results = [];
      for (var _i = 0, _ref1 = d.labels; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; 0 <= _ref1 ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this).map(function(i) {
      var value;
      value = new Big(Math.round(i * d.notches / d.labels));
      value = value.mul(increment).add(d.dial.min);
      return value;
    });
    return d;
  };

  DialView.prototype.beforeShow = function() {
    this.setEl(this.findOne(".dial"), "dial");
    this.setEl(this.findOne(".dial-knob-input"), "knob-input");
    this.setEl(this.findOne(".dial-knob-input-value"), "knob-input-value");
    this.setEl(this.findOne(".dial-knob-answer"), "knob-answer");
    this.setEl(this.findOne(".dial-knob-answer-value"), "knob-answer-value");
    this.setEl(this.findOne(".dial-knob-value"), "knob-value");
    this.setEl(this.findAll(".dial-notch"), "notches");
    this.setEl(this.findAll(".dial-label"), "labels");
    this.rotateElements(this.getEl("notches"));
    return this.rotateElements(this.getEl("labels"));
  };

  DialView.prototype.onRefresh = function() {
    this.beforeShow();
    return DialView.__super__.onRefresh.apply(this, arguments);
  };

  DialView.prototype.show = function() {
    var el;
    DialView.__super__.show.apply(this, arguments);
    el = this.findOne(".content-fit");
    this.draggy = new Draggy({
      el: this.getEl("dial"),
      radius: this.getEl("dial").offsetWidth / 2,
      isParent: true
    });
    this.listenTo(this.draggy, "drag", this.onDrag);
    this.listenTo(this.draggy, "drop", this.onDrop);
    return this.enterGame();
  };

  DialView.prototype.rotateElements = function(elements) {
    var dir, el, i, _i, _len, _results;
    dir = this.options.config().direction === "rtl" ? -1 : 1;
    _results = [];
    for (i = _i = 0, _len = elements.length; _i < _len; i = ++_i) {
      el = elements[i];
      _results.push(this.transform(el, {
        rotate: i / elements.length * 360 * dir
      }));
    }
    return _results;
  };

  DialView.prototype.onDrag = function(draggy, isInitialDrag) {
    this.currentValue = this.roundValue(draggy);
    this.labelEl(this.getEl("knob-value"), this.currentValue);
    this.transform(this.getEl("knob-input"), {
      rotate: "" + draggy.t + "rad",
      transition: isInitialDrag ? "all 300ms" : "none"
    });
    return this.transform(this.getEl("knob-input-value"), {
      x: "-50%",
      rotate: "" + (-draggy.t) + "rad",
      transition: isInitialDrag ? "all 300ms" : "none"
    });
  };

  DialView.prototype.onDrop = function(draggy, isReset) {
    if (!isReset) {
      return draggy.reset({
        t: this.roundPos(draggy)
      });
    } else {
      this.currentValue = this.roundValue(draggy);
      this.labelEl(this.getEl("knob-value"), this.currentValue);
      this.transform(this.getEl("knob-input"), {
        rotate: "" + draggy.t + "rad",
        transition: "all 300ms"
      });
      this.transform(this.getEl("knob-input-value"), {
        x: "-50%",
        rotate: "" + (-draggy.t) + "rad",
        transition: "all 300ms"
      });
      if (this.currentValue != null) {
        return this.setState("touched");
      }
    }
  };

  DialView.prototype.roundValue = function(draggy) {
    var increment, max, min, value, _ref1;
    _ref1 = this.options.data.dial, increment = _ref1.increment, min = _ref1.min, max = _ref1.max;
    value = Big(max - min).mul(this.roundPercent(draggy)).div(increment).round().mul(increment).plus(min);
    if (this.options.config().direction === "rtl") {
      return Big(max - value);
    } else {
      return value;
    }
  };

  DialView.prototype.roundPos = function(draggy) {
    return (Math.PI * 2) * this.roundPercent(draggy);
  };

  DialView.prototype.roundPercent = function(draggy) {
    var increment, max, min, percent, steps, _ref1;
    _ref1 = this.options.data.dial, increment = _ref1.increment, min = _ref1.min, max = _ref1.max;
    max = Big(max).sub(min).div(increment).round().mul(increment).plus(min);
    percent = _.limit(draggy.t / (Math.PI * 2), 0, 1);
    steps = Big(max).sub(min).div(increment).valueOf();
    return Big(steps).mul(percent).round().div(steps);
  };

  DialView.prototype.labelEl = function(el, value) {
    var decimals, prefix, suffix, _ref1;
    _ref1 = this.options.data.dial, prefix = _ref1.prefix, suffix = _ref1.suffix, decimals = _ref1.decimals;
    decimals = parseFloat(decimals, 10) || 0;
    if (decimals > 0) {
      value = parseFloat(value, 10).toFixed(decimals);
    }
    return el.innerHTML = "" + prefix + value + suffix;
  };

  DialView.prototype.showAnswer = function() {
    this.animateAnswerKnob();
    return this.draggy.lock();
  };

  DialView.prototype.isCorrect = function() {
    return (this.currentValue != null) && this.currentValue.eq(this.options.data.answer.value);
  };

  DialView.prototype.animateAnswerKnob = function() {
    var answer, dial, increment, max, min, percent, _ref1;
    _ref1 = this.options.data, answer = _ref1.answer, dial = _ref1.dial;
    increment = dial.increment, min = dial.min, max = dial.max;
    max = Big(max).sub(min).div(increment).round().mul(increment).plus(min);
    percent = (answer.value - min) / (max - min);
    if (this.options.config().direction === "rtl") {
      percent = 1 - percent;
    }
    this.transform(this.getEl("knob-answer"), {
      rotate: "" + this.draggy.t + "rad",
      transition: "none"
    });
    this.transform(this.getEl("knob-answer-value"), {
      x: "-50%",
      rotate: "-" + this.draggy.t + "rad",
      transition: "none"
    });
    this.getEl("knob-answer").offsetWidth;
    this.transform(this.getEl("knob-answer"), {
      rotate: "" + (percent * Math.PI * 2) + "rad",
      transition: this.draggy.locked ? "none" : "all 600ms"
    });
    return this.transform(this.getEl("knob-answer-value"), {
      x: "-50%",
      rotate: "-" + (percent * Math.PI * 2) + "rad",
      transition: this.draggy.locked ? "none" : "all 600ms"
    });
  };

  DialView.prototype.endGame = function() {
    DialView.__super__.endGame.apply(this, arguments);
    return this.submit();
  };

  DialView.prototype.answerDetails = function() {
    var answer, correct, details, question, questions, value, _ref1;
    questions = ((_ref1 = this.options.metadata) != null ? _ref1.questions : void 0) || [];
    if (!(questions.length > 0)) {
      return [];
    }
    question = questions[0];
    correct = this.isCorrect();
    value = parseInt(this.currentValue);
    answer = _.find(question.answers, function(a) {
      return a.correct === correct;
    });
    details = {
      question: question.question,
      answer: answer
    };
    details.answer.content = value;
    return [details];
  };

  return DialView;

})(GameView);

module.exports = DialView;
});

;require.register("engine/drag-to-match/model.yaml", function(exports, require, module) {
module.exports = {"title":"drag-to-match","display":"Drag to Match","category":"Relationships","features":{"stars":true},"model":{"title":{"type":"html","default":""},"reject":{"type":"boolean","default":false,"display":"Reject Answers","help":"Images will go back to where they came from when placed incorrectly\n"},"list":{"min":2,"max":4,"type":[{"image":{"display":"Left","types":["text","image"]},"name":{"display":"Right","types":["text","image"],"default":"Image 1"}}]},"answer":{"text":{"type":"html","default":"","display":"Answer Text"},"incorrect":{"type":"html","default":"Not quite...","display":"Incorrect Reinforcement"},"correct":{"type":"html","default":"That's correct!","display":"Correct Reinforcement"},"takeaway":{"type":"html","default":"","display":"Core Message"}},"prompt":{"type":"html","default":"Drag the images to their labels"},"game":{"timer":{"limit":{"type":"number","default":-1,"display":"Time Limit (ms)"}}}},"examples":[{"title":"Match the product with its name","answer":{"takeaway":"Product X, Y and Z are best-sellers\n","text":"The first is Product X, then Product Y and thirdly Product Z.\n"},"list":[{"image":"img/examples/product-1.png","imageType":"image","name":"Product X"},{"image":"img/examples/product-2.png","imageType":"image","name":"Product Y"},{"image":"img/examples/product-3.png","imageType":"image","name":"Product Z"}]},{"title":"What color are the products?","reject":true,"answer":{"takeaway":"Product X and Z are blue/green, Product Y is yellow\n","text":"The first is Product X, then Product Y and thirdly Product Z.\n"},"list":[{"image":"img/examples/product-1.png","imageType":"image","name":"Blue/Green Products"},{"image":"img/examples/product-2.png","imageType":"image","name":"Yellow Products"},{"image":"img/examples/product-3.png","imageType":"image","name":"Blue/Green Products"}]}]}
});

;require.register("engine/drag-to-match/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (config, continueBtnText, game, hasNarration, hasPrompt, i18n, isLong, list, names, prompt, title, undefined) {
jade_mixins["multi-content"] = jade_interp = function(prop, obj){
var block = (this && this.block), attributes = (this && this.attributes) || {};
obj = obj || locals;
switch (obj[prop + "Type"]){
case "image":
buf.push("<div" + (jade.attr("data-content", obj.image, true, false)) + " class=\"multi-content-wrapper multi-content-wrapper-image block-md block-lt\"><div class=\"block-sm multi-content-media\"><img" + (jade.attr("src", obj[prop], true, false)) + " class=\"multi-content multi-content-image\"/></div></div>");
  break;
case "video":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-video block-md block-lt\"><div class=\"block-sm multi-content-media\"><video" + (jade.attr("src", obj[prop], true, false)) + " webkit-playsinline=\"webkit-playsinline\" playsinline=\"playsinline\" preload=\"auto\" controls=\"controls\"" + (jade.attr("dir", config.direction, true, false)) + " class=\"video-js multi-content multi-content-video block-dk\"></video></div></div>");
  break;
case "audio":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-audio block-md block-lt\"><div class=\"block-sm multi-content-media\"><audio" + (jade.attr("src", obj[prop], true, false)) + " webkit-playsinline=\"webkit-playsinline\" playsinline=\"playsinline\" preload=\"auto\" controls=\"controls\"" + (jade.attr("dir", config.direction, true, false)) + " class=\"multi-content multi-content-audio block-dk\"></audio></div></div>");
  break;
case "iframe":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-iframe block-md block-lt\"><div class=\"block-sm multi-content-iframe\">");
var iframe = obj[prop].match(/<iframe[^<]*<\/iframe>/)
if ( iframe)
{
buf.push(null == (jade_interp = iframe[0].replace(/ (width|height)=["'\d\w]+/g, "")) ? "" : jade_interp);
}
buf.push("</div></div>");
  break;
default:
buf.push("<span class=\"multi-content multi-content-text\">" + (null == (jade_interp = obj[prop]) ? "" : jade_interp) + "</span>");
  break;
}
};
if ( game && game.timer && game.timer.limit > 0)
{
buf.push("<div class=\"full-screen\"><div class=\"game-stepper text-lg text-bold\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div></div>");
}
buf.push("<div class=\"content-fill\"><div class=\"block-v-lg content-fill text-center\"><div" + (jade.cls(['drag-to-match-outer','content-fill',isLong ? "long-text" : "short-text"], [null,null,true])) + "><h1 class=\"drag-to-match-title block-v-md tight\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"drag-to-match-inner row block-v-md block-box-sizing\"><div class=\"col-sm-6 draggy-container slide-up content-fill\"><div" + (jade.cls(['draggies','clearfix','content-fill',list.length > 1 ? "text-right" : ""], [null,null,null,true])) + ">");
// iterate list
;(function(){
  var $$obj = list;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var item = $$obj[$index];

buf.push("<div" + (jade.attr("style", "height: " + (100/list.length) + "%", true, false)) + " class=\"drag-to-match-item block-v-sm block-box-sizing block-inline\"><div class=\"content-fill block-dk block-sm\"><div" + (jade.attr("data-id", item.id, true, false)) + (jade.attr("data-name", item.name, true, false)) + " class=\"draggy\">");
jade_mixins["multi-content"]("image", item);
buf.push("</div></div></div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var item = $$obj[$index];

buf.push("<div" + (jade.attr("style", "height: " + (100/list.length) + "%", true, false)) + " class=\"drag-to-match-item block-v-sm block-box-sizing block-inline\"><div class=\"content-fill block-dk block-sm\"><div" + (jade.attr("data-id", item.id, true, false)) + (jade.attr("data-name", item.name, true, false)) + " class=\"draggy\">");
jade_mixins["multi-content"]("image", item);
buf.push("</div></div></div>");
    }

  }
}).call(this);

buf.push("</div></div><div class=\"col-sm-6 droppy-container slide-up content-fill\"><div" + (jade.cls(['droppies','clearfix','content-fill',names.length > 1 ? "text-left" : ""], [null,null,null,true])) + ">");
// iterate names
;(function(){
  var $$obj = names;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var item = $$obj[$index];

buf.push("<div" + (jade.attr("style", "height: " + (100/names.length) + "%", true, false)) + " class=\"drag-to-match-item block-v-sm block-box-sizing block-inline\"><div" + (jade.attr("data-name", item.name, true, false)) + " class=\"content-fill droppy block-sm block-dk\"><div class=\"droppy-zone\"></div>");
jade_mixins["multi-content"]("name", item);
buf.push("</div></div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var item = $$obj[$index];

buf.push("<div" + (jade.attr("style", "height: " + (100/names.length) + "%", true, false)) + " class=\"drag-to-match-item block-v-sm block-box-sizing block-inline\"><div" + (jade.attr("data-name", item.name, true, false)) + " class=\"content-fill droppy block-sm block-dk\"><div class=\"droppy-zone\"></div>");
jade_mixins["multi-content"]("name", item);
buf.push("</div></div>");
    }

  }
}).call(this);

buf.push("</div></div></div></div></div></div><div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"game" in locals_for_with?locals_for_with.game:typeof game!=="undefined"?game:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"isLong" in locals_for_with?locals_for_with.isLong:typeof isLong!=="undefined"?isLong:undefined,"list" in locals_for_with?locals_for_with.list:typeof list!=="undefined"?list:undefined,"names" in locals_for_with?locals_for_with.names:typeof names!=="undefined"?names:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/drag-to-match/view.coffee", function(exports, require, module) {
var DragToMatchView, Draggy, GameView, Prefix, SlideView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

GameView = require("views/base/game");

SlideView = require("views/slide");

Prefix = require("lib/prefix");

Draggy = require("views/components/draggy");

DragToMatchView = (function(_super) {
  __extends(DragToMatchView, _super);

  function DragToMatchView() {
    _ref = DragToMatchView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  DragToMatchView.prototype.template = require("./template");

  DragToMatchView.prototype.events = {
    "iostap .btn-done": "endGame"
  };

  DragToMatchView.prototype.serialize = function() {
    var data, i, isLong, item, _i, _len, _ref1;
    data = DragToMatchView.__super__.serialize.apply(this, arguments);
    data.list = (function() {
      var _i, _len, _ref1, _results;
      _ref1 = data.list;
      _results = [];
      for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
        item = _ref1[i];
        if (item.image && item.name) {
          _results.push(_.extend({
            id: i
          }, item));
        }
      }
      return _results;
    })();
    data.list = _.shuffle(data.list);
    data.names = _.chain(data.list).shuffle().filter(function(_arg, i, arr) {
      var name;
      name = _arg.name;
      return _.pluck(arr, "name").indexOf(name) === i;
    }).value();
    isLong = false;
    _ref1 = data.list;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      item = _ref1[_i];
      if (item.nameType === "text" || item.nameType === "" || !item.nameType) {
        isLong = isLong || (item.name || "").length > 32;
      }
      if (item.imageType === "text" || item.imageType === "") {
        isLong = isLong || (item.image || "").length > 32;
      }
      if (isLong) {
        continue;
      }
    }
    data.isLong = isLong;
    return data;
  };

  DragToMatchView.prototype.onRefresh = function() {
    this.beforeShow();
    return DragToMatchView.__super__.onRefresh.apply(this, arguments);
  };

  DragToMatchView.prototype.beforeShow = function() {
    return this.setHeight();
  };

  DragToMatchView.prototype.show = function() {
    var draggy, el;
    DragToMatchView.__super__.show.apply(this, arguments);
    this.listenTo(this, "resize", this.onResize);
    this.droppies = this.getElements(".droppy");
    this.draggies = (function() {
      var _i, _len, _ref1, _results;
      _ref1 = this.findAll(".draggy");
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        el = _ref1[_i];
        draggy = new Draggy({
          el: el
        });
        draggy.id = el.dataset.id;
        this.listenTo(draggy, "drag", this.onDrag);
        this.listenTo(draggy, "drop", this.onDrop);
        _results.push(draggy);
      }
      return _results;
    }).call(this);
    return this.enterGame();
  };

  DragToMatchView.prototype.setHeight = function() {
    var inner, outer, title;
    outer = this.findOne(".drag-to-match-outer");
    title = this.findOne(".drag-to-match-title");
    inner = this.findOne(".drag-to-match-inner");
    return inner.style.height = outer.offsetHeight - title.offsetHeight + "px";
  };

  DragToMatchView.prototype.onDrag = function(draggy, isInitialDrag) {
    var activeIndex, contains, droppy, i, _i, _len, _ref1;
    if (isInitialDrag) {
      this.droppies = this.getElements(".droppy", this.droppies);
    }
    activeIndex = draggy.closest(_.pluck(this.droppies, "bounds"));
    _ref1 = this.droppies;
    for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
      droppy = _ref1[i];
      droppy.el.classList.toggle("active", i === activeIndex);
      droppy.isActive = i === activeIndex;
    }
    if (isInitialDrag) {
      draggy.el.classList.remove("fade");
      droppy = this.droppies[activeIndex];
      contains = _.without(droppy != null ? droppy.contains : void 0, draggy.id);
      if (contains.length) {
        this.getDraggyFromId(_.last(contains)).el.classList.remove("fade");
      } else if (droppy) {
        droppy.el.classList.remove("contains");
      }
    }
    return this.transform(draggy.el, {
      x: draggy.x,
      y: draggy.y,
      scale: 1.25,
      transition: isInitialDrag ? "all 300ms" : "none"
    });
  };

  DragToMatchView.prototype.onDrop = function(draggy) {
    var bounds, droppy, height, left, top, width, x, y, _ref1;
    _ref1 = draggy.offset, left = _ref1.left, top = _ref1.top, width = _ref1.width, height = _ref1.height;
    droppy = ((function() {
      var _i, _len, _ref2, _results;
      _ref2 = this.droppies;
      _results = [];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        droppy = _ref2[_i];
        if (droppy.isActive) {
          _results.push(droppy);
        }
      }
      return _results;
    }).call(this))[0];
    x = y = 0;
    if (droppy) {
      bounds = droppy.bounds;
      x = Math.round(bounds.left + bounds.width / 2 - left - width / 2);
      y = Math.round(bounds.top + bounds.height / 2 - top - height / 2);
    } else {
      draggy.isPositioned = false;
    }
    if (this.options.data.reject && (droppy != null ? droppy.el.dataset.name : void 0) !== draggy.el.dataset.name) {
      if (droppy != null) {
        droppy.isActive = false;
      }
      x = y = 0;
      if (droppy) {
        droppy.el.classList.add("incorrect");
        window.setTimeout((function() {
          return droppy.el.classList.remove("incorrect");
        }), 400);
      }
    }
    if (draggy.x !== x || draggy.y !== y) {
      draggy.reset({
        x: x,
        y: y
      });
    } else {
      this.transform(draggy.el, {
        x: draggy.x,
        y: draggy.y,
        transition: "all 300ms"
      });
      this.checkAnswer(draggy);
    }
    return this.setState(this.isTouched() ? "touched" : "prompt");
  };

  DragToMatchView.prototype.onResize = function(e) {
    var draggy, droppy, id, _i, _j, _len, _len1, _ref1, _ref2;
    _ref1 = this.droppies || [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      droppy = _ref1[_i];
      _ref2 = droppy.contains;
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        id = _ref2[_j];
        draggy = this.getDraggyFromId(id);
        if (draggy != null) {
          draggy.reset({
            x: droppy.el.offsetLeft - draggy.el.offsetLeft,
            y: droppy.el.offsetTop - draggy.el.offsetTop
          });
        }
      }
    }
    return this.setHeight();
  };

  DragToMatchView.prototype.getDraggyFromId = function(id) {
    return _.findWhere(this.draggies, {
      id: id
    });
  };

  DragToMatchView.prototype.getElements = function(selector, original) {
    var contains, el, i, _i, _j, _len, _len1, _ref1, _ref2, _results, _results1;
    if (original) {
      _results = [];
      for (_i = 0, _len = original.length; _i < _len; _i++) {
        _ref1 = original[_i], el = _ref1.el, contains = _ref1.contains;
        _results.push({
          el: el,
          contains: contains,
          bounds: el.getBoundingClientRect()
        });
      }
      return _results;
    } else {
      _ref2 = this.findAll(selector);
      _results1 = [];
      for (i = _j = 0, _len1 = _ref2.length; _j < _len1; i = ++_j) {
        el = _ref2[i];
        _results1.push({
          el: el,
          bounds: el.getBoundingClientRect(),
          contains: []
        });
      }
      return _results1;
    }
  };

  DragToMatchView.prototype.resetDraggy = function(draggy) {
    draggy.reset();
    draggy.el.classList.remove("is-positioned");
    return draggy.isPositioned = false;
  };

  DragToMatchView.prototype.checkAnswer = function(draggy) {
    var d, doesContain, droppy, i, id, _i, _j, _len, _len1, _ref1, _ref2, _results;
    _ref1 = this.droppies;
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      droppy = _ref1[_i];
      droppy.el.classList.remove("active");
      doesContain = _.include(droppy.contains, draggy.id);
      if (droppy.isActive) {
        draggy.el.classList.add("is-positioned");
        draggy.isPositioned = true;
        if (droppy.contains.length > 0 && !doesContain && this.isOnlyUnique()) {
          droppy.isActive = false;
          this.resetDraggy(this.getDraggyFromId(droppy.contains[0]));
        }
        droppy.contains = _.uniq(droppy.contains.concat(draggy.id));
      } else if (doesContain) {
        droppy.contains = _.without(droppy.contains, draggy.id);
      }
      _ref2 = droppy.contains;
      for (i = _j = 0, _len1 = _ref2.length; _j < _len1; i = ++_j) {
        id = _ref2[i];
        d = this.getDraggyFromId(id);
        d.el.classList.toggle("fade", i !== droppy.contains.length - 1);
      }
      _results.push(droppy.el.classList.toggle("contains", droppy.contains.length > 0));
    }
    return _results;
  };

  DragToMatchView.prototype.isTouched = function() {
    var draggy, touchedDraggies;
    touchedDraggies = (function() {
      var _i, _len, _ref1, _results;
      _ref1 = this.draggies;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        draggy = _ref1[_i];
        if (draggy.isPositioned) {
          _results.push(draggy);
        }
      }
      return _results;
    }).call(this);
    return touchedDraggies.length === this.options.data.list.length;
  };

  DragToMatchView.prototype.isCorrect = function() {
    var correctDraggies, droppy;
    correctDraggies = (function() {
      var _i, _len, _ref1, _results,
        _this = this;
      _ref1 = this.droppies;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        droppy = _ref1[_i];
        if (_.filter(droppy.contains, function(id) {
          return droppy.el.dataset.name === _this.getDraggyFromId(id).el.dataset.name;
        }).length === droppy.contains.length) {
          _results.push(droppy);
        }
      }
      return _results;
    }).call(this);
    return correctDraggies.length === this.droppies.length;
  };

  DragToMatchView.prototype.showAnswer = function() {
    var draggy, droppy, droppyCorrect, id, isCorrect, _i, _j, _len, _len1, _ref1, _ref2, _results;
    _ref1 = this.droppies;
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      droppy = _ref1[_i];
      droppyCorrect = true;
      _ref2 = droppy.contains;
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        id = _ref2[_j];
        draggy = this.getDraggyFromId(id);
        isCorrect = droppy.el.dataset.name === draggy.el.dataset.name;
        draggy.el.classList.toggle("incorrect", !isCorrect);
        if (!isCorrect) {
          droppyCorrect = false;
        }
      }
      _results.push(droppy.el.classList.toggle("correct", droppyCorrect));
    }
    return _results;
  };

  DragToMatchView.prototype.isOnlyUnique = function() {
    return _.chain(this.options.data.list).pluck("name").uniq().value().length === this.options.data.list.length;
  };

  DragToMatchView.prototype.answerDetails = function() {
    var details, draggiesByContentDict, q, questions, selectedDraggy, selectedDroppy, _i, _len, _ref1;
    questions = ((_ref1 = this.options.metadata) != null ? _ref1.questions : void 0) || [];
    if (!(questions.length > 0)) {
      return [];
    }
    details = [];
    draggiesByContentDict = _.indexBy(this.draggies, function(d) {
      return d.el.children[0].dataset.content;
    });
    for (_i = 0, _len = questions.length; _i < _len; _i++) {
      q = questions[_i];
      if (selectedDraggy = draggiesByContentDict[q.question.content]) {
        selectedDroppy = _.find(this.droppies, function(droppy) {
          var _ref2;
          return _ref2 = selectedDraggy.el.dataset.id, __indexOf.call(droppy.contains, _ref2) >= 0;
        });
        details.push({
          question: q.question,
          answer: _.find(q.answers, function(a) {
            return a.content === selectedDroppy.el.dataset.name;
          })
        });
      }
    }
    return details;
  };

  DragToMatchView.prototype.endGame = function() {
    DragToMatchView.__super__.endGame.apply(this, arguments);
    return this.submit();
  };

  return DragToMatchView;

})(GameView);

module.exports = DragToMatchView;
});

;require.register("engine/exit/model.yaml", function(exports, require, module) {
module.exports = {"title":"exit","display":"Exit Lesson","category":"Exit","model":{"title":{"type":"html","default":"That's it!"},"content":{"type":"html","default":"Nice work. You’ve reached the end of this lesson."},"buttonText":{"type":"html","default":"Exit Lesson","display":"Button CTA"}}}
});

;require.register("engine/exit/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (buttonText, config, content, scorm, title) {
buf.push("<div class=\"content-scroll content-ver text-center block-v-md\"><div class=\"content-scroll-inner block-v-md\"><h1 class=\"slide-up\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"slide-up delay-1 text-md\">" + (null == (jade_interp = content) ? "" : jade_interp) + "</div></div>");
if ( !config.webAccess && !scorm)
{
buf.push("<div class=\"block-v-md\"><div class=\"btn btn-solid slide-up\">" + (null == (jade_interp = buttonText) ? "" : jade_interp) + "</div></div>");
}
buf.push("</div>");}.call(this,"buttonText" in locals_for_with?locals_for_with.buttonText:typeof buttonText!=="undefined"?buttonText:undefined,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined,"content" in locals_for_with?locals_for_with.content:typeof content!=="undefined"?content:undefined,"scorm" in locals_for_with?locals_for_with.scorm:typeof scorm!=="undefined"?scorm:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/exit/view.coffee", function(exports, require, module) {
var ExitView, Lesson, SlideView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SlideView = require("views/slide");

Lesson = Application.actions().Lesson;

ExitView = (function(_super) {
  __extends(ExitView, _super);

  function ExitView() {
    _ref = ExitView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  ExitView.prototype.template = require("./template");

  ExitView.prototype.events = function() {
    return {
      "iostap .btn": "exit"
    };
  };

  ExitView.prototype.show = function() {
    return Lesson.complete();
  };

  ExitView.prototype.beforeShow = function() {
    return this.trigger("ui", {
      flexibleHeight: true
    });
  };

  ExitView.prototype.beforeHide = function() {
    return this.trigger("ui", {
      flexibleHeight: false
    });
  };

  return ExitView;

})(SlideView);

module.exports = ExitView;
});

;require.register("engine/expandable-list/model.yaml", function(exports, require, module) {
module.exports = {"title":"expandable-list","display":"Expandable List","category":"Content","features":{"narration":true},"description":"Display a list of bullet points","model":{"title":{"type":"html","default":""},"list":{"type":[{"title":{"type":"html"},"content":{"type":"html"}}],"min":1,"max":6},"focus":{"type":"boolean","default":true,"help":"Only reveal one item at a time.\n"},"prompt":{"type":"html","default":"Select an item to see more"}},"examples":[{"title":"Learn more about our product range","list":[{"title":"Product X","content":"This is the original product in our line and is a great source of pride for the company.\n"},{"title":"Product Y","content":"Product Y was introduced to appeal to a broader customers base and was a great success.\n"},{"title":"Product Z","content":"Completing our range is Product Z. It appeals to old and new customers alike, making us a company for everyone.\n"}]}]}
});

;require.register("engine/expandable-list/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (continueBtnText, hasNarration, hasPrompt, i18n, list, prompt, title, undefined) {
buf.push("<div class=\"content-scroll content-fill\"><div class=\"content-scroll-inner block-v-md\"><div class=\"block-v-md\"><div class=\"text-xxl text-center slide-up\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</div></div><div class=\"row block-v-md\"><div class=\"col-sm-12 col-md-10 col-md-offset-1\"><div class=\"accordion\">");
// iterate list
;(function(){
  var $$obj = list;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var item = $$obj[i];

var klass = "middle";
if (i === 0) klass = "first";
if (i === list.length - 1 ) klass = "last";
buf.push("<div" + (jade.cls(['item',"item-" + (klass) + ""], [null,true])) + "><div class=\"item-button btn btn-solid\"><div class=\"accordion-text text-left\">" + (null == (jade_interp = item.title) ? "" : jade_interp) + "</div></div><div class=\"item-content block-dk block-md\"><div class=\"text-md\">" + (null == (jade_interp = item.content) ? "" : jade_interp) + "</div></div></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var item = $$obj[i];

var klass = "middle";
if (i === 0) klass = "first";
if (i === list.length - 1 ) klass = "last";
buf.push("<div" + (jade.cls(['item',"item-" + (klass) + ""], [null,true])) + "><div class=\"item-button btn btn-solid\"><div class=\"accordion-text text-left\">" + (null == (jade_interp = item.title) ? "" : jade_interp) + "</div></div><div class=\"item-content block-dk block-md\"><div class=\"text-md\">" + (null == (jade_interp = item.content) ? "" : jade_interp) + "</div></div></div>");
    }

  }
}).call(this);

buf.push("</div></div></div></div></div><div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"list" in locals_for_with?locals_for_with.list:typeof list!=="undefined"?list:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/expandable-list/view.coffee", function(exports, require, module) {
var ExpandableListView, ScrollableView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

ScrollableView = require("../scrollable/view");

ExpandableListView = (function(_super) {
  __extends(ExpandableListView, _super);

  function ExpandableListView() {
    _ref = ExpandableListView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  ExpandableListView.prototype.template = require("./template");

  ExpandableListView.prototype.events = {
    "iostap .item-button": "toggleItem",
    "iostap .btn-done": "submit"
  };

  ExpandableListView.prototype.serialize = function() {
    var data;
    data = ExpandableListView.__super__.serialize.apply(this, arguments);
    data.list = _.filter(data.list, function(el) {
      return el.title && el.content;
    });
    data.hasPrompt = true;
    return data;
  };

  ExpandableListView.prototype.beforeShow = function() {
    this.setEl(this.findAll(".item"), "items");
    this.setEl(this.findOne(".content-scroll-inner"), "container");
    this.setEl(this.findOne(".accordion"), "accordion");
    this.transformItems(false);
    return this.trigger("ui", {
      flexibleHeight: true
    });
  };

  ExpandableListView.prototype.beforeHide = function() {
    return this.trigger("ui", {
      flexibleHeight: false
    });
  };

  ExpandableListView.prototype.show = function() {
    this.touchedItems = [];
    this.setState("prompt");
    return this.listenTo(this, "resize", this.onResize);
  };

  ExpandableListView.prototype.onResize = function() {
    return this.beforeShow();
  };

  ExpandableListView.prototype.onRefresh = function() {};

  ExpandableListView.prototype.toggleItem = function(e, element) {
    var button, currentItem, other, transition, _i, _len, _ref1;
    button = (e != null ? e.currentTarget : void 0) || element;
    currentItem = button.parentNode;
    transition = e != null;
    this.touchedItems = _.uniq(this.touchedItems.concat(currentItem));
    if (this.touchedItems.length === this.getEl("items").length) {
      this.setState("touched");
    }
    _ref1 = this.getEl("items");
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      other = _ref1[_i];
      this.transition(other, transition ? "all 300ms" : "");
      if (this.options.data.focus && other !== currentItem) {
        other.classList.remove("active");
      }
    }
    currentItem.offsetHeight;
    currentItem.classList.toggle("active");
    return this.transformItems(transition);
  };

  ExpandableListView.prototype.transformItems = function(transition) {
    var accordion, button, height, i, item, yOffset, _i, _len, _ref1,
      _this = this;
    accordion = this.getEl("accordion");
    if (!((accordion != null) && this.getEl("items").length)) {
      return;
    }
    window.clearTimeout(this.timeout);
    yOffset = 0;
    height = 0;
    _ref1 = this.getEl("items");
    for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
      item = _ref1[i];
      button = item.firstChild;
      height += button.offsetHeight;
      this.transform(item, {
        y: yOffset
      });
      if (item.classList.contains("active")) {
        height += item.lastChild.offsetHeight;
        yOffset += item.lastChild.offsetHeight;
      }
    }
    if (height > accordion.offsetHeight || !transition) {
      return this.transformContainer(height, transition);
    } else {
      return this.timeout = window.setTimeout(function() {
        return _this.transformContainer(height, transition);
      }, 300);
    }
  };

  ExpandableListView.prototype.transformContainer = function(height, transition) {
    var accordion, container, diff, newY;
    container = this.getEl("container");
    accordion = this.getEl("accordion");
    accordion.style.height = height + "px";
    diff = this.el.offsetHeight - container.offsetHeight;
    newY = Math.max(diff / 2, 0);
    return this.transform(container, {
      y: newY,
      transition: transition ? "all 300ms" : ""
    });
  };

  ExpandableListView.prototype.refresh = function(params) {
    var changed, i, item, _i, _len, _ref1;
    _ref1 = params.data.list;
    for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
      item = _ref1[i];
      if (!_.isEqual(this.options.data.list[i], item)) {
        changed = i;
      }
    }
    ExpandableListView.__super__.refresh.apply(this, arguments);
    this.beforeShow();
    this.show();
    if (changed != null) {
      return this.toggleItem(null, this.getEl("items")[changed].firstChild);
    }
  };

  return ExpandableListView;

})(ScrollableView);

module.exports = ExpandableListView;
});

;require.register("engine/find-a-word/model.yaml", function(exports, require, module) {
module.exports = {"title":"find-a-word","display":"Find-a-word","category":"Game","visible":true,"features":{"narration":false,"stars":true},"model":{"title":{"type":"text"},"words":{"min":3,"max":12,"type":[{"type":"text"}]},"prompt":{"type":"text","default":"Find the words in the grid"},"answer":{"text":{"type":"html","default":"","display":"Answer Text"},"correct":{"type":"html","default":"That's correct!","display":"Correct Reinforcement"},"incorrect":{"type":"html","default":"Not quite...","display":"Incorrect Reinforcement"},"takeaway":{"type":"html","default":"","display":"Core Message"}},"game":{"timer":{"limit":{"type":"number","default":-1,"display":"Time Limit (ms)"}}}},"examples":[{"title":"Find all of the products that make up our range","words":["Product X","Product Y","Product Z"]}]}
});

;require.register("engine/find-a-word/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (Array, continueBtnText, dirs, game, grid, hasNarration, hasPrompt, i18n, prompt, size, title, undefined, words) {
if ( game && game.timer && game.timer.limit > 0)
{
buf.push("<div class=\"full-screen\"><div class=\"game-stepper text-lg text-bold\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div></div>");
}
buf.push("<div class=\"content content-fit clearfix\"><div class=\"text-center block-v-lg\"><h1 class=\"fade-in\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"grid-container block-md block-dk\"><div class=\"grid\">");
size = 1 / grid.length * 100;
dirs = ["up", "down", "left", "right"]
// iterate grid
;(function(){
  var $$obj = grid;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var row = $$obj[$index];

buf.push("<div" + (jade.attr("style", "height: " + (size) + "%;", true, false)) + " class=\"grid-row clearfix\">");
// iterate row
;(function(){
  var $$obj = row;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var col = $$obj[$index];

buf.push("<div" + (jade.attr("data-letter", col, true, false)) + (jade.attr("style", "width: " + (size) + "%;", true, false)) + (jade.cls(['grid-col','text-uppercase',"delay-" + (_.random(3)) + " slide-" + (_.sample(dirs)) + ""], [null,null,true])) + ">" + (jade.escape(null == (jade_interp = col) ? "" : jade_interp)) + "</div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var col = $$obj[$index];

buf.push("<div" + (jade.attr("data-letter", col, true, false)) + (jade.attr("style", "width: " + (size) + "%;", true, false)) + (jade.cls(['grid-col','text-uppercase',"delay-" + (_.random(3)) + " slide-" + (_.sample(dirs)) + ""], [null,null,true])) + ">" + (jade.escape(null == (jade_interp = col) ? "" : jade_interp)) + "</div>");
    }

  }
}).call(this);

buf.push("</div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var row = $$obj[$index];

buf.push("<div" + (jade.attr("style", "height: " + (size) + "%;", true, false)) + " class=\"grid-row clearfix\">");
// iterate row
;(function(){
  var $$obj = row;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var col = $$obj[$index];

buf.push("<div" + (jade.attr("data-letter", col, true, false)) + (jade.attr("style", "width: " + (size) + "%;", true, false)) + (jade.cls(['grid-col','text-uppercase',"delay-" + (_.random(3)) + " slide-" + (_.sample(dirs)) + ""], [null,null,true])) + ">" + (jade.escape(null == (jade_interp = col) ? "" : jade_interp)) + "</div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var col = $$obj[$index];

buf.push("<div" + (jade.attr("data-letter", col, true, false)) + (jade.attr("style", "width: " + (size) + "%;", true, false)) + (jade.cls(['grid-col','text-uppercase',"delay-" + (_.random(3)) + " slide-" + (_.sample(dirs)) + ""], [null,null,true])) + ">" + (jade.escape(null == (jade_interp = col) ? "" : jade_interp)) + "</div>");
    }

  }
}).call(this);

buf.push("</div>");
    }

  }
}).call(this);

buf.push("<div class=\"grid-highlights\">");
// iterate (new Array(words.length + 1))
;(function(){
  var $$obj = (new Array(words.length + 1));
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var word = $$obj[i];

buf.push("<div" + (jade.attr("style", "width: " + (size) + "%; height: " + (size) + "%;", true, false)) + (jade.cls(['grid-highlight',"grid-highlight-" + (i) + ""], [null,true])) + "></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var word = $$obj[i];

buf.push("<div" + (jade.attr("style", "width: " + (size) + "%; height: " + (size) + "%;", true, false)) + (jade.cls(['grid-highlight',"grid-highlight-" + (i) + ""], [null,true])) + "></div>");
    }

  }
}).call(this);

buf.push("</div></div></div></div></div><div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"Array" in locals_for_with?locals_for_with.Array:typeof Array!=="undefined"?Array:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"dirs" in locals_for_with?locals_for_with.dirs:typeof dirs!=="undefined"?dirs:undefined,"game" in locals_for_with?locals_for_with.game:typeof game!=="undefined"?game:undefined,"grid" in locals_for_with?locals_for_with.grid:typeof grid!=="undefined"?grid:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"size" in locals_for_with?locals_for_with.size:typeof size!=="undefined"?size:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined,"words" in locals_for_with?locals_for_with.words:typeof words!=="undefined"?words:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/find-a-word/view.coffee", function(exports, require, module) {
var DraggyView, FindAWordView, GameView, HALFTURN, Prefix, QUARTURN, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

GameView = require("views/base/game");

DraggyView = require("views/components/draggy");

Prefix = require("lib/prefix");

HALFTURN = Math.PI / 2;

QUARTURN = Math.PI / 4;

FindAWordView = (function(_super) {
  __extends(FindAWordView, _super);

  function FindAWordView() {
    _ref = FindAWordView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  FindAWordView.prototype.template = require("./template");

  FindAWordView.prototype.fitTextOnResize = false;

  FindAWordView.prototype.fitTextOnRender = false;

  FindAWordView.prototype.orientations = ["verticalUp", "diagonalUp", "horizontal", "diagonal", "vertical", "diagonalBack", "horizontalBack", "diagonalUpBack"];

  FindAWordView.prototype.events = function() {
    return {
      "iostap .btn-done": "endGame"
    };
  };

  FindAWordView.prototype.serialize = function() {
    var data, letters, w, words;
    data = FindAWordView.__super__.serialize.apply(this, arguments);
    words = _.uniq((function() {
      var _i, _len, _ref1, _results;
      _ref1 = data.words;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        w = _ref1[_i];
        _results.push(w.replace(/\s/g, "").toUpperCase());
      }
      return _results;
    })());
    letters = _.uniq(words.join(""));
    if (this.grid == null) {
      this.grid = window.wordfind.newPuzzle(words, {
        letters: letters
      });
    }
    this.solution = window.wordfind.solve(this.grid, words).found;
    data.grid = this.grid;
    return data;
  };

  FindAWordView.prototype.beforeShow = function() {
    var el, emUnit, fontSize, gridSize, t, unitSize, x, y, _i, _len, _ref1, _ref2, _results;
    this.setEl(this.findAll(".grid-highlight"), "highlight");
    el = this.findOne(".grid");
    el.style.width = "";
    fontSize = parseFloat(window.getComputedStyle(this.el).fontSize);
    unitSize = Math.round(el.offsetWidth / this.grid.length);
    gridSize = unitSize * this.grid.length / fontSize;
    emUnit = unitSize / fontSize;
    this.size = unitSize;
    el.style.width = "" + gridSize + "em";
    el.style.height = "" + gridSize + "em";
    el.style.lineHeight = "" + (emUnit * 1.1) + "em";
    _ref1 = this.getEl("highlight");
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      el = _ref1[_i];
      el.style[Prefix("transformOrigin")] = "" + (emUnit / 2) + "em";
      _ref2 = el.dataset, x = _ref2.x, y = _ref2.y, t = _ref2.t;
      if ((x != null) && (y != null) && (t != null)) {
        _results.push(this.transform(el, {
          x: "" + (x * emUnit) + "em",
          y: "" + (y * emUnit) + "em",
          rotate: "" + (t * QUARTURN - HALFTURN) + "rad"
        }));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  FindAWordView.prototype.show = function() {
    FindAWordView.__super__.show.apply(this, arguments);
    this.draggy = new DraggyView({
      el: this.findOne(".grid"),
      isParent: true
    });
    this.listenTo(this.draggy, "drag", this.onDrag);
    this.listenTo(this.draggy, "drop", this.onDrop);
    this.listenTo(this, "resize", this.onResize);
    this.onResize();
    return this.enterGame();
  };

  FindAWordView.prototype.refresh = function() {
    delete this.grid;
    FindAWordView.__super__.refresh.apply(this, arguments);
    return this.beforeShow();
  };

  FindAWordView.prototype.hide = function() {
    return delete this.grid;
  };

  FindAWordView.prototype.onResize = function(e) {
    var _ref1,
      _this = this;
    if (!((e != null ? e.width : void 0) || ((_ref1 = this.currentState) != null ? _ref1.refresh : void 0))) {
      this.el.classList.remove("active");
    }
    this.beforeShow();
    return this.fitText(function() {
      var unitSize;
      unitSize = Math.round(_this.findOne(".grid").offsetWidth / _this.grid.length);
      _this.size = unitSize;
      return window.setTimeout((function() {
        return _this.el.classList.add("active");
      }), 300);
    });
  };

  FindAWordView.prototype.onDrag = function(draggy, isInitial) {
    var baseRotation, el, gs, gw, gx, gy, len, max, rotationDiff, t, x, y;
    el = this.getEl("highlight").item(this.solution.length);
    el.classList.add("active");
    if (isInitial) {
      x = draggy.x, y = draggy.y;
      this.line = {
        theta: 0,
        start: {
          x: Math.floor(x / this.size),
          y: Math.floor(y / this.size)
        }
      };
      this.transform(el, {
        x: this.line.start.x * this.size,
        y: this.line.start.y * this.size
      });
      el.offsetWidth;
      this.setState(true, "dragging");
    } else {
      x = draggy.x, y = draggy.y;
      gs = this.grid.length - 1;
      gx = this.line.start.x;
      gy = this.line.start.y;
      x -= (gx + 0.5) * this.size;
      y -= (gy + 0.5) * this.size;
      t = Math.ceil((draggy.toAngle(x, y) - HALFTURN) / QUARTURN + HALFTURN);
      gw = t % 2 === 0 ? 1 : Math.SQRT2;
      baseRotation = this.line.theta - (this.line.theta % 8);
      rotationDiff = (this.line.theta % 8) - t;
      if (rotationDiff < -5) {
        baseRotation -= 8;
      } else if (rotationDiff === 8) {
        baseRotation += 8;
      }
      max = this.getMaxLength(gx, gy, t);
      len = Math.round((t % 2 === 0 ? Math.max(Math.abs(x), Math.abs(y)) : Math.sqrt(x * x + y * y)) / (gw * this.size));
    }
    this.line.length = Math.max(Math.min(len, max) + 1, 1);
    this.line.theta = (baseRotation || 0) + t;
    this.line.orientation = this.orientations[t % 8];
    this.transform(el, {
      x: this.line.start.x * this.size,
      y: this.line.start.y * this.size,
      rotate: "" + (this.line.theta * QUARTURN - HALFTURN) + "rad"
    });
    el.dataset.x = this.line.start.x;
    el.dataset.y = this.line.start.y;
    el.dataset.t = this.line.theta;
    return el.style.width = "" + ((1 + (this.line.length - 1) * gw) / (gs + 1) * 100) + "%";
  };

  FindAWordView.prototype.onDrop = function(draggy, isReset) {
    var answer, el, letter, letters, word, _i, _len,
      _this = this;
    el = this.getEl("highlight").item(this.solution.length);
    el.classList.remove("active");
    letters = this.getSelection(this.line);
    word = letters.reduce((function(m, e) {
      return m + e.dataset.letter;
    }), "");
    answer = _.find(this.solution, {
      word: word
    });
    if (answer) {
      this.solution = _.without(this.solution, answer);
      el.classList.add("complete");
      for (_i = 0, _len = letters.length; _i < _len; _i++) {
        letter = letters[_i];
        letter.classList.add("complete");
      }
    } else {
      this.transform(el, {
        x: this.line.start.x * this.size,
        y: this.line.start.y * this.size,
        rotate: "" + (this.line.theta * QUARTURN - HALFTURN) + "rad",
        scale: 1.2
      });
      window.setTimeout(function() {
        el.style.width = "";
        return _this.setState(false, "dragging");
      }, 300);
    }
    return this.setState("touched");
  };

  FindAWordView.prototype.getSelection = function(line) {
    var c, i, length, orientation, p, r, x, y, _i, _ref1, _ref2, _results;
    (_ref1 = line.start, x = _ref1.x, y = _ref1.y), orientation = line.orientation, length = line.length;
    _results = [];
    for (i = _i = 0; 0 <= length ? _i < length : _i > length; i = 0 <= length ? ++_i : --_i) {
      p = window.wordfind.orientations[orientation](x, y, i);
      r = Math.floor(p.y * this.grid.length) / this.grid.length;
      c = p.x % this.grid.length;
      _results.push((_ref2 = this.draggy.el.children[r]) != null ? _ref2.children[c] : void 0);
    }
    return _results;
  };

  FindAWordView.prototype.getOrientation = function(theta) {
    return this.orientations[theta % 8];
  };

  FindAWordView.prototype.getMaxLength = function(x, y, theta) {
    var size;
    size = this.grid.length - 1;
    switch (theta % 8) {
      case 1:
        return Math.min(size - x, y);
      case 2:
        return size - x;
      case 3:
        return Math.min(size - x, size - y);
      case 4:
        return size - y;
      case 5:
        return Math.min(x, size - y);
      case 6:
        return x;
      case 7:
        return Math.min(x, y);
      default:
        return y;
    }
  };

  FindAWordView.prototype.isCorrect = function() {
    return this.solution.length === 0;
  };

  FindAWordView.prototype.showAnswer = function() {
    var el, gw, i, letters, orientation, overlap, t, x, y, _i, _len, _ref1, _ref2, _results;
    _ref1 = this.solution;
    _results = [];
    for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
      _ref2 = _ref1[i], x = _ref2.x, y = _ref2.y, overlap = _ref2.overlap, orientation = _ref2.orientation;
      letters = this.getSelection({
        start: {
          x: x,
          y: y
        },
        length: overlap,
        orientation: orientation
      });
      el = this.getEl("highlight").item(i);
      t = this.orientations.indexOf(orientation);
      gw = t % 2 === 0 ? 1 : Math.SQRT2;
      this.transform(el, {
        x: x * this.size,
        y: y * this.size,
        rotate: "" + (t * QUARTURN - HALFTURN) + "rad"
      });
      el.offsetWidth;
      el.classList.add("incorrect");
      _results.push(el.style.width = "" + (overlap / this.grid.length * 100) + "%");
    }
    return _results;
  };

  FindAWordView.prototype.endGame = function() {
    FindAWordView.__super__.endGame.apply(this, arguments);
    return this.submit();
  };

  return FindAWordView;

})(GameView);

module.exports = FindAWordView;
});

;require.register("engine/free-text-contribution/model.yaml", function(exports, require, module) {
module.exports = {"title":"free-text-contribution","display":"Free Text","category":"Peer Learning","description":"Free text input","model":{"question":{"id":{"type":"uuid","hidden":true},"content":{"type":"html"},"min":{"type":"int","display":"Minimum Response Length"}},"prompt":{"type":"html","default":"Type your response"}},"examples":[{"question":{"id":"#GENUUID#","content":"Write your contribution"}}]}
});

;require.register("engine/free-text-contribution/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;

;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/free-text-contribution/view.coffee", function(exports, require, module) {
var FreeTextContributioView, FreeTextView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

FreeTextView = require("../free-text-survey/view");

FreeTextContributioView = (function(_super) {
  __extends(FreeTextContributioView, _super);

  function FreeTextContributioView() {
    _ref = FreeTextContributioView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  FreeTextContributioView.prototype.userInput = function() {
    return {
      contribution: {
        text: this.value,
        question: {
          content: this.options.data.question.content,
          id: this.options.data.question.id
        }
      }
    };
  };

  return FreeTextContributioView;

})(FreeTextView);

module.exports = FreeTextContributioView;
});

;require.register("engine/free-text-survey/model.yaml", function(exports, require, module) {
module.exports = {"title":"free-text-survey","display":"Free text","category":"Survey","description":"Free text input for user feedback","model":{"question":{"id":{"type":"uuid","hidden":true},"content":{"type":"html"},"min":{"type":"int","display":"Minimum Response Length","help":"If you want a response from every learner, set a minimum response length. This is the number of characters they will need to type before they are able to continue.\n"}},"prompt":{"type":"html","default":"Type your response"}},"examples":[{"question":{"id":"#GENUUID#","content":"How would you improve this lesson?"}}]}
});

;require.register("engine/free-text-survey/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (continueBtnText, hasNarration, hasPrompt, i18n, prompt, title) {
buf.push("<div class=\"content-fill\"><div class=\"content-scroll content-ver\"><div class=\"content-scroll-inner\"><div class=\"row block-v-lg clearfix\"><div class=\"col-sm-12 col-lg-10 col-lg-offset-1\"><div class=\"block-v-md slide-title\"><h1 class=\"text-center\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1></div><div class=\"block-v-md\"><div class=\"user-input-container\"><div class=\"user-input text-md block-lg text-prewrap\"></div><div class=\"btn btn-prompt btn-muted\"><div class=\"icon icon-edit\"></div></div></div></div></div></div></div></div></div><div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/free-text-survey/view.coffee", function(exports, require, module) {
var FreeTextView, InputView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

InputView = require("views/input");

FreeTextView = (function(_super) {
  __extends(FreeTextView, _super);

  function FreeTextView() {
    _ref = FreeTextView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  FreeTextView.prototype.template = require("./template");

  FreeTextView.prototype.events = function() {
    return {
      "iostap .content-fill": "focus",
      "iostap .btn-done": "nextSlide"
    };
  };

  FreeTextView.prototype.show = function() {
    return this.listenTo(this, "resize", this.onResize);
  };

  FreeTextView.prototype.beforeShow = function() {
    this.setEl(this.findOne(".user-input"), "input");
    this.trigger("ui", {
      flexibleHeight: true
    });
    if (this.serialize().min === 0) {
      return this.setState("touched");
    }
  };

  FreeTextView.prototype.beforeHide = function() {
    return this.trigger("ui", {
      flexibleHeight: false
    });
  };

  FreeTextView.prototype.onResize = function() {
    return this.beforeShow();
  };

  FreeTextView.prototype.serialize = function() {
    var data;
    data = FreeTextView.__super__.serialize.apply(this, arguments);
    data.title = this.options.data.question.content;
    data.min = this.options.data.question.min;
    if (!(data.min > 0)) {
      data.min = 0;
    }
    data.hasPrompt = true;
    return data;
  };

  FreeTextView.prototype.focus = function() {
    var inputEl, min, prompt, title, _ref1,
      _this = this;
    inputEl = this.getEl("input");
    _ref1 = this.serialize(), title = _ref1.title, min = _ref1.min, prompt = _ref1.prompt;
    if (min === 0) {
      this.changeState(true);
    }
    return $("#text-input-view").off("update").trigger("open", {
      title: title,
      min: min,
      prompt: prompt,
      value: this.value
    }).on("update", function(e, v) {
      return _this.onUpdate(v, inputEl);
    });
  };

  FreeTextView.prototype.userInput = function() {
    return {
      text: this.value,
      question: {
        content: this.options.data.question.content,
        id: this.options.data.question.id
      }
    };
  };

  FreeTextView.prototype.onUpdate = function(value, el) {
    var isComplete;
    this.value = value;
    isComplete = this.value.length >= (this.serialize().min || 0);
    el.textContent = this.value;
    return this.changeState(isComplete);
  };

  FreeTextView.prototype.changeState = function(isComplete) {
    var _ref1;
    this.setState(((_ref1 = this.value) != null ? _ref1.length : void 0) > 0, "has-input");
    return this.setState(isComplete ? "touched" : "prompt");
  };

  return FreeTextView;

})(InputView);

module.exports = FreeTextView;
});

;require.register("engine/game-elevator/components/container.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (all, correct, image, title, undefined) {
buf.push("<div class=\"game-image-title text-center text-bold text-md\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</div><div class=\"game-box-inner content-fill block-v-lg\"><div class=\"row content-fill\"><div class=\"col-md-4 col-sm-4 content-fill\"><div class=\"block-dk content-fill\"><div class=\"block-md game-image-container text-center\"><img" + (jade.attr("src", image, true, false)) + " class=\"game-image\"/></div></div></div><div class=\"col-md-8 col-sm-8 content-fill\"><div class=\"block-flex-ver text-md direction-column\">");
// iterate all
;(function(){
  var $$obj = all;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var attribute = $$obj[i];

buf.push("<div" + (jade.attr("data-is-correct", correct.indexOf(attribute) > -1, true, false)) + (jade.attr("data-index", i, true, false)) + " class=\"btn-attribute block-flex-child block-flex-ver\"><h2 class=\"block-h-md btn-text\">" + (null == (jade_interp = attribute) ? "" : jade_interp) + "</h2></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var attribute = $$obj[i];

buf.push("<div" + (jade.attr("data-is-correct", correct.indexOf(attribute) > -1, true, false)) + (jade.attr("data-index", i, true, false)) + " class=\"btn-attribute block-flex-child block-flex-ver\"><h2 class=\"block-h-md btn-text\">" + (null == (jade_interp = attribute) ? "" : jade_interp) + "</h2></div>");
    }

  }
}).call(this);

buf.push("</div></div></div></div>");}.call(this,"all" in locals_for_with?locals_for_with.all:typeof all!=="undefined"?all:undefined,"correct" in locals_for_with?locals_for_with.correct:typeof correct!=="undefined"?correct:undefined,"image" in locals_for_with?locals_for_with.image:typeof image!=="undefined"?image:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/game-elevator/components/description.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (i18n, paragraphs, undefined) {
buf.push("<div class=\"text-sm-center content-md-ver\"><div class=\"text-md game-description\">");
// iterate paragraphs
;(function(){
  var $$obj = paragraphs;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var p = $$obj[$index];

buf.push("<p>" + (null == (jade_interp = p) ? "" : jade_interp) + "</p>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var p = $$obj[$index];

buf.push("<p>" + (null == (jade_interp = p) ? "" : jade_interp) + "</p>");
    }

  }
}).call(this);

buf.push("</div><div class=\"block-v-md\"><div class=\"btn btn-muted btn-continue\">" + (jade.escape((jade_interp = i18n("buttons.continue")) == null ? '' : jade_interp)) + "</div></div></div>");}.call(this,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"paragraphs" in locals_for_with?locals_for_with.paragraphs:typeof paragraphs!=="undefined"?paragraphs:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/game-elevator/model.yaml", function(exports, require, module) {
module.exports = {"title":"game-elevator","display":"The Elevator Game","category":"Game","features":{"stars":true},"model":{"title":{"type":"html","default":"How would you describe..?"},"description":{"type":"html","default":"Which of these facts matches the product? Tap on the fact when the product is directly over the fact for the most points.\n"},"prompt":{"type":"html","default":"Select the matching attributes"},"images":{"min":3,"max":12,"type":[{"title":{"type":"html"},"image":{"type":"image"},"correct":{"min":1,"max":4,"type":[{"type":"html"}]},"incorrect":{"min":0,"max":4,"default":null,"type":[{"type":"html"}]},"description":{"type":"html"}}],"help":"Add some correct and/or incorrect attributes to for the image. The total number of attributes should be 3 or 4.\n"},"combine":{"type":"boolean","display":"Mix all attributes together","default":true,"help":"Use attributes of other images as incorrect options."},"game":{"timer":{"limit":{"type":"number","default":20000,"display":"Time Limit (ms)"}},"stars":{"min":{"type":"int","default":1000,"display":"1 Star"},"max":{"type":"int","default":10000,"display":"All Stars"},"help":"Number of points required to earn stars."}}},"examples":[{"title":"How would you describe..?","description":"Which of these facts matches the product? Tap on the fact when the product is directly over the fact for the most points.\n","images":[{"title":"Product X","image":"img/examples/product-1.png","correct":["This is the very first, premier product in the range","It’s Classic","Cool blue packaging"],"description":"This is your chance to talk about the product or image. You can list all of its qualities, so everyone is excited and familiar with it.\n"},{"title":"Product Y","image":"img/examples/product-2.png","correct":["It’s the second product","It’s our value pack","Mustard yellow packaging"],"description":"This is your chance to talk about the product or image. You can list all of its qualities, so everyone is excited and familiar with it.\n"},{"title":"Product Z","image":"img/examples/product-3.png","correct":["It’s ultra-slim","It’s mint green","It’s new!"],"description":"This is your chance to talk about the product or image. You can list all of its qualities, so everyone is excited and familiar with it.\n"}]}]}
});

;require.register("engine/game-elevator/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (description, hasStars, i18n, prompt, title) {
buf.push("<div class=\"content-intro content-fill content-fit\"><div class=\"block-v-lg text-center content\"><div class=\"row\"><div class=\"col-sm-12 col-md-8 col-md-offset-2\"><h1 class=\"tight\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"text-lg block-v-lg\">" + (null == (jade_interp = description) ? "" : jade_interp) + "</div><div class=\"btn btn-solid play-game\">" + (jade.escape(null == (jade_interp = i18n("game.play-game")) ? "" : jade_interp)) + "</div></div></div></div></div><div class=\"content-outro\"><div class=\"content-fill\"><div class=\"block-v-lg text-center content\"><h1>" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"row\"><div class=\"col-sm-12 col-md-8 col-md-offset-2\"><div class=\"row\"><div" + (jade.cls(['col-sm-6','col-md-4','block-v-md',hasStars ? "" : "col-md-offset-2"], [null,null,null,true])) + "><div class=\"block-md block-dk\"><h4 class=\"white-dot-text bold-italic\">" + (jade.escape(null == (jade_interp = i18n("game.your-score")) ? "" : jade_interp)) + "</h4><h1 class=\"game-total tight\">?</h1></div></div><div class=\"col-sm-6 col-md-4 block-v-md\"><div class=\"block-md block-dk\"><h4 class=\"grey-dot-text bold-italic\">" + (jade.escape(null == (jade_interp = i18n("game.your-best")) ? "" : jade_interp)) + "</h4><h1 class=\"game-record tight\">?</h1></div></div>");
if ( hasStars)
{
buf.push("<div class=\"col-sm-12 col-md-4 block-v-md\"><div class=\"block-md block-dk\"><h4 class=\"grey-dot-text bold-italic\">" + (jade.escape(null == (jade_interp = i18n("game.your-stars")) ? "" : jade_interp)) + "</h4><h1 class=\"game-stars tight\">?<sup class=\"stars-total\"></sup></h1></div></div>");
}
buf.push("</div><div class=\"row block-v-md\"><div class=\"col-sm-12 col-md-8 col-md-offset-2 block-md\"><div class=\"btn btn-solid btn-block play-game\">" + (jade.escape(null == (jade_interp = i18n("game.play-again")) ? "" : jade_interp)) + "</div></div></div></div></div></div></div><div class=\"slide-footer block-v-lg\"><div class=\"btn btn-muted goto-next fade-in\">" + (jade.escape(null == (jade_interp = i18n("game.move-on")) ? "" : jade_interp)) + "</div></div></div><div class=\"content-playing\"><div class=\"content-fill full-screen\"><div class=\"game-state block-h-lg\"><div class=\"game-state-inner row block-v-lg\"><div class=\"game-state-text col-md-6 col-sm-6\">" + (jade.escape((jade_interp = i18n("game.labels.timer")) == null ? '' : jade_interp)) + "\n&ensp;<strong class=\"game-timer text-lg text-bold\"></strong></div><div class=\"game-state-text col-md-6 col-sm-6 text-right\">" + (jade.escape((jade_interp = i18n("game.labels.score")) == null ? '' : jade_interp)) + "\n&ensp;<strong class=\"game-score text-lg text-bold\"></strong><strong class=\"game-tally\"></strong></div></div></div><div class=\"game-stepper\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div><div class=\"game-bonus-score\"></div><div class=\"game-bonus-time\"></div></div><div class=\"content-fill\"><div class=\"game-box content-fill\"></div></div><div class=\"slide-footer slide-up block-v-lg\"><div class=\"text-uppercase text-bold\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div></div>");}.call(this,"description" in locals_for_with?locals_for_with.description:typeof description!=="undefined"?description:undefined,"hasStars" in locals_for_with?locals_for_with.hasStars:typeof hasStars!=="undefined"?hasStars:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/game-elevator/view.coffee", function(exports, require, module) {
var Device, Easie, GameElevatorView, GameView, Preloader, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

GameView = require("views/base/game");

Preloader = require("lib/preload");

Easie = require("lib/easie");

Device = require("lib/device");

GameElevatorView = (function(_super) {
  __extends(GameElevatorView, _super);

  function GameElevatorView() {
    _ref = GameElevatorView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  GameElevatorView.prototype.requiresTimeLimit = true;

  GameElevatorView.prototype.template = require("./template");

  GameElevatorView.prototype.templates = {
    container: require("./components/container"),
    description: require("./components/description")
  };

  GameElevatorView.prototype.events = function() {
    return {
      "iostap .play-game": "enterGame",
      "iostap .goto-next": "next",
      "iostap .btn-attribute": "checkAnswer",
      "iostap .btn-continue": "hideDescription"
    };
  };

  GameElevatorView.prototype.initializeData = function() {
    var image, images,
      _this = this;
    GameElevatorView.__super__.initializeData.apply(this, arguments);
    this.game.extra.set("fullscreen", true);
    this.game.extra.set("sounds", true);
    images = this.options.data.images;
    images = (images || []).filter(function(i) {
      return (i.image != null) && _.compact(i.correct).length > 0;
    });
    images = images.map(function(i) {
      var p, _i, _len, _ref1;
      _ref1 = ["correct", "incorrect"];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        p = _ref1[_i];
        i[p] = _.compact(i[p]);
      }
      return i;
    });
    this.setArray("variant", images);
    return Preloader.load((function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = images.length; _i < _len; _i++) {
        image = images[_i].image;
        _results.push(image);
      }
      return _results;
    })(), function(errors) {
      if (errors == null) {
        errors = [];
      }
      return _this.setArray("variant", _.reject(images, function(variant, i) {
        return _.include(errors, variant.image);
      }));
    });
  };

  GameElevatorView.prototype.initializeElements = function() {
    GameElevatorView.__super__.initializeElements.apply(this, arguments);
    return this.setEl(this.findOne(".game-box"), "container");
  };

  GameElevatorView.prototype.showNext = function(isInitial) {
    var correct, el, i, incorrect, variant, _i, _len, _ref1,
      _this = this;
    if (!isInitial) {
      this.unpauseGame();
    }
    this.game.timer.timestamp = Date.now();
    variant = this.getRandom("variant");
    correct = variant.correct;
    incorrect = this.options.data.combine ? _.chain(this.getArray("variant")).without(variant).pluck("correct").flatten().value() : variant.incorrect;
    correct = _.sample(correct, 4);
    incorrect = _.sample(incorrect, 4 - correct.length);
    this.getEl("container").innerHTML = this.templates.container({
      title: variant.title,
      image: variant.image,
      correct: variant.correct,
      all: _.chain().union(correct, incorrect).shuffle().value()
    });
    this.setEl(this.getEl("container").querySelector(".game-image-container"), "image");
    this.setEl(this.getEl("container").querySelectorAll(".btn-attribute"), "answers");
    this.transform(this.getEl("image"), {
      opacity: 0,
      x: "-100%"
    });
    _ref1 = this.getEl("answers");
    for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
      el = _ref1[i];
      this.transform(el, {
        opacity: 0,
        x: "100%"
      });
    }
    if (this.getEl("image").firstChild.complete) {
      return this.onImageLoad();
    } else {
      return this.getEl("image").firstChild.onload = function() {
        return _this.onImageLoad();
      };
    }
  };

  GameElevatorView.prototype.onImageLoad = function() {
    var conHeight, el, i, imgHeight, _i, _len, _ref1,
      _this = this;
    conHeight = this.getEl("image").parentNode.offsetHeight;
    imgHeight = this.getEl("image").offsetHeight;
    this.game.extra.set({
      totalHeight: conHeight - imgHeight,
      imageHeight: imgHeight
    });
    this.getEl("container").classList.remove("hide-description");
    this.transform(this.getEl("image"), {
      opacity: 1,
      transition: "all 300ms"
    });
    _ref1 = this.getEl("answers");
    for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
      el = _ref1[i];
      this.transform(el, {
        opacity: 1,
        transition: "all 300ms " + (i * 100) + "ms"
      });
    }
    this.game.extra.set({
      animateImage: false
    });
    return window.setTimeout((function() {
      var _j, _len1, _ref2, _results;
      _this.game.extra.set({
        animateImage: true
      });
      _this.transition(_this.getEl("image"), "");
      _ref2 = _this.getEl("answers");
      _results = [];
      for (i = _j = 0, _len1 = _ref2.length; _j < _len1; i = ++_j) {
        el = _ref2[i];
        _results.push(_this.transition(el, ""));
      }
      return _results;
    }), 600);
  };

  GameElevatorView.prototype.onTimerChange = function(m) {
    var alpha, el, i, percent, position, _i, _len, _ref1, _results;
    GameElevatorView.__super__.onTimerChange.apply(this, arguments);
    if (this.game.extra.get("animateImage") && (m.changed.remaining != null) && (this.getEl("image") != null)) {
      percent = this.getPercent();
      position = this.game.extra.get("totalHeight") * percent;
      this.transform(this.getEl("image"), {
        y: position
      });
      _ref1 = this.getEl("answers");
      _results = [];
      for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
        el = _ref1[i];
        if (!(!el.classList.contains("selected"))) {
          continue;
        }
        alpha = (1 - Math.abs(this.getDist(i, percent))) * 0.4;
        _results.push(el.style.backgroundColor = "rgba(255, 255, 255, " + alpha + ")");
      }
      return _results;
    }
  };

  GameElevatorView.prototype.checkAnswer = function(e) {
    var el, index, isComplete, isCorrect, percent, _ref1;
    if (this.game.timer.get("paused") || this.getEl("container").classList.contains("hide-attributes")) {
      return;
    }
    el = e.currentTarget;
    el.classList.add("selected");
    _ref1 = el.dataset, isCorrect = _ref1.isCorrect, index = _ref1.index;
    isComplete = _.chain(this.getEl("answers")).filter(function(el) {
      return el.dataset.isCorrect && !el.classList.contains("selected");
    }).isEmpty().value();
    if (isCorrect) {
      percent = this.getPercent();
      this.onCorrectAnswer({
        score: 500,
        time: isComplete ? 1000 : 0,
        bonus: this.getBonus(1000, +index, percent),
        tally: true
      });
    } else {
      this.onIncorrectAnswer({
        time: 1000,
        score: 500,
        tally: true
      });
    }
    if (isComplete || !isCorrect) {
      return this.showDescription();
    }
  };

  GameElevatorView.prototype.showDescription = function() {
    var conBounds, descEl, description, el, i, imgBounds, _i, _len, _ref1,
      _this = this;
    _ref1 = this.getEl("answers");
    for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
      el = _ref1[i];
      this.transform(el, {
        opacity: 0,
        x: "100%",
        transition: "all 300ms " + (i * 100) + "ms"
      });
    }
    this.getEl("container").classList.add("hide-attributes");
    this.pauseGame();
    description = this.templates.description({
      paragraphs: this.data.variant.lastValue.description.split(/\n+/)
    });
    descEl = this.getEl("answers").item(0).parentNode;
    imgBounds = this.getEl("image").getBoundingClientRect();
    conBounds = this.getEl("image").parentNode.getBoundingClientRect();
    return window.setTimeout((function() {
      var descW, descX, descY, imgX, imgY, innerH, outerH, outerL, outerW, paddingTop, scale;
      descEl.innerHTML = description;
      if (Device.breakpoint(["xs", "sm"])) {
        scale = 1.5;
        outerL = _this.el.getBoundingClientRect().left;
        outerW = _this.el.offsetWidth;
        outerH = conBounds.height;
        innerH = descEl.firstChild.offsetHeight + imgBounds.height * scale;
        descW = descEl.offsetWidth;
        imgX = outerL + (outerW - imgBounds.width) / 2 - imgBounds.left;
        imgY = (outerH - innerH) / 2;
        descX = outerL + (outerW - descW) / 2 - descEl.getBoundingClientRect().left;
        descY = _this.getEl("image").offsetHeight * scale - descEl.firstChild.offsetTop + imgY;
      } else {
        scale = 1;
        paddingTop = 16;
        imgX = 0;
        imgY = (conBounds.height - imgBounds.height) / 2;
        descX = 0;
        descY = 0;
      }
      _this.transform(_this.getEl("image"), {
        scale: scale,
        x: imgX,
        y: imgY,
        transition: "all 300ms"
      });
      return _this.transform(descEl, {
        x: descX,
        y: descY,
        transition: "all 300ms"
      });
    }), 600);
  };

  GameElevatorView.prototype.hideDescription = function() {
    var _this = this;
    this.getEl("container").classList.add("hide-description");
    return window.setTimeout((function() {
      _this.getEl("container").classList.remove("hide-attributes");
      _this.showNext();
      return _this.game.timer.trigger("count", {
        callback: function() {
          return _this.game.timer.trigger("start", {
            callback: function() {
              return _this.endGame();
            }
          });
        }
      });
    }), 600);
  };

  GameElevatorView.prototype.getDuration = function() {
    return 3000;
  };

  GameElevatorView.prototype.getPercent = function() {
    var circle, duration, timeDiff;
    timeDiff = Date.now() - this.game.timer.timestamp;
    duration = this.getDuration();
    circle = 2 * Math.PI;
    return (1 - Math.sin(timeDiff * circle / duration)) / 2;
  };

  GameElevatorView.prototype.getDist = function(i, percent) {
    return Math.abs(i / (this.getEl("answers").length - 1) - percent);
  };

  GameElevatorView.prototype.getBonus = function(points, i, percent) {
    var dist;
    dist = 1 - this.getDist(i, percent) * 2;
    return Math.floor(dist * points);
  };

  return GameElevatorView;

})(GameView);

module.exports = GameElevatorView;
});

;require.register("engine/game-image-word-match/components/container.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (config, image, prompt, undefined, words) {
jade_mixins["multi-content"] = jade_interp = function(prop, obj){
var block = (this && this.block), attributes = (this && this.attributes) || {};
obj = obj || locals;
switch (obj[prop + "Type"]){
case "image":
buf.push("<div" + (jade.attr("data-content", obj.image, true, false)) + " class=\"multi-content-wrapper multi-content-wrapper-image block-md block-lt\"><div class=\"block-sm multi-content-media\"><img" + (jade.attr("src", obj[prop], true, false)) + " class=\"multi-content multi-content-image\"/></div></div>");
  break;
case "video":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-video block-md block-lt\"><div class=\"block-sm multi-content-media\"><video" + (jade.attr("src", obj[prop], true, false)) + " webkit-playsinline=\"webkit-playsinline\" playsinline=\"playsinline\" preload=\"auto\" controls=\"controls\"" + (jade.attr("dir", config.direction, true, false)) + " class=\"video-js multi-content multi-content-video block-dk\"></video></div></div>");
  break;
case "audio":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-audio block-md block-lt\"><div class=\"block-sm multi-content-media\"><audio" + (jade.attr("src", obj[prop], true, false)) + " webkit-playsinline=\"webkit-playsinline\" playsinline=\"playsinline\" preload=\"auto\" controls=\"controls\"" + (jade.attr("dir", config.direction, true, false)) + " class=\"multi-content multi-content-audio block-dk\"></audio></div></div>");
  break;
case "iframe":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-iframe block-md block-lt\"><div class=\"block-sm multi-content-iframe\">");
var iframe = obj[prop].match(/<iframe[^<]*<\/iframe>/)
if ( iframe)
{
buf.push(null == (jade_interp = iframe[0].replace(/ (width|height)=["'\d\w]+/g, "")) ? "" : jade_interp);
}
buf.push("</div></div>");
  break;
default:
buf.push("<span class=\"multi-content multi-content-text\">" + (null == (jade_interp = obj[prop]) ? "" : jade_interp) + "</span>");
  break;
}
};
buf.push("<div class=\"match-top block-v-md block-h-xl\"><div class=\"text-center match-top-content\"><h4 class=\"block-v-md match-prompt text-md\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</h4><div class=\"match-image-container block-v-md text-center block-lt\"><h1 class=\"match-image\">");
jade_mixins["multi-content"]("image", image);
buf.push("</h1></div></div></div><div class=\"match-words clearfix text-lg\">");
// iterate words
;(function(){
  var $$obj = words;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var word = $$obj[i];

buf.push("<div" + (jade.attr("data-answer", word, true, false)) + (jade.attr("data-is-correct", word === image.title, true, false)) + (jade.cls(['btn-word','text-center',"delay-" + (i) + ""], [null,null,true])) + ">" + (null == (jade_interp = word) ? "" : jade_interp) + "</div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var word = $$obj[i];

buf.push("<div" + (jade.attr("data-answer", word, true, false)) + (jade.attr("data-is-correct", word === image.title, true, false)) + (jade.cls(['btn-word','text-center',"delay-" + (i) + ""], [null,null,true])) + ">" + (null == (jade_interp = word) ? "" : jade_interp) + "</div>");
    }

  }
}).call(this);

buf.push("</div>");}.call(this,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined,"image" in locals_for_with?locals_for_with.image:typeof image!=="undefined"?image:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined,"words" in locals_for_with?locals_for_with.words:typeof words!=="undefined"?words:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/game-image-word-match/model.yaml", function(exports, require, module) {
module.exports = {"title":"game-image-word-match","display":"Image/Word Match","category":"Game","features":{"stars":true},"model":{"title":{"type":"html","default":"Match the image to the word"},"description":{"type":"html","default":"Select the correct word related to the image. Speed and accuracy will score you the most points.\n"},"prompt":{"type":"html","default":"Select the word that matches the image"},"images":{"min":3,"max":20,"type":[{"image":{"types":["image","text"],"display":"Content"},"title":{"type":"html"}}]},"game":{"timer":{"limit":{"type":"number","default":20000,"display":"Time Limit (ms)"}},"stars":{"min":{"type":"int","default":1000,"display":"1 Star"},"max":{"type":"int","default":10000,"display":"All Stars"},"help":"Number of points required to earn stars."}}},"examples":[{"images":[{"image":"Some Text","imageType":"text","title":"Product X"},{"image":"img/examples/product-2.png","imageType":"image","title":"Product Y"},{"image":"img/examples/product-3.png","imageType":"image","title":"Product Z"}],"challenge_configuration":{"nb_stars":5},"title":"Match the image to the word","description":"Select the correct word related to the image. Speed and accuracy will score you the most points.\n","prompt":"Select the word that matches the image"}]}
});

;require.register("engine/game-image-word-match/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (description, hasStars, i18n, title) {
buf.push("<div class=\"content-intro content-fill content-fit\"><div class=\"block-v-lg text-center content\"><div class=\"row\"><div class=\"col-sm-12 col-md-8 col-md-offset-2\"><h1 class=\"tight\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"text-lg block-v-lg\">" + (null == (jade_interp = description) ? "" : jade_interp) + "</div><div class=\"btn btn-solid play-game\">" + (jade.escape(null == (jade_interp = i18n("game.play-game")) ? "" : jade_interp)) + "</div></div></div></div></div><div class=\"content-outro\"><div class=\"content-fill\"><div class=\"block-v-lg text-center content\"><h1>" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"row\"><div class=\"col-sm-12 col-md-8 col-md-offset-2\"><div class=\"row\"><div" + (jade.cls(['col-sm-6','col-md-4','block-v-md',hasStars ? "" : "col-md-offset-2"], [null,null,null,true])) + "><div class=\"block-md block-dk\"><h4 class=\"white-dot-text bold-italic\">" + (jade.escape(null == (jade_interp = i18n("game.your-score")) ? "" : jade_interp)) + "</h4><h1 class=\"game-total tight\">?</h1></div></div><div class=\"col-sm-6 col-md-4 block-v-md\"><div class=\"block-md block-dk\"><h4 class=\"grey-dot-text bold-italic\">" + (jade.escape(null == (jade_interp = i18n("game.your-best")) ? "" : jade_interp)) + "</h4><h1 class=\"game-record tight\">?</h1></div></div>");
if ( hasStars)
{
buf.push("<div class=\"col-sm-12 col-md-4 block-v-md\"><div class=\"block-md block-dk\"><h4 class=\"grey-dot-text bold-italic\">" + (jade.escape(null == (jade_interp = i18n("game.your-stars")) ? "" : jade_interp)) + "</h4><h1 class=\"game-stars tight\">?<sup class=\"stars-total\"></sup></h1></div></div>");
}
buf.push("</div><div class=\"row block-v-md\"><div class=\"col-sm-12 col-md-8 col-md-offset-2 block-md\"><div class=\"btn btn-solid btn-block play-game\">" + (jade.escape(null == (jade_interp = i18n("game.play-again")) ? "" : jade_interp)) + "</div></div></div></div></div></div></div><div class=\"slide-footer block-v-lg\"><div class=\"btn btn-muted goto-next fade-in\">" + (jade.escape(null == (jade_interp = i18n("game.move-on")) ? "" : jade_interp)) + "</div></div></div><div class=\"content-playing\"><div class=\"full-screen\"><div class=\"game-state block-h-lg\"><div class=\"game-state-inner row block-v-lg\"><div class=\"game-state-text col-md-6 col-sm-6\">" + (jade.escape((jade_interp = i18n("game.labels.timer")) == null ? '' : jade_interp)) + "\n&ensp;<strong class=\"game-timer text-lg text-bold\"></strong></div><div class=\"game-state-text col-md-6 col-sm-6 text-right\">" + (jade.escape((jade_interp = i18n("game.labels.score")) == null ? '' : jade_interp)) + "\n&ensp;<strong class=\"game-score text-lg text-bold\"></strong><strong class=\"game-tally\"></strong></div></div></div><div class=\"game-stepper\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div><div class=\"game-bonus-score\"></div><div class=\"game-bonus-time\"></div><div class=\"game-box content-fill\"></div></div></div>");}.call(this,"description" in locals_for_with?locals_for_with.description:typeof description!=="undefined"?description:undefined,"hasStars" in locals_for_with?locals_for_with.hasStars:typeof hasStars!=="undefined"?hasStars:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/game-image-word-match/view.coffee", function(exports, require, module) {
var GameImageWordMatchView, GameView, Preloader, container, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

GameView = require("views/base/game");

container = require("./components/container");

Preloader = require("lib/preload");

GameImageWordMatchView = (function(_super) {
  __extends(GameImageWordMatchView, _super);

  function GameImageWordMatchView() {
    _ref = GameImageWordMatchView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  GameImageWordMatchView.prototype.requiresTimeLimit = true;

  GameImageWordMatchView.prototype.template = require("./template");

  GameImageWordMatchView.prototype.events = function() {
    return {
      "iostap .play-game": "enterGame",
      "iostap .goto-next": "next",
      "iostap  .btn-word": "checkAnswer"
    };
  };

  GameImageWordMatchView.prototype.initializeData = function() {
    var images, toLoad,
      _this = this;
    GameImageWordMatchView.__super__.initializeData.apply(this, arguments);
    this.game.extra.set("fullscreen", true);
    this.game.extra.set("sounds", true);
    images = _.chain(this.options.data.images).map(function(m) {
      if (!m.imageType || m.imageType === "") {
        m.imageType = "image";
      }
      return m;
    }).filter(function(m) {
      return m.title && m.title !== "";
    }).value();
    this.setArray(images, "images");
    toLoad = _.chain(images).where({
      imageType: "image"
    }).pluck("image").value();
    if (!toLoad.length) {
      return;
    }
    return Preloader.load(toLoad, function(errors) {
      return _this.setArray(_.reject(images, function(m) {
        return errors.indexOf(m.image) > -1;
      }), "images");
    });
  };

  GameImageWordMatchView.prototype.initializeElements = function() {
    GameImageWordMatchView.__super__.initializeElements.apply(this, arguments);
    return this.setEl(this.findOne(".game-box"), "container");
  };

  GameImageWordMatchView.prototype.startGame = function() {
    this.game.timer.timestamp = Date.now();
    return GameImageWordMatchView.__super__.startGame.apply(this, arguments);
  };

  GameImageWordMatchView.prototype.showNext = function(isFirstRun) {
    var image;
    image = this.getRandom("images");
    this.game.timer.timestamp = Date.now();
    this.getEl("container").innerHTML = container(_.extend({}, this.options.data, {
      image: image,
      words: _.chain(this.getArray("images")).pluck("title").without(image.title).uniq().sample(2).concat(image.title).shuffle().value()
    }));
    this.getEl("container").offsetTop;
    return this.getEl("container").classList.remove("hidden");
  };

  GameImageWordMatchView.prototype.checkAnswer = function(e) {
    var bonus, isCorrect, word, _ref1,
      _this = this;
    if (this.game.timer.get("paused")) {
      return;
    }
    _ref1 = e.currentTarget.dataset, word = _ref1.word, isCorrect = _ref1.isCorrect;
    if (isCorrect != null) {
      bonus = this.getBonus(this.game.timer.timestamp - Date.now());
      this.onCorrectAnswer({
        score: 500,
        time: 1000,
        bonus: bonus,
        tally: true
      });
    } else {
      this.onIncorrectAnswer({
        time: 300,
        bonus: bonus,
        tally: true
      });
    }
    this.getEl("container").classList.add("hidden");
    return window.setTimeout((function() {
      return _this.showNext();
    }), 1200);
  };

  return GameImageWordMatchView;

})(GameView);

module.exports = GameImageWordMatchView;
});

;require.register("engine/game-jeopardy/components/menu.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (categories, undefined) {
var col = 12 / categories.length;
var klass = "col-sm-" + col + " col-md-" + col;
buf.push("<div class=\"content-ver block-v-md\"><div class=\"row text-center\">");
// iterate categories
;(function(){
  var $$obj = categories;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var category = $$obj[i];

buf.push("<h2" + (jade.cls(['tight','game-category-title',klass], [null,null,true])) + "><div class=\"content-ver\">" + (null == (jade_interp = category.title) ? "" : jade_interp) + "</div></h2>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var category = $$obj[i];

buf.push("<h2" + (jade.cls(['tight','game-category-title',klass], [null,null,true])) + "><div class=\"content-ver\">" + (null == (jade_interp = category.title) ? "" : jade_interp) + "</div></h2>");
    }

  }
}).call(this);

buf.push("</div><div class=\"row text-center\">");
// iterate categories
;(function(){
  var $$obj = categories;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var category = $$obj[i];

buf.push("<div" + (jade.cls(['game-category',klass], [null,true])) + "><div class=\"block-v-sm\">");
// iterate category.questions
;(function(){
  var $$obj = category.questions;
  if ('number' == typeof $$obj.length) {

    for (var j = 0, $$l = $$obj.length; j < $$l; j++) {
      var question = $$obj[j];

buf.push("<div" + (jade.attr("data-category", i, true, false)) + (jade.attr("data-question", j, true, false)) + " class=\"btn-question block-v-sm\"><div" + (jade.cls(['block-md','block-dk',"stars-" + (j + 1) + ""], [null,null,true])) + "><div class=\"text-lg\">" + (jade.escape(null == (jade_interp = (j + 1) * 200) ? "" : jade_interp)) + "</div></div></div>");
    }

  } else {
    var $$l = 0;
    for (var j in $$obj) {
      $$l++;      var question = $$obj[j];

buf.push("<div" + (jade.attr("data-category", i, true, false)) + (jade.attr("data-question", j, true, false)) + " class=\"btn-question block-v-sm\"><div" + (jade.cls(['block-md','block-dk',"stars-" + (j + 1) + ""], [null,null,true])) + "><div class=\"text-lg\">" + (jade.escape(null == (jade_interp = (j + 1) * 200) ? "" : jade_interp)) + "</div></div></div>");
    }

  }
}).call(this);

buf.push("</div></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var category = $$obj[i];

buf.push("<div" + (jade.cls(['game-category',klass], [null,true])) + "><div class=\"block-v-sm\">");
// iterate category.questions
;(function(){
  var $$obj = category.questions;
  if ('number' == typeof $$obj.length) {

    for (var j = 0, $$l = $$obj.length; j < $$l; j++) {
      var question = $$obj[j];

buf.push("<div" + (jade.attr("data-category", i, true, false)) + (jade.attr("data-question", j, true, false)) + " class=\"btn-question block-v-sm\"><div" + (jade.cls(['block-md','block-dk',"stars-" + (j + 1) + ""], [null,null,true])) + "><div class=\"text-lg\">" + (jade.escape(null == (jade_interp = (j + 1) * 200) ? "" : jade_interp)) + "</div></div></div>");
    }

  } else {
    var $$l = 0;
    for (var j in $$obj) {
      $$l++;      var question = $$obj[j];

buf.push("<div" + (jade.attr("data-category", i, true, false)) + (jade.attr("data-question", j, true, false)) + " class=\"btn-question block-v-sm\"><div" + (jade.cls(['block-md','block-dk',"stars-" + (j + 1) + ""], [null,null,true])) + "><div class=\"text-lg\">" + (jade.escape(null == (jade_interp = (j + 1) * 200) ? "" : jade_interp)) + "</div></div></div>");
    }

  }
}).call(this);

buf.push("</div></div>");
    }

  }
}).call(this);

buf.push("</div></div>");}.call(this,"categories" in locals_for_with?locals_for_with.categories:typeof categories!=="undefined"?categories:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/game-jeopardy/components/question.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (answers, i18n, question, stars) {
buf.push("<div class=\"content-ver text-center\"><div class=\"text-md block-v-lg\"><h2>" + (null == (jade_interp = question.content) ? "" : jade_interp) + "</h2></div><div class=\"block-v-md row\"><div class=\"col-md-3 col-md-offset-3 col-sm-6\"><div" + (jade.attr("data-question-id", question.id, true, false)) + (jade.attr("data-answer-id", answers.false.id, true, false)) + (jade.attr("data-is-correct", (answers.false.correct), true, false)) + (jade.attr("data-stars", stars, true, false)) + " class=\"btn btn-solid btn-block btn-check\">" + (jade.escape(null == (jade_interp = i18n("game-jeopardy.is-false")) ? "" : jade_interp)) + "</div></div><div class=\"col-md-3 col-sm-6\"><div" + (jade.attr("data-question-id", question.id, true, false)) + (jade.attr("data-answer-id", answers.true.id, true, false)) + (jade.attr("data-is-correct", (answers.true.correct), true, false)) + (jade.attr("data-stars", stars, true, false)) + " class=\"btn btn-solid btn-block btn-check\">" + (jade.escape(null == (jade_interp = i18n("game-jeopardy.is-true")) ? "" : jade_interp)) + "</div></div></div></div>");}.call(this,"answers" in locals_for_with?locals_for_with.answers:typeof answers!=="undefined"?answers:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"question" in locals_for_with?locals_for_with.question:typeof question!=="undefined"?question:undefined,"stars" in locals_for_with?locals_for_with.stars:typeof stars!=="undefined"?stars:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/game-jeopardy/model.yaml", function(exports, require, module) {
module.exports = {"title":"game-jeopardy","display":"Jeopardy","category":"Game","features":{"stars":true},"model":{"title":{"type":"html","default":"Jeopardy"},"description":{"type":"html","default":"How many stars can you earn? Choose questions from one of three topics. Harder questions will earn you more stars, but answer any question incorrectly and it’s game over!\n"},"prompt":{"type":"html","default":"Select a question from any category"},"categories":{"min":3,"max":3,"type":[{"title":{"type":"html","display":"Category"},"questions":{"min":5,"max":5,"type":[{"mix":{"min":1,"max":3,"type":[{"text":{"type":"html"},"true":{"type":"boolean","display":"Correct"}}]}}]},"help":"Add at least five questions to each category, starting with the easiest worth 200 points.\n"}]},"game":{"timer":{"limit":{"type":"number","default":20000,"display":"Time Limit (ms)"}},"stars":{"min":{"type":"int","default":1000,"display":"1 Star"},"max":{"type":"int","default":9000,"display":"All Stars"},"help":"Number of points required to earn stars."}}},"examples":[{"title":"Jeopardy","description":"How many stars can you earn? Choose questions from one of three topics. Harder questions will earn you more stars, but answer any question incorrectly and it’s game over!\n","prompt":"Select a question from any category","categories":[{"title":"Category 1","questions":[{"mix":[{"text":"Question 1","true":true},{"text":"Question 2","true":false},{"text":"Question 3","true":true}]},{"mix":[{"text":"Question 1","true":true},{"text":"Question 2","true":false},{"text":"Question 3","true":true}]},{"mix":[{"text":"Question 1","true":true},{"text":"Question 2","true":false},{"text":"Question 3","true":true}]},{"mix":[{"text":"Question 1","true":true},{"text":"Question 2","true":false},{"text":"Question 3","true":true}]},{"mix":[{"text":"Question 1","true":true},{"text":"Question 2","true":false},{"text":"Question 3","true":true}]}]},{"title":"Category 2","questions":[{"mix":[{"text":"Question 1","true":true},{"text":"Question 2","true":false},{"text":"Question 3","true":true}]},{"mix":[{"text":"Question 1","true":true},{"text":"Question 2","true":false},{"text":"Question 3","true":true}]},{"mix":[{"text":"Question 1","true":true},{"text":"Question 2","true":false},{"text":"Question 3","true":true}]},{"mix":[{"text":"Question 1","true":true},{"text":"Question 2","true":false},{"text":"Question 3","true":true}]},{"mix":[{"text":"Question 1","true":true},{"text":"Question 2","true":false},{"text":"Question 3","true":true}]}]},{"title":"Category 3","questions":[{"mix":[{"text":"Question 1","true":true},{"text":"Question 2","true":false},{"text":"Question 3","true":true}]},{"mix":[{"text":"Question 1","true":true},{"text":"Question 2","true":false},{"text":"Question 3","true":true}]},{"mix":[{"text":"Question 1","true":true},{"text":"Question 2","true":false},{"text":"Question 3","true":true}]},{"mix":[{"text":"Question 1","true":true},{"text":"Question 2","true":false},{"text":"Question 3","true":true}]},{"mix":[{"text":"Question 1","true":true},{"text":"Question 2","true":false},{"text":"Question 3","true":true}]}]}]}]}
});

;require.register("engine/game-jeopardy/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (description, hasStars, i18n, prompt, title) {
buf.push("<div class=\"content-intro content-fill content-fit\"><div class=\"block-v-lg text-center content\"><div class=\"row\"><div class=\"col-sm-12 col-md-8 col-md-offset-2\"><h1 class=\"tight\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"text-lg block-v-lg\">" + (null == (jade_interp = description) ? "" : jade_interp) + "</div><div class=\"btn btn-solid play-game\">" + (jade.escape(null == (jade_interp = i18n("game.play-game")) ? "" : jade_interp)) + "</div></div></div></div></div><div class=\"content-outro\"><div class=\"content-fill\"><div class=\"block-v-lg text-center content\"><h1>" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"row\"><div class=\"col-sm-12 col-md-8 col-md-offset-2\"><div class=\"row\"><div" + (jade.cls(['col-sm-6','col-md-4','block-v-md',hasStars ? "" : "col-md-offset-2"], [null,null,null,true])) + "><div class=\"block-md block-dk\"><h4 class=\"white-dot-text bold-italic\">" + (jade.escape(null == (jade_interp = i18n("game.your-score")) ? "" : jade_interp)) + "</h4><h1 class=\"game-total tight\">?</h1></div></div><div class=\"col-sm-6 col-md-4 block-v-md\"><div class=\"block-md block-dk\"><h4 class=\"grey-dot-text bold-italic\">" + (jade.escape(null == (jade_interp = i18n("game.your-best")) ? "" : jade_interp)) + "</h4><h1 class=\"game-record tight\">?</h1></div></div>");
if ( hasStars)
{
buf.push("<div class=\"col-sm-12 col-md-4 block-v-md\"><div class=\"block-md block-dk\"><h4 class=\"grey-dot-text bold-italic\">" + (jade.escape(null == (jade_interp = i18n("game.your-stars")) ? "" : jade_interp)) + "</h4><h1 class=\"game-stars tight\">?<sup class=\"stars-total\"></sup></h1></div></div>");
}
buf.push("</div><div class=\"row block-v-md\"><div class=\"col-sm-12 col-md-8 col-md-offset-2 block-md\"><div class=\"btn btn-solid btn-block play-game\">" + (jade.escape(null == (jade_interp = i18n("game.play-again")) ? "" : jade_interp)) + "</div></div></div></div></div></div></div><div class=\"slide-footer block-v-lg\"><div class=\"btn btn-muted goto-next fade-in\">" + (jade.escape(null == (jade_interp = i18n("game.move-on")) ? "" : jade_interp)) + "</div></div></div><div class=\"content-playing\"><div class=\"full-screen content-fill\"><div class=\"game-state block-h-lg\"><div class=\"game-state-inner row block-v-lg\"><div class=\"game-state-text col-md-6 col-sm-6\">" + (jade.escape((jade_interp = i18n("game.labels.timer")) == null ? '' : jade_interp)) + "\n&ensp;<strong class=\"game-timer text-lg text-bold\"></strong></div><div class=\"game-state-text col-md-6 col-sm-6 text-right\">" + (jade.escape((jade_interp = i18n("game.labels.score")) == null ? '' : jade_interp)) + "\n&ensp;<strong class=\"game-score text-lg text-bold\"></strong><strong class=\"game-tally\"></strong></div></div></div><div class=\"game-stepper\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div><div class=\"game-bonus-score\"></div><div class=\"game-bonus-time\"></div></div><div class=\"content-fill\"><div class=\"game-box content-fill\"><div class=\"game-menu content-fill\"></div><div class=\"game-question content-fill\"></div></div></div><div class=\"slide-footer slide-up block-v-lg\"><div class=\"slide-footer-prompt text-bold text-uppercase\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div></div>");}.call(this,"description" in locals_for_with?locals_for_with.description:typeof description!=="undefined"?description:undefined,"hasStars" in locals_for_with?locals_for_with.hasStars:typeof hasStars!=="undefined"?hasStars:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/game-jeopardy/view.coffee", function(exports, require, module) {
var Easie, GameJeopardyView, GameView, Preloader, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

GameView = require("views/base/game");

Preloader = require("lib/preload");

Easie = require("lib/easie");

GameJeopardyView = (function(_super) {
  __extends(GameJeopardyView, _super);

  function GameJeopardyView() {
    _ref = GameJeopardyView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  GameJeopardyView.prototype.requiresTimeLimit = true;

  GameJeopardyView.prototype.templates = {
    "default": require("./template"),
    menu: require("./components/menu"),
    question: require("./components/question")
  };

  GameJeopardyView.prototype.events = function() {
    return {
      "iostap .play-game": "enterGame",
      "iostap .goto-next": "next",
      "iostap .btn-question": "showQuestion",
      "iostap .btn-check": "checkAnswer"
    };
  };

  GameJeopardyView.prototype.initializeData = function() {
    var categories, category, data, i, j, metadata, mix, q, _base, _i, _j, _k, _len, _len1, _len2, _ref1, _ref2, _ref3;
    GameJeopardyView.__super__.initializeData.apply(this, arguments);
    this.guesses = [];
    this.game.extra.set("fullscreen", true);
    this.game.extra.set("sounds", true);
    _ref1 = this.options, metadata = _ref1.metadata, data = _ref1.data;
    categories = _.chain(metadata.questions).groupBy(function(_arg) {
      var question;
      question = _arg.question;
      return question.category;
    }).map(function(unOrderedQuestions, title) {
      return {
        title: title,
        unOrderedQuestions: unOrderedQuestions
      };
    }).value();
    for (i = _i = 0, _len = categories.length; _i < _len; i = ++_i) {
      category = categories[i];
      categories[i].questions = [];
      _ref3 = (_ref2 = data.categories[i]) != null ? _ref2.questions : void 0;
      for (j = _j = 0, _len1 = _ref3.length; _j < _len1; j = ++_j) {
        mix = _ref3[j].mix;
        if ((_base = categories[i].questions)[j] == null) {
          _base[j] = {
            mix: []
          };
        }
        for (_k = 0, _len2 = mix.length; _k < _len2; _k++) {
          q = mix[_k];
          categories[i].questions[j].mix.push(categories[i].unOrderedQuestions.shift());
        }
      }
    }
    this.questionsDict = _.chain(metadata.questions).pluck('question').indexBy('id').value();
    this.answersDict = _.chain(metadata.questions).pluck('answers').flatten().indexBy('id').value();
    return this.setArray("categories", categories);
  };

  GameJeopardyView.prototype.initializeElements = function() {
    GameJeopardyView.__super__.initializeElements.apply(this, arguments);
    this.setEl(this.findOne(".game-menu"), "menu");
    return this.setEl(this.findOne(".game-question"), "question");
  };

  GameJeopardyView.prototype.showNext = function(isInitial) {
    this.getEl("menu").innerHTML = this.templates.menu({
      categories: this.getArray("categories")
    });
    return this.setEl(this.getEl("menu").querySelectorAll(".btn-question"), "questions");
  };

  GameJeopardyView.prototype.showQuestion = function(e) {
    var category, falseAnswer, question, questions, randomQuestion, trueAnswer, _ref1, _ref2;
    if (this.game.timer.get("paused")) {
      return;
    }
    _ref1 = e.currentTarget.dataset, category = _ref1.category, question = _ref1.question;
    questions = this.getArray("categories")[parseInt(category)].questions[parseInt(question)].mix;
    randomQuestion = _.sample(questions);
    _ref2 = _.partition(randomQuestion.answers, function(a) {
      return a.content;
    }), trueAnswer = _ref2[0], falseAnswer = _ref2[1];
    [trueAnswer, falseAnswer].map(function(a) {
      return a[0].content = a[0].content.toString();
    });
    e.currentTarget.classList.add("question-answered");
    this.getEl("question").innerHTML = this.templates.question({
      question: randomQuestion.question,
      answers: {
        "true": trueAnswer[0],
        "false": falseAnswer[0]
      },
      stars: +question + 1
    });
    this.getEl("question").offsetLeft;
    return this.el.classList.add("show-question");
  };

  GameJeopardyView.prototype.checkAnswer = function(e) {
    var answer, answerId, el, isComplete, isCorrect, question, questionId, stars, _ref1;
    el = e.currentTarget;
    _ref1 = el.dataset, questionId = _ref1.questionId, answerId = _ref1.answerId, stars = _ref1.stars;
    question = this.questionsDict[questionId];
    answer = this.answersDict[answerId];
    this.guesses.push(question, answer);
    if (this.game.timer.get("paused") || !this.el.classList.contains("show-question")) {
      return;
    }
    this.el.classList.remove("show-question");
    isCorrect = answer != null ? answer.correct : void 0;
    isComplete = _.chain(this.getEl("questions")).filter(function(el) {
      return !el.classList.contains("question-answered");
    }).isEmpty().value();
    if (isCorrect) {
      this.onCorrectAnswer({
        score: 200 * stars,
        time: 4000,
        tally: true
      });
    }
    if (isComplete || !isCorrect) {
      return this.endGame();
    }
  };

  GameJeopardyView.prototype.answerDetails = function() {
    var _ref1, _ref2, _ref3;
    if (((_ref1 = this.options) != null ? (_ref2 = _ref1.metadata) != null ? (_ref3 = _ref2.questions) != null ? _ref3.length : void 0 : void 0 : void 0) > 0) {
      return this.guesses;
    } else {
      return [];
    }
  };

  return GameJeopardyView;

})(GameView);

module.exports = GameJeopardyView;
});

;require.register("engine/game-jumble/components/container.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (Array, complete, i18n, ids, image, letters, undefined, word) {
var klass = "jumble-answer-" + word.toLowerCase();
var multiline = /[\s-]/.test(word) && word.length > 7;
if (multiline) klass += " multiline";
buf.push("<div class=\"jumble-top\"><div class=\"jumble-top-content block-h-xl\"><div class=\"block-v-md\"><div class=\"jumble-image-container block-lt block-v-sm\"><img" + (jade.attr("src", image, true, false)) + " class=\"jumble-image content-ver\"/><div class=\"jumble-masks\">");
// iterate (new Array(60))
;(function(){
  var $$obj = (new Array(60));
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var m = $$obj[$index];

buf.push("<div class=\"jumble-mask\"></div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var m = $$obj[$index];

buf.push("<div class=\"jumble-mask\"></div>");
    }

  }
}).call(this);

buf.push("</div></div></div><div" + (jade.cls(['jumble-answer','block-v-sm',klass], [null,null,true])) + ">");
// iterate word
;(function(){
  var $$obj = word;
  if ('number' == typeof $$obj.length) {

    for (var j = 0, $$l = $$obj.length; j < $$l; j++) {
      var letter = $$obj[j];

var i = complete.indexOf(letter);
if ( /[\s-]/.test(letter))
{
if ( multiline)
{
if ( letter != " ")
{
buf.push("<div class=\"droppy-complete\">" + (jade.escape(null == (jade_interp = letter) ? "" : jade_interp)) + "</div><div class=\"line-br-sm\"></div>");
}
else
{
buf.push("<br/>");
}
}
else
{
buf.push("<div class=\"droppy-complete\">&nbsp;</div>");
}
}
else if ( i > -1)
{
complete[i] = null;
buf.push("<div class=\"droppy-complete\"><div class=\"letter\">" + (jade.escape(null == (jade_interp = letter) ? "" : jade_interp)) + "</div></div>");
}
else
{
buf.push("<div" + (jade.attr("data-letter", letter, true, false)) + " class=\"droppy\"><div class=\"letter\">&nbsp;</div></div>");
}
    }

  } else {
    var $$l = 0;
    for (var j in $$obj) {
      $$l++;      var letter = $$obj[j];

var i = complete.indexOf(letter);
if ( /[\s-]/.test(letter))
{
if ( multiline)
{
if ( letter != " ")
{
buf.push("<div class=\"droppy-complete\">" + (jade.escape(null == (jade_interp = letter) ? "" : jade_interp)) + "</div><div class=\"line-br-sm\"></div>");
}
else
{
buf.push("<br/>");
}
}
else
{
buf.push("<div class=\"droppy-complete\">&nbsp;</div>");
}
}
else if ( i > -1)
{
complete[i] = null;
buf.push("<div class=\"droppy-complete\"><div class=\"letter\">" + (jade.escape(null == (jade_interp = letter) ? "" : jade_interp)) + "</div></div>");
}
else
{
buf.push("<div" + (jade.attr("data-letter", letter, true, false)) + " class=\"droppy\"><div class=\"letter\">&nbsp;</div></div>");
}
    }

  }
}).call(this);

buf.push("</div></div></div><div class=\"jumble-letters block-md clearfix\"><h4 class=\"jumble-prompt text-md-left block-sm\">" + (jade.escape((jade_interp = i18n("game-jumble.drag-letters")) == null ? '' : jade_interp)) + "</h4>");
// iterate letters
;(function(){
  var $$obj = letters;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var letter = $$obj[i];

buf.push("<div" + (jade.attr("data-id", ids[i], true, false)) + (jade.attr("data-letter", letter, true, false)) + (jade.cls(['draggy','bold',"draggy-" + (i) + ""], [null,null,true])) + "><div class=\"letter\">" + (jade.escape(null == (jade_interp = letter) ? "" : jade_interp)) + "</div></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var letter = $$obj[i];

buf.push("<div" + (jade.attr("data-id", ids[i], true, false)) + (jade.attr("data-letter", letter, true, false)) + (jade.cls(['draggy','bold',"draggy-" + (i) + ""], [null,null,true])) + "><div class=\"letter\">" + (jade.escape(null == (jade_interp = letter) ? "" : jade_interp)) + "</div></div>");
    }

  }
}).call(this);

buf.push("</div>");}.call(this,"Array" in locals_for_with?locals_for_with.Array:typeof Array!=="undefined"?Array:undefined,"complete" in locals_for_with?locals_for_with.complete:typeof complete!=="undefined"?complete:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"ids" in locals_for_with?locals_for_with.ids:typeof ids!=="undefined"?ids:undefined,"image" in locals_for_with?locals_for_with.image:typeof image!=="undefined"?image:undefined,"letters" in locals_for_with?locals_for_with.letters:typeof letters!=="undefined"?letters:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined,"word" in locals_for_with?locals_for_with.word:typeof word!=="undefined"?word:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/game-jumble/model.yaml", function(exports, require, module) {
module.exports = {"title":"game-jumble","display":"Letter Jumble","category":"Game","features":{"stars":true},"model":{"title":{"type":"html","default":"Letter Jumble"},"description":{"type":"html","default":"Drag the letters to spell the words and reveal the image. Speed and accuracy will score you the most points.\n"},"prompt":{"type":"html","default":"Drag the letters to the word above"},"words":{"min":3,"max":20,"type":[{"image":{"type":"image"},"word":{"type":"html"}}]},"game":{"timer":{"limit":{"type":"number","default":20000,"display":"Time Limit (ms)"}},"stars":{"min":{"type":"int","default":1000,"display":"1 Star"},"max":{"type":"int","default":10000,"display":"All Stars"},"help":"Number of points required to earn stars."}}},"examples":[{"title":"Letter Jumble","description":"Drag the letters to spell the words and reveal the image. Speed and accuracy will score you the most points.\n","prompt":"Snag the letters to the word above","words":[{"image":"img/examples/product-1.png","word":"Classic"},{"image":"img/examples/product-2.png","word":"Value Pack"},{"image":"img/examples/product-3.png","word":"Ultra Slim"}],"challenge_configuration":{"nb_stars":5}}]}
});

;require.register("engine/game-jumble/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (description, hasStars, i18n, title) {
buf.push("<div class=\"content-intro content-fill content-fit\"><div class=\"block-v-lg text-center content\"><div class=\"row\"><div class=\"col-sm-12 col-md-8 col-md-offset-2\"><h1 class=\"tight\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"text-lg block-v-lg\">" + (null == (jade_interp = description) ? "" : jade_interp) + "</div><div class=\"btn btn-solid play-game\">" + (jade.escape(null == (jade_interp = i18n("game.play-game")) ? "" : jade_interp)) + "</div></div></div></div></div><div class=\"content-outro\"><div class=\"content-fill\"><div class=\"block-v-lg text-center content\"><h1>" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"row\"><div class=\"col-sm-12 col-md-8 col-md-offset-2\"><div class=\"row\"><div" + (jade.cls(['col-sm-6','col-md-4','block-v-md',hasStars ? "" : "col-md-offset-2"], [null,null,null,true])) + "><div class=\"block-md block-dk\"><h4 class=\"white-dot-text bold-italic\">" + (jade.escape(null == (jade_interp = i18n("game.your-score")) ? "" : jade_interp)) + "</h4><h1 class=\"game-total tight\">?</h1></div></div><div class=\"col-sm-6 col-md-4 block-v-md\"><div class=\"block-md block-dk\"><h4 class=\"grey-dot-text bold-italic\">" + (jade.escape(null == (jade_interp = i18n("game.your-best")) ? "" : jade_interp)) + "</h4><h1 class=\"game-record tight\">?</h1></div></div>");
if ( hasStars)
{
buf.push("<div class=\"col-sm-12 col-md-4 block-v-md\"><div class=\"block-md block-dk\"><h4 class=\"grey-dot-text bold-italic\">" + (jade.escape(null == (jade_interp = i18n("game.your-stars")) ? "" : jade_interp)) + "</h4><h1 class=\"game-stars tight\">?<sup class=\"stars-total\"></sup></h1></div></div>");
}
buf.push("</div><div class=\"row block-v-md\"><div class=\"col-sm-12 col-md-8 col-md-offset-2 block-md\"><div class=\"btn btn-solid btn-block play-game\">" + (jade.escape(null == (jade_interp = i18n("game.play-again")) ? "" : jade_interp)) + "</div></div></div></div></div></div></div><div class=\"slide-footer block-v-lg\"><div class=\"btn btn-muted goto-next fade-in\">" + (jade.escape(null == (jade_interp = i18n("game.move-on")) ? "" : jade_interp)) + "</div></div></div><div class=\"content-playing\"><div class=\"full-screen\"><div class=\"game-state block-h-lg\"><div class=\"game-state-inner row block-v-lg\"><div class=\"game-state-text col-md-6 col-sm-6\">" + (jade.escape((jade_interp = i18n("game.labels.timer")) == null ? '' : jade_interp)) + "\n&ensp;<strong class=\"game-timer text-lg text-bold\"></strong></div><div class=\"game-state-text col-md-6 col-sm-6 text-right\">" + (jade.escape((jade_interp = i18n("game.labels.score")) == null ? '' : jade_interp)) + "\n&ensp;<strong class=\"game-score text-lg text-bold\"></strong><strong class=\"game-tally\"></strong></div></div></div><div class=\"game-stepper\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div><div class=\"game-bonus-score\"></div><div class=\"game-bonus-time\"></div><div class=\"game-box content-fill text-center\"></div></div></div>");}.call(this,"description" in locals_for_with?locals_for_with.description:typeof description!=="undefined"?description:undefined,"hasStars" in locals_for_with?locals_for_with.hasStars:typeof hasStars!=="undefined"?hasStars:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/game-jumble/view.coffee", function(exports, require, module) {
var Draggy, GameJumbleView, GameView, container, theAlphabet, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

GameView = require("views/base/game");

Draggy = require("views/components/draggy");

container = require("./components/container");

theAlphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".split("");

GameJumbleView = (function(_super) {
  __extends(GameJumbleView, _super);

  function GameJumbleView() {
    _ref = GameJumbleView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  GameJumbleView.prototype.requiresTimeLimit = true;

  GameJumbleView.prototype.template = require("./template");

  GameJumbleView.prototype.events = function() {
    return {
      "iostap .play-game": "enterGame",
      "iostap .goto-next": "next"
    };
  };

  GameJumbleView.prototype.initializeData = function() {
    var words;
    GameJumbleView.__super__.initializeData.apply(this, arguments);
    this.game.extra.set("fullscreen", true);
    this.game.extra.set("sounds", true);
    words = _.filter(this.options.data.words, function(m) {
      return _.isString(m.word) && m.word !== "";
    });
    return this.setArray(words, "words");
  };

  GameJumbleView.prototype.initializeElements = function() {
    GameJumbleView.__super__.initializeElements.apply(this, arguments);
    return this.setEl(this.findOne(".game-box"), "container");
  };

  GameJumbleView.prototype.startGame = function() {
    var draggy, _i, _len, _ref1;
    this.displayMaskedImage();
    this.game.timer.timestamp = Date.now();
    _ref1 = this.draggies;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      draggy = _ref1[_i];
      draggy.unlock();
    }
    return GameJumbleView.__super__.startGame.apply(this, arguments);
  };

  GameJumbleView.prototype.showNext = function(isFirstRun) {
    var complete, difficulty, draggy, el, ids, image, letter, letters, lettersWithoutFirstLetter, remaining, word, _ref1;
    _ref1 = this.getRandom("words"), word = _ref1.word, image = _ref1.image;
    word = word.toUpperCase();
    letters = this.getRandomLetters(_.without(word.split(""), " "));
    difficulty = this.getDifficulty();
    remaining = word.length - 1;
    this.game.timer.timestamp = Date.now();
    complete = (function() {
      var _results;
      _results = [];
      while (letters.length > difficulty && remaining > 0) {
        letter = _.sample(letters);
        lettersWithoutFirstLetter = _.filter(letters, function(l, i, a) {
          return a.indexOf(letter) !== i;
        });
        if (_.intersection(letters, lettersWithoutFirstLetter).length === 0) {
          continue;
        }
        letters = lettersWithoutFirstLetter;
        remaining -= 1;
        _results.push(letter);
      }
      return _results;
    })();
    while (letters.length < Math.min(difficulty + _.random(1, 2), 6)) {
      letters.push(_.sample(theAlphabet));
    }
    ids = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = letters.length; _i < _len; _i++) {
        letter = letters[_i];
        _results.push(Math.random().toString(16).slice(2));
      }
      return _results;
    })();
    this.getEl("container").innerHTML = container({
      ids: ids,
      word: word,
      image: image,
      letters: _.shuffle(letters),
      complete: complete
    });
    this.setEl(this.findAll(".jumble-mask"), "masks");
    this.droppies = this.getElements(".droppy");
    this.draggies = (function() {
      var _i, _len, _ref2, _results;
      _ref2 = this.findAll(".draggy");
      _results = [];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        el = _ref2[_i];
        draggy = new Draggy({
          el: el
        });
        this.listenTo(draggy, "drag", this.onDrag);
        this.listenTo(draggy, "drop", this.onDrop);
        if (isFirstRun) {
          draggy.lock();
        }
        _results.push(draggy);
      }
      return _results;
    }).call(this);
    if (!isFirstRun) {
      this.displayMaskedImage();
    }
    this.displayLetters();
    this.displayDraggies();
    this.getEl("container").offsetTop;
    return this.transform(this.getEl("container"), {
      opacity: 1,
      transition: "opacity 300ms"
    });
  };

  GameJumbleView.prototype.displayMaskedImage = function() {
    var el, i, _i, _len, _ref1, _results;
    _ref1 = _.shuffle(this.getEl("masks"));
    _results = [];
    for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
      el = _ref1[i];
      _results.push(this.transform(el, {
        opacity: 0,
        transition: "opacity 300ms " + (i * (5000 / this.getEl("masks").length)) + "ms"
      }));
    }
    return _results;
  };

  GameJumbleView.prototype.displayLetters = function() {
    var child, el, i, _i, _len, _ref1, _results;
    _ref1 = this.findAll(".jumble-answer, .jumble-letters");
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      el = _ref1[_i];
      _results.push((function() {
        var _j, _len1, _ref2, _results1;
        _ref2 = el.querySelectorAll(".letter");
        _results1 = [];
        for (i = _j = 0, _len1 = _ref2.length; _j < _len1; i = ++_j) {
          child = _ref2[i];
          this.transition(child, "all 300ms " + (i * 50) + "ms", true);
          _results1.push(child.classList.add("visible"));
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  GameJumbleView.prototype.displayDraggies = function() {
    var draggy, _i, _len, _ref1, _results;
    _ref1 = this.draggies;
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      draggy = _ref1[_i];
      _results.push(this.resetDraggy(draggy));
    }
    return _results;
  };

  GameJumbleView.prototype.getElements = function(selector) {
    var el, _i, _len, _ref1, _results;
    _ref1 = this.findAll(selector);
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      el = _ref1[_i];
      _results.push({
        el: el,
        bounds: el.getBoundingClientRect()
      });
    }
    return _results;
  };

  GameJumbleView.prototype.onDrag = function(draggy, isInitialDrag) {
    var activeDroppy, activeIndex, droppy, el, i, shouldHide, x, y, _i, _j, _len, _len1, _ref1, _ref2, _ref3;
    if (isInitialDrag) {
      this.droppies = this.getElements(".droppy", this.droppies);
    }
    activeIndex = draggy.closest(_.pluck(this.droppies, "bounds"));
    activeDroppy = this.droppies[activeIndex];
    _ref1 = this.droppies;
    for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
      droppy = _ref1[i];
      droppy.el.classList.toggle("active", i === activeIndex);
      droppy.isActive = i === activeIndex;
    }
    draggy.el.classList.toggle("active-pos", activeDroppy != null);
    _ref2 = this.draggies;
    for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
      el = _ref2[_j].el;
      if (!(el !== draggy.el)) {
        continue;
      }
      shouldHide = el.dataset.id === (activeDroppy != null ? activeDroppy.el.dataset.contains : void 0);
      el.classList.toggle("hidden", shouldHide);
    }
    _ref3 = activeDroppy ? this.positionFromBounds(draggy, activeDroppy.bounds) : draggy, x = _ref3.x, y = _ref3.y;
    this.transform(draggy.el, {
      x: x,
      y: y,
      scale: activeDroppy ? 1 : 1.4,
      transition: isInitialDrag || activeDroppy ? "all 300ms" : "none"
    });
    if (!isInitialDrag) {
      return draggy.el.offsetLeft;
    }
  };

  GameJumbleView.prototype.onDrop = function(draggy) {
    var droppy, x, y, _ref1;
    droppy = _.findWhere(this.droppies, {
      isActive: true
    });
    if (droppy) {
      _ref1 = this.positionFromBounds(draggy, droppy.bounds), x = _ref1.x, y = _ref1.y;
    } else {
      x = y = 0;
    }
    if (draggy.x !== x || draggy.y !== y) {
      return draggy.reset({
        x: x,
        y: y
      });
    } else {
      this.transform(draggy.el, {
        x: draggy.x,
        y: draggy.y,
        transition: "all 300ms"
      });
      this.updateDroppies(draggy);
      return this.checkAnswer();
    }
  };

  GameJumbleView.prototype.updateDroppies = function(draggy) {
    var containsActive, droppy, _i, _len, _ref1, _results;
    _ref1 = this.droppies;
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      droppy = _ref1[_i];
      droppy.el.classList.remove("active");
      containsActive = droppy.el.dataset.contains === draggy.el.dataset.id;
      if (droppy.isActive) {
        draggy.el.classList.add("is-positioned");
        if (droppy.el.dataset.contains && !containsActive) {
          droppy.isActive = false;
          this.resetDraggy(this.getDraggy(droppy.el.dataset.contains));
        }
        _results.push(droppy.el.dataset.contains = draggy.el.dataset.id);
      } else if (containsActive) {
        _results.push(delete droppy.el.dataset.contains);
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  GameJumbleView.prototype.positionFromBounds = function(draggy, bounds) {
    var height, left, top, width, _ref1;
    _ref1 = draggy.offset, left = _ref1.left, top = _ref1.top, width = _ref1.width, height = _ref1.height;
    return {
      x: Math.round(bounds.left + bounds.width / 2 - left - width / 2),
      y: Math.round(bounds.top + bounds.height / 2 - top - height / 2)
    };
  };

  GameJumbleView.prototype.resetDraggy = function(draggy) {
    draggy.reset();
    draggy.el.classList.remove("is-positioned", "hidden", "active-pos");
    return this.transform(draggy.el, {
      rotate: _.random(-8, 8),
      transition: "all 300ms"
    });
  };

  GameJumbleView.prototype.checkAnswer = function() {
    var active, correct, diff, draggy, over, _i, _len, _ref1,
      _this = this;
    active = this.droppies.filter(function(droppy) {
      return droppy.el.dataset.letter;
    });
    correct = active.filter(function(droppy) {
      var draggy;
      draggy = _this.getDraggy(droppy.el.dataset.contains);
      return droppy.el.dataset.letter === (draggy != null ? draggy.el.dataset.letter : void 0);
    });
    if (active.length === correct.length) {
      _ref1 = this.draggies;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        draggy = _ref1[_i];
        draggy.undelegateEvents();
      }
      diff = this.game.timer.timestamp - Date.now();
      over = 5000 + this.getDifficulty() * 500;
      this.onCorrectAnswer({
        score: 1000,
        time: 3000,
        bonus: this.getBonus(diff, null, over),
        tally: true
      });
      this.el.classList.add("correct");
      this.transform(this.getEl("container"), {
        opacity: 0,
        transition: "opacity 300ms 900ms"
      });
      window.setTimeout((function() {
        var el, _j, _len1, _ref2, _results;
        _ref2 = _this.findAll(".letter");
        _results = [];
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          el = _ref2[_j];
          _results.push(el.classList.remove("visible"));
        }
        return _results;
      }), 300);
      return window.setTimeout((function() {
        _this.el.classList.remove("correct");
        return _this.showNext();
      }), 1200);
    }
  };

  GameJumbleView.prototype.getDraggy = function(id) {
    var draggy;
    return ((function() {
      var _i, _len, _ref1, _results;
      _ref1 = this.draggies;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        draggy = _ref1[_i];
        if (draggy.el.dataset.id === id) {
          _results.push(draggy);
        }
      }
      return _results;
    }).call(this))[0];
  };

  GameJumbleView.prototype.getDifficulty = function() {
    return Math.floor(_.limit(this.game.score.get("consecutive") / 1.6, 6, 1));
  };

  GameJumbleView.prototype.getRandomLetters = function(word) {
    return _.chain(theAlphabet).difference(word).sample(6 - word.length).value().concat(word);
  };

  return GameJumbleView;

})(GameView);

module.exports = GameJumbleView;
});

;require.register("engine/game-memory/components/tiles.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (config, tiles, undefined) {
jade_mixins["multi-content"] = jade_interp = function(prop, obj){
var block = (this && this.block), attributes = (this && this.attributes) || {};
obj = obj || locals;
switch (obj[prop + "Type"]){
case "image":
buf.push("<div" + (jade.attr("data-content", obj.image, true, false)) + " class=\"multi-content-wrapper multi-content-wrapper-image block-md block-lt\"><div class=\"block-sm multi-content-media\"><img" + (jade.attr("src", obj[prop], true, false)) + " class=\"multi-content multi-content-image\"/></div></div>");
  break;
case "video":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-video block-md block-lt\"><div class=\"block-sm multi-content-media\"><video" + (jade.attr("src", obj[prop], true, false)) + " webkit-playsinline=\"webkit-playsinline\" playsinline=\"playsinline\" preload=\"auto\" controls=\"controls\"" + (jade.attr("dir", config.direction, true, false)) + " class=\"video-js multi-content multi-content-video block-dk\"></video></div></div>");
  break;
case "audio":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-audio block-md block-lt\"><div class=\"block-sm multi-content-media\"><audio" + (jade.attr("src", obj[prop], true, false)) + " webkit-playsinline=\"webkit-playsinline\" playsinline=\"playsinline\" preload=\"auto\" controls=\"controls\"" + (jade.attr("dir", config.direction, true, false)) + " class=\"multi-content multi-content-audio block-dk\"></audio></div></div>");
  break;
case "iframe":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-iframe block-md block-lt\"><div class=\"block-sm multi-content-iframe\">");
var iframe = obj[prop].match(/<iframe[^<]*<\/iframe>/)
if ( iframe)
{
buf.push(null == (jade_interp = iframe[0].replace(/ (width|height)=["'\d\w]+/g, "")) ? "" : jade_interp);
}
buf.push("</div></div>");
  break;
default:
buf.push("<span class=\"multi-content multi-content-text\">" + (null == (jade_interp = obj[prop]) ? "" : jade_interp) + "</span>");
  break;
}
};
// iterate tiles
;(function(){
  var $$obj = tiles;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var tile = $$obj[$index];

buf.push("<div" + (jade.attr("data-index", tile.index, true, false)) + (jade.cls(['tile',"tile-" + ((tiles.length / 2)) + ""], [null,true])) + "><div class=\"tile-content\"><div class=\"btn btn-solid tile-front\"><div class=\"content text-xl\">?</div></div><div" + (jade.cls(['btn','btn-solid','tile-back',tile.klass], [null,null,null,true])) + ">");
jade_mixins["multi-content"]("content", tile);
buf.push("</div></div></div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var tile = $$obj[$index];

buf.push("<div" + (jade.attr("data-index", tile.index, true, false)) + (jade.cls(['tile',"tile-" + ((tiles.length / 2)) + ""], [null,true])) + "><div class=\"tile-content\"><div class=\"btn btn-solid tile-front\"><div class=\"content text-xl\">?</div></div><div" + (jade.cls(['btn','btn-solid','tile-back',tile.klass], [null,null,null,true])) + ">");
jade_mixins["multi-content"]("content", tile);
buf.push("</div></div></div>");
    }

  }
}).call(this);
}.call(this,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined,"tiles" in locals_for_with?locals_for_with.tiles:typeof tiles!=="undefined"?tiles:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/game-memory/model.yaml", function(exports, require, module) {
module.exports = {"title":"game-memory","display":"Memory","category":"Game","description":"Find the matching tiles","features":{"stars":true},"model":{"title":{"type":"text","default":"Find the matching tiles"},"description":{"type":"html","default":"Use your memory to find the matching tiles. Tap on a tile to select it and then tap it's matching pair.\n"},"tiles":{"min":2,"max":4,"type":[{"left":{"types":["text","image"]},"right":{"types":["text","image"]}}]},"prompt":{"type":"text","default":"Find a pair of matching tiles"},"game":{"timer":{"limit":{"type":"number","default":20000,"display":"Time Limit (ms)"}},"stars":{"min":{"type":"int","default":5000,"display":"1 Star"},"max":{"type":"int","default":8000,"display":"All Stars"},"help":"Number of points required to earn stars."}}},"examples":[{"tiles":[{"left":"Pig","right":"Pink"},{"left":"Cow","right":"Brown"},{"left":"Cat","right":"Black, white, cream, ginger, brown & different assortments of the aforementioned (tortoiseshell)\n"},{"left":"Polar Bear","right":"White"}]}]}
});

;require.register("engine/game-memory/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (description, hasStars, i18n, prompt, title) {
buf.push("<div class=\"content-intro content-fill content-fit\"><div class=\"block-v-lg text-center content\"><div class=\"row\"><div class=\"col-sm-12 col-md-8 col-md-offset-2\"><h1 class=\"tight\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"text-lg block-v-lg\">" + (null == (jade_interp = description) ? "" : jade_interp) + "</div><div class=\"btn btn-solid play-game\">" + (jade.escape(null == (jade_interp = i18n("game.play-game")) ? "" : jade_interp)) + "</div></div></div></div></div><div class=\"content-outro\"><div class=\"content-fill\"><div class=\"block-v-lg text-center content\"><h1>" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"row\"><div class=\"col-sm-12 col-md-8 col-md-offset-2\"><div class=\"row\"><div" + (jade.cls(['col-sm-6','col-md-4','block-v-md',hasStars ? "" : "col-md-offset-2"], [null,null,null,true])) + "><div class=\"block-md block-dk\"><h4 class=\"white-dot-text bold-italic\">" + (jade.escape(null == (jade_interp = i18n("game.your-score")) ? "" : jade_interp)) + "</h4><h1 class=\"game-total tight\">?</h1></div></div><div class=\"col-sm-6 col-md-4 block-v-md\"><div class=\"block-md block-dk\"><h4 class=\"grey-dot-text bold-italic\">" + (jade.escape(null == (jade_interp = i18n("game.your-best")) ? "" : jade_interp)) + "</h4><h1 class=\"game-record tight\">?</h1></div></div>");
if ( hasStars)
{
buf.push("<div class=\"col-sm-12 col-md-4 block-v-md\"><div class=\"block-md block-dk\"><h4 class=\"grey-dot-text bold-italic\">" + (jade.escape(null == (jade_interp = i18n("game.your-stars")) ? "" : jade_interp)) + "</h4><h1 class=\"game-stars tight\">?<sup class=\"stars-total\"></sup></h1></div></div>");
}
buf.push("</div><div class=\"row block-v-md\"><div class=\"col-sm-12 col-md-8 col-md-offset-2 block-md\"><div class=\"btn btn-solid btn-block play-game\">" + (jade.escape(null == (jade_interp = i18n("game.play-again")) ? "" : jade_interp)) + "</div></div></div></div></div></div></div><div class=\"slide-footer block-v-lg\"><div class=\"btn btn-muted goto-next fade-in\">" + (jade.escape(null == (jade_interp = i18n("game.move-on")) ? "" : jade_interp)) + "</div></div></div><div class=\"content-playing\"><div class=\"content-fill full-screen\"><div class=\"game-state block-h-lg\"><div class=\"game-state-inner row block-v-lg\"><div class=\"game-state-text col-md-6 col-sm-6\">" + (jade.escape((jade_interp = i18n("game.labels.timer")) == null ? '' : jade_interp)) + "\n&ensp;<strong class=\"game-timer text-lg text-bold\"></strong></div><div class=\"game-state-text col-md-6 col-sm-6 text-right\">" + (jade.escape((jade_interp = i18n("game.labels.score")) == null ? '' : jade_interp)) + "\n&ensp;<strong class=\"game-score text-lg text-bold\"></strong><strong class=\"game-tally\"></strong></div></div></div><div class=\"game-stepper\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div><div class=\"game-bonus-score\"></div><div class=\"game-bonus-time\"></div></div><div class=\"game-tiles content-fill text-center\"></div><div class=\"slide-footer slide-up block-v-lg\"><div class=\"slide-footer-prompt text-uppercase text-bold\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div></div>");}.call(this,"description" in locals_for_with?locals_for_with.description:typeof description!=="undefined"?description:undefined,"hasStars" in locals_for_with?locals_for_with.hasStars:typeof hasStars!=="undefined"?hasStars:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/game-memory/view.coffee", function(exports, require, module) {
var GameMemoryView, GameView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

GameView = require("views/base/game");

GameMemoryView = (function(_super) {
  __extends(GameMemoryView, _super);

  function GameMemoryView() {
    _ref = GameMemoryView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  GameMemoryView.prototype.requiresTimeLimit = true;

  GameMemoryView.prototype.templates = {
    "default": require("./template"),
    tiles: require("./components/tiles")
  };

  GameMemoryView.prototype.events = function() {
    return {
      "iostap .play-game": "enterGame",
      "iostap .tile": "selectTile",
      "iostap .goto-next": "next"
    };
  };

  GameMemoryView.prototype.serialize = function() {
    var data;
    data = GameMemoryView.__super__.serialize.apply(this, arguments);
    data.tiles = _.chain(data.tiles).map(function(_arg, i) {
      var left, leftType, right, rightType;
      left = _arg.left, leftType = _arg.leftType, right = _arg.right, rightType = _arg.rightType;
      if ((left != null) && (right != null)) {
        return [
          {
            content: left,
            contentType: leftType,
            index: i
          }, {
            content: right,
            contentType: rightType,
            index: i
          }
        ];
      } else {
        return [];
      }
    }).flatten().shuffle().each(function(t) {
      if (t.content.length > 20) {
        return t.klass = "text-sm";
      } else if (t.content.length < 8) {
        return t.klass = "text-lg";
      }
    }).value();
    return data;
  };

  GameMemoryView.prototype.initializeData = function() {
    GameMemoryView.__super__.initializeData.apply(this, arguments);
    this.game.extra.set("fullscreen", true);
    return this.game.extra.set("sounds", true);
  };

  GameMemoryView.prototype.initializeElements = function() {
    GameMemoryView.__super__.initializeElements.apply(this, arguments);
    return this.setEl(this.findOne(".game-tiles"), "container");
  };

  GameMemoryView.prototype.enterGame = function() {
    this.getEl("container").innerHTML = this.templates.tiles(this.serialize());
    this.setEl(this.findAll(".tile"), "tiles");
    this.elements.current = null;
    return GameMemoryView.__super__.enterGame.apply(this, arguments);
  };

  GameMemoryView.prototype.startGame = function() {
    this.game.timer.timestamp = Date.now();
    return GameMemoryView.__super__.startGame.apply(this, arguments);
  };

  GameMemoryView.prototype.selectTile = function(e) {
    var next, prev;
    prev = this.getEl("current");
    next = e.currentTarget;
    if (this.game.timer.get("paused") || next.classList.contains("correct")) {
      return;
    }
    next.classList.toggle("active");
    if (prev) {
      if (next.classList.contains("active")) {
        this.compareTiles(prev, next);
      }
      return this.elements.current = null;
    } else {
      return this.setEl(next, "current");
    }
  };

  GameMemoryView.prototype.compareTiles = function(prev, next) {
    var allTiles, doneTiles, isComplete, isCorrect, t;
    if (prev !== next && prev.dataset.index === next.dataset.index) {
      prev.classList.add("correct");
      next.classList.add("correct");
      prev.classList.add("active");
      next.classList.add("active");
      allTiles = this.getEl("tiles");
      doneTiles = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = allTiles.length; _i < _len; _i++) {
          t = allTiles[_i];
          if (t.classList.contains("correct")) {
            _results.push(t);
          }
        }
        return _results;
      })();
      isComplete = doneTiles.length === allTiles.length;
      isCorrect = true;
    } else {
      window.setTimeout((function() {
        prev.classList.remove("active");
        return next.classList.remove("active");
      }), 1000);
    }
    if (isCorrect) {
      this.onCorrectAnswer({
        score: 1000,
        bonus: this.getBonus(Date.now() - this.game.timer.timestamp, 2000, 9000),
        tally: true
      });
      this.game.timer.timestamp = Date.now();
    }
    if (isComplete) {
      return window.setTimeout(_.bind(this.endGame, this), 1000);
    }
  };

  return GameMemoryView;

})(GameView);

module.exports = GameMemoryView;
});

;require.register("engine/game-next-in-order/components/options.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (missing, options, sequence, undefined) {
// iterate options
;(function(){
  var $$obj = options;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var image = $$obj[i];

buf.push("<div class=\"btn-image-container block-md\"><img" + (jade.attr("src", image, true, false)) + (jade.attr("data-is-correct", image === sequence[missing[0]], true, false)) + (jade.cls(['btn-image',"delay-" + (i) + ""], [null,true])) + "/></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var image = $$obj[i];

buf.push("<div class=\"btn-image-container block-md\"><img" + (jade.attr("src", image, true, false)) + (jade.attr("data-is-correct", image === sequence[missing[0]], true, false)) + (jade.cls(['btn-image',"delay-" + (i) + ""], [null,true])) + "/></div>");
    }

  }
}).call(this);
}.call(this,"missing" in locals_for_with?locals_for_with.missing:typeof missing!=="undefined"?missing:undefined,"options" in locals_for_with?locals_for_with.options:typeof options!=="undefined"?options:undefined,"sequence" in locals_for_with?locals_for_with.sequence:typeof sequence!=="undefined"?sequence:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/game-next-in-order/components/sequence.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (missing, sequence, undefined) {
// iterate sequence
;(function(){
  var $$obj = sequence;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var image = $$obj[i];

var klass = missing.indexOf(i) > -1 ? "hidden" : "";
buf.push("<div class=\"next-img-container block-sm\"><div" + (jade.cls(['block-lt','block-sm',klass + " delay-" + (i) + ""], [null,null,true])) + "><img" + (jade.attr("src", image, true, false)) + " class=\"next-img\"/></div></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var image = $$obj[i];

var klass = missing.indexOf(i) > -1 ? "hidden" : "";
buf.push("<div class=\"next-img-container block-sm\"><div" + (jade.cls(['block-lt','block-sm',klass + " delay-" + (i) + ""], [null,null,true])) + "><img" + (jade.attr("src", image, true, false)) + " class=\"next-img\"/></div></div>");
    }

  }
}).call(this);
}.call(this,"missing" in locals_for_with?locals_for_with.missing:typeof missing!=="undefined"?missing:undefined,"sequence" in locals_for_with?locals_for_with.sequence:typeof sequence!=="undefined"?sequence:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/game-next-in-order/model.yaml", function(exports, require, module) {
module.exports = {"title":"game-next-in-order","display":"Next in Order","category":"Game","features":{"stars":true},"model":{"title":{"type":"html","default":"What comes next?"},"description":{"type":"html","default":"Can you remember the correct order? Select the image that completes the following sequence.\n"},"prompt":{"type":"html","default":"Select the image that is next in order"},"sequence":{"min":3,"max":9,"type":[{"type":"image"}]},"imposters":{"min":3,"max":9,"type":[{"type":"image"}],"help":"Imposters are images that don't belong in the sequence."},"game":{"timer":{"limit":{"type":"number","default":20000,"display":"Time Limit (ms)"}},"stars":{"min":{"type":"int","default":1000,"display":"1 Star"},"max":{"type":"int","default":10000,"display":"All Stars"},"help":"Number of points required to earn stars."}}},"examples":[{"title":"What comes next?","description":"Can you remember the correct order? Select the image that completes the following sequence.\n","prompt":"Select the image that is next in order","sequence":["img/examples/product-1.png","img/examples/product-2.png","img/examples/product-3.png"]}]}
});

;require.register("engine/game-next-in-order/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (description, hasStars, i18n, prompt, title) {
buf.push("<div class=\"content-intro content-fill content-fit\"><div class=\"block-v-lg text-center content\"><div class=\"row\"><div class=\"col-sm-12 col-md-8 col-md-offset-2\"><h1 class=\"tight\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"text-lg block-v-lg\">" + (null == (jade_interp = description) ? "" : jade_interp) + "</div><div class=\"btn btn-solid play-game\">" + (jade.escape(null == (jade_interp = i18n("game.play-game")) ? "" : jade_interp)) + "</div></div></div></div></div><div class=\"content-outro\"><div class=\"content-fill\"><div class=\"block-v-lg text-center content\"><h1>" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"row\"><div class=\"col-sm-12 col-md-8 col-md-offset-2\"><div class=\"row\"><div" + (jade.cls(['col-sm-6','col-md-4','block-v-md',hasStars ? "" : "col-md-offset-2"], [null,null,null,true])) + "><div class=\"block-md block-dk\"><h4 class=\"white-dot-text bold-italic\">" + (jade.escape(null == (jade_interp = i18n("game.your-score")) ? "" : jade_interp)) + "</h4><h1 class=\"game-total tight\">?</h1></div></div><div class=\"col-sm-6 col-md-4 block-v-md\"><div class=\"block-md block-dk\"><h4 class=\"grey-dot-text bold-italic\">" + (jade.escape(null == (jade_interp = i18n("game.your-best")) ? "" : jade_interp)) + "</h4><h1 class=\"game-record tight\">?</h1></div></div>");
if ( hasStars)
{
buf.push("<div class=\"col-sm-12 col-md-4 block-v-md\"><div class=\"block-md block-dk\"><h4 class=\"grey-dot-text bold-italic\">" + (jade.escape(null == (jade_interp = i18n("game.your-stars")) ? "" : jade_interp)) + "</h4><h1 class=\"game-stars tight\">?<sup class=\"stars-total\"></sup></h1></div></div>");
}
buf.push("</div><div class=\"row block-v-md\"><div class=\"col-sm-12 col-md-8 col-md-offset-2 block-md\"><div class=\"btn btn-solid btn-block play-game\">" + (jade.escape(null == (jade_interp = i18n("game.play-again")) ? "" : jade_interp)) + "</div></div></div></div></div></div></div><div class=\"slide-footer block-v-lg\"><div class=\"btn btn-muted goto-next fade-in\">" + (jade.escape(null == (jade_interp = i18n("game.move-on")) ? "" : jade_interp)) + "</div></div></div><div class=\"content-playing\"><div class=\"full-screen\"><div class=\"game-state block-h-lg\"><div class=\"game-state-inner row block-v-lg\"><div class=\"game-state-text col-md-6 col-sm-6\">" + (jade.escape((jade_interp = i18n("game.labels.timer")) == null ? '' : jade_interp)) + "\n&ensp;<strong class=\"game-timer text-lg text-bold\"></strong></div><div class=\"game-state-text col-md-6 col-sm-6 text-right\">" + (jade.escape((jade_interp = i18n("game.labels.score")) == null ? '' : jade_interp)) + "\n&ensp;<strong class=\"game-score text-lg text-bold\"></strong><strong class=\"game-tally\"></strong></div></div></div><div class=\"game-stepper\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div><div class=\"game-bonus-score\"></div><div class=\"game-bonus-time\"></div><div class=\"block-lg content-fill\"><div class=\"text-center content-fill game-box\"><div class=\"next-top\"><div class=\"content-ver\"><h4 class=\"next-prompt block-lg text-md\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</h4><div class=\"next-sequence block-dk block-sm\"></div></div></div><div class=\"next-options\"></div></div></div></div></div>");}.call(this,"description" in locals_for_with?locals_for_with.description:typeof description!=="undefined"?description:undefined,"hasStars" in locals_for_with?locals_for_with.hasStars:typeof hasStars!=="undefined"?hasStars:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/game-next-in-order/view.coffee", function(exports, require, module) {
var GameNextInOrderView, GameView, Preloader, optTempl, seqTempl, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

GameView = require("views/base/game");

seqTempl = require("./components/sequence");

optTempl = require("./components/options");

Preloader = require("lib/preload");

GameNextInOrderView = (function(_super) {
  __extends(GameNextInOrderView, _super);

  function GameNextInOrderView() {
    _ref = GameNextInOrderView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  GameNextInOrderView.prototype.requiresTimeLimit = true;

  GameNextInOrderView.prototype.template = require("./template");

  GameNextInOrderView.prototype.events = function() {
    return {
      "iostap .play-game": "enterGame",
      "iostap .goto-next": "next",
      "iostap .btn-image": "checkAnswer"
    };
  };

  GameNextInOrderView.prototype.initializeData = function() {
    var arr, imposters, key, sequence, _ref1, _ref2, _results,
      _this = this;
    GameNextInOrderView.__super__.initializeData.apply(this, arguments);
    this.game.extra.set("fullscreen", true);
    this.game.extra.set("sounds", true);
    _ref1 = this.options.data, imposters = _ref1.imposters, sequence = _ref1.sequence;
    _ref2 = {
      imposters: imposters,
      sequence: sequence
    };
    _results = [];
    for (key in _ref2) {
      arr = _ref2[key];
      arr = _.compact(arr);
      arr = _.filter(arr, _.isString);
      this.setArray(key, arr);
      _results.push(Preloader.load(arr, function(errors) {
        if (errors == null) {
          errors = [];
        }
        return _this.setArray(key, _.without.apply(_, [arr].concat(__slice.call(errors))));
      }));
    }
    return _results;
  };

  GameNextInOrderView.prototype.initializeElements = function() {
    GameNextInOrderView.__super__.initializeElements.apply(this, arguments);
    this.setEl(this.findOne(".game-box"), "container");
    this.setEl(this.findOne(".next-sequence"), "sequence");
    return this.setEl(this.findOne(".next-options"), "options");
  };

  GameNextInOrderView.prototype.startGame = function() {
    this.game.timer.timestamp = Date.now();
    return GameNextInOrderView.__super__.startGame.apply(this, arguments);
  };

  GameNextInOrderView.prototype.showNext = function() {
    var _i, _ref1, _results;
    this.setArray("missing", _.chain((function() {
      _results = [];
      for (var _i = 0, _ref1 = this.getArray("sequence").length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; 0 <= _ref1 ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this)).sample(this.getDifficulty()).sortBy(_.identity).value());
    return this.continueSequence(true);
  };

  GameNextInOrderView.prototype.continueSequence = function(isFirstRun) {
    var data, el, seqEl, x,
      _this = this;
    this.game.timer.timestamp = Date.now();
    data = _.extend({}, this.options.data, {
      missing: this.getArray("missing"),
      options: _.chain(this.getArray("missing").slice(1)).map(function(i) {
        return _this.getArray("sequence")[i];
      }).concat(this.getArray("imposters")).sample(3).concat(this.getArray("sequence")[this.getArray("missing")[0]]).shuffle().value()
    });
    this.getEl("options").innerHTML = optTempl(data);
    if (isFirstRun) {
      seqEl = this.getEl("sequence");
      seqEl.innerHTML = seqTempl(data);
      seqEl.style.width = this.getArray("sequence").length * seqEl.firstChild.offsetWidth + "px";
    }
    el = this.getEl("sequence").querySelectorAll(".hidden").item(0);
    x = (-el.offsetLeft - this.getEl("sequence").offsetLeft) - (el.offsetWidth - this.getEl("sequence").parentNode.offsetWidth) / 2;
    el.classList.add("hidden-next");
    this.transform(this.getEl("sequence"), {
      x: x,
      transition: "all 300ms"
    });
    this.setArray("missing", this.getArray("missing").slice(1));
    this.getEl("container").offsetTop;
    return this.getEl("container").classList.remove("hidden", "between");
  };

  GameNextInOrderView.prototype.checkAnswer = function(e) {
    var el, isComplete, isCorrect,
      _this = this;
    el = this.findOne(".hidden-next");
    if (this.game.timer.get("paused") || (el == null)) {
      return;
    }
    isCorrect = e.currentTarget.dataset.isCorrect;
    isComplete = this.getArray("missing").length === 0;
    if (isCorrect) {
      this.onCorrectAnswer({
        score: isComplete ? 1000 : 200,
        time: isComplete ? 3000 : 500,
        bonus: this.getBonus(this.game.timer.timestamp - Date.now(), 500),
        tally: true
      });
    } else {
      this.onIncorrectAnswer({
        time: 1000,
        tally: true
      });
    }
    el.classList.remove("hidden", "hidden-next");
    if (isComplete || !isCorrect) {
      return window.setTimeout((function() {
        _this.getEl("container").classList.add("hidden");
        return window.setTimeout((function() {
          return _this.showNext();
        }), 800);
      }), 500);
    } else {
      this.getEl("container").classList.add("between");
      return window.setTimeout((function() {
        return _this.continueSequence();
      }), 800);
    }
  };

  GameNextInOrderView.prototype.getDifficulty = function() {
    var consecutive;
    consecutive = this.game.score.get("consecutive");
    return Math.floor(_.limit((consecutive + 1) / 2, this.getArray("sequence").length, 2));
  };

  return GameNextInOrderView;

})(GameView);

module.exports = GameNextInOrderView;
});

;require.register("engine/game-true-or-false/components/statement.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (missing, sequence, undefined) {
// iterate sequence
;(function(){
  var $$obj = sequence;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var image = $$obj[i];

var klass = missing.indexOf(i) > -1 ? "hidden" : "";
buf.push("<div" + (jade.cls(['pull-left',"delay-" + (i) + ""], [null,true])) + "><div class=\"block-sm\"><div" + (jade.cls(['next-img-container','block-sm','block-lt',klass], [null,null,null,true])) + "><img" + (jade.attr("src", image, true, false)) + " class=\"next-img\"/></div></div></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var image = $$obj[i];

var klass = missing.indexOf(i) > -1 ? "hidden" : "";
buf.push("<div" + (jade.cls(['pull-left',"delay-" + (i) + ""], [null,true])) + "><div class=\"block-sm\"><div" + (jade.cls(['next-img-container','block-sm','block-lt',klass], [null,null,null,true])) + "><img" + (jade.attr("src", image, true, false)) + " class=\"next-img\"/></div></div></div>");
    }

  }
}).call(this);
}.call(this,"missing" in locals_for_with?locals_for_with.missing:typeof missing!=="undefined"?missing:undefined,"sequence" in locals_for_with?locals_for_with.sequence:typeof sequence!=="undefined"?sequence:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/game-true-or-false/model.yaml", function(exports, require, module) {
module.exports = {"title":"game-true-or-false","display":"True or False","category":"Game","features":{"stars":true},"model":{"title":{"type":"html","default":"True or false?"},"description":{"type":"html","default":"Which of these statements is true? Swipe the incorrect statements to the left and the true statements to the right.\n"},"prompt":{"type":"html","default":"Swipe to answer"},"statements":{"min":3,"max":30,"type":[{"text":{"type":"html"},"true":{"type":"boolean","display":"Correct"}}]},"falseText":{"display":"Incorrect","type":"html","default":"False"},"trueText":{"display":"Correct","type":"html","default":"True"},"game":{"timer":{"limit":{"type":"number","default":20000,"display":"Time Limit (ms)"}},"stars":{"min":{"type":"int","default":1000,"display":"1 Star"},"max":{"type":"int","default":10000,"display":"All Stars"},"help":"Number of points required to earn stars."}}},"examples":[{"title":"True or false?","prompt":"Swipe to answer","description":"Which of these statements is true? Swipe the incorrect statements to the left and the true statements to the right.","falseText":"False","trueText":"True","statements":[{"text":"Africa is the continent with the most countries","true":true},{"text":"Halley’s comet passes the Earth every 67 years","true":false},{"text":"The Amazon rainforest produces half the world’s oxygen supply","true":true}]}]}
});

;require.register("engine/game-true-or-false/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (description, displayOrder, hasStars, i18n, prompt, title) {
buf.push("<div class=\"content-intro content-fill content-fit\"><div class=\"block-v-lg text-center content\"><div class=\"row\"><div class=\"col-sm-12 col-md-8 col-md-offset-2\"><h1 class=\"tight\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"text-lg block-v-lg\">" + (null == (jade_interp = description) ? "" : jade_interp) + "</div><div class=\"btn btn-solid play-game\">" + (jade.escape(null == (jade_interp = i18n("game.play-game")) ? "" : jade_interp)) + "</div></div></div></div></div><div class=\"content-outro\"><div class=\"content-fill\"><div class=\"block-v-lg text-center content\"><h1>" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"row\"><div class=\"col-sm-12 col-md-8 col-md-offset-2\"><div class=\"row\"><div" + (jade.cls(['col-sm-6','col-md-4','block-v-md',hasStars ? "" : "col-md-offset-2"], [null,null,null,true])) + "><div class=\"block-md block-dk\"><h4 class=\"white-dot-text bold-italic\">" + (jade.escape(null == (jade_interp = i18n("game.your-score")) ? "" : jade_interp)) + "</h4><h1 class=\"game-total tight\">?</h1></div></div><div class=\"col-sm-6 col-md-4 block-v-md\"><div class=\"block-md block-dk\"><h4 class=\"grey-dot-text bold-italic\">" + (jade.escape(null == (jade_interp = i18n("game.your-best")) ? "" : jade_interp)) + "</h4><h1 class=\"game-record tight\">?</h1></div></div>");
if ( hasStars)
{
buf.push("<div class=\"col-sm-12 col-md-4 block-v-md\"><div class=\"block-md block-dk\"><h4 class=\"grey-dot-text bold-italic\">" + (jade.escape(null == (jade_interp = i18n("game.your-stars")) ? "" : jade_interp)) + "</h4><h1 class=\"game-stars tight\">?<sup class=\"stars-total\"></sup></h1></div></div>");
}
buf.push("</div><div class=\"row block-v-md\"><div class=\"col-sm-12 col-md-8 col-md-offset-2 block-md\"><div class=\"btn btn-solid btn-block play-game\">" + (jade.escape(null == (jade_interp = i18n("game.play-again")) ? "" : jade_interp)) + "</div></div></div></div></div></div></div><div class=\"slide-footer block-v-lg\"><div class=\"btn btn-muted goto-next fade-in\">" + (jade.escape(null == (jade_interp = i18n("game.move-on")) ? "" : jade_interp)) + "</div></div></div><div class=\"content-playing\"><div class=\"content-fill full-screen\"><div class=\"game-state block-h-lg\"><div class=\"game-state-inner row block-v-lg\"><div class=\"game-state-text col-md-6 col-sm-6\">" + (jade.escape((jade_interp = i18n("game.labels.timer")) == null ? '' : jade_interp)) + "\n&ensp;<strong class=\"game-timer text-lg text-bold\"></strong></div><div class=\"game-state-text col-md-6 col-sm-6 text-right\">" + (jade.escape((jade_interp = i18n("game.labels.score")) == null ? '' : jade_interp)) + "\n&ensp;<strong class=\"game-score text-lg text-bold\"></strong><strong class=\"game-tally\"></strong></div></div></div><div class=\"game-stepper\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div><div class=\"game-bonus-score\"></div><div class=\"game-bonus-time\"></div><div class=\"row content-fill\"><div" + (jade.cls(['col-sm-2','content-fill','block-dk','text-lg','text-center',displayOrder[0].klass], [null,null,null,null,null,true])) + "><h4 class=\"game-label content-ver block-h-lg\">" + (null == (jade_interp = displayOrder[0].text) ? "" : jade_interp) + "</h4></div><div class=\"game-statement-container col-sm-8 content-fill\"><div class=\"content-ver text-sm text-center\"><h1 class=\"game-statement block-lg\"></h1></div></div><div" + (jade.cls(['col-sm-2','content-fill','block-dk','text-lg','text-center',displayOrder[1].klass], [null,null,null,null,null,true])) + "><h4 class=\"game-label content-ver block-h-lg\">" + (null == (jade_interp = displayOrder[1].text) ? "" : jade_interp) + "</h4></div></div></div><div class=\"slide-footer slide-up block-v-lg\"><div class=\"slide-footer-prompt text-uppercase text-bold\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div></div>");}.call(this,"description" in locals_for_with?locals_for_with.description:typeof description!=="undefined"?description:undefined,"displayOrder" in locals_for_with?locals_for_with.displayOrder:typeof displayOrder!=="undefined"?displayOrder:undefined,"hasStars" in locals_for_with?locals_for_with.hasStars:typeof hasStars!=="undefined"?hasStars:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/game-true-or-false/view.coffee", function(exports, require, module) {
var DraggyView, GameNextInOrderView, GameView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

GameView = require("views/base/game");

DraggyView = require("views/components/draggy");

GameNextInOrderView = (function(_super) {
  __extends(GameNextInOrderView, _super);

  function GameNextInOrderView() {
    _ref = GameNextInOrderView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  GameNextInOrderView.prototype.requiresTimeLimit = true;

  GameNextInOrderView.prototype.templates = {
    "default": require("./template"),
    statement: require("./components/statement")
  };

  GameNextInOrderView.prototype.events = function() {
    return {
      "iostap .play-game": "enterGame",
      "iostap .goto-next": "next"
    };
  };

  GameNextInOrderView.prototype.serialize = function() {
    var d;
    d = GameNextInOrderView.__super__.serialize.apply(this, arguments);
    d.falseText = _.hyphenate(d.falseText);
    d.trueText = _.hyphenate(d.trueText);
    d.displayOrder = [
      {
        klass: "game-false",
        text: d.falseText
      }, {
        klass: "game-true",
        text: d.trueText
      }
    ];
    if (this.options.config().direction === "rtl") {
      d.displayOrder.reverse();
    }
    return d;
  };

  GameNextInOrderView.prototype.initializeData = function() {
    GameNextInOrderView.__super__.initializeData.apply(this, arguments);
    this.game.extra.set("fullscreen", true);
    this.game.extra.set("sounds", true);
    return this.setArray("statements", _.filter(this.options.data.statements, function(s) {
      return s.text;
    }));
  };

  GameNextInOrderView.prototype.initializeElements = function() {
    GameNextInOrderView.__super__.initializeElements.apply(this, arguments);
    this.setEl(this.findOne(".game-true"), "true");
    this.setEl(this.findOne(".game-false"), "false");
    this.draggy = new DraggyView({
      el: this.findOne(".game-statement")
    });
    this.listenTo(this.draggy, "drag", this.onDrag);
    return this.listenTo(this.draggy, "drop", this.onDrop);
  };

  GameNextInOrderView.prototype.enterGame = function() {
    GameNextInOrderView.__super__.enterGame.apply(this, arguments);
    return this.draggy.lock();
  };

  GameNextInOrderView.prototype.startGame = function() {
    this.game.timer.timestamp = Date.now();
    this.draggy.unlock();
    this.guesses = [];
    return GameNextInOrderView.__super__.startGame.apply(this, arguments);
  };

  GameNextInOrderView.prototype.onDrag = function(draggy, isInitial) {
    var isLeft, isRight;
    if (draggy.el.classList.contains("hidden")) {
      return;
    }
    isRight = this.isRight(draggy);
    isLeft = this.isLeft(draggy);
    if (this.options.config().direction === "rtl") {
      this.getEl("true").classList.toggle("active", isLeft);
      this.getEl("false").classList.toggle("active", isRight);
    } else {
      this.getEl("true").classList.toggle("active", isRight);
      this.getEl("false").classList.toggle("active", isLeft);
    }
    return this.transform(draggy.el, {
      x: draggy.x,
      y: draggy.y / 1.2,
      rotate: draggy.x * -draggy.y / 5000,
      transition: isInitial ? "all 300ms" : ""
    });
  };

  GameNextInOrderView.prototype.onDrop = function(draggy, isReset) {
    var isComplete, isCorrect, x,
      _this = this;
    if (isReset) {
      return this.transform(draggy.el, {
        x: draggy.x,
        y: draggy.y
      });
    } else {
      if (draggy.el.classList.contains("hidden")) {
        return;
      }
      isComplete = this.didMove(draggy);
      if (isComplete) {
        x = this.el.offsetWidth * Math.abs(draggy.x) / draggy.x;
        draggy.reset({
          x: x,
          y: draggy.y
        });
        this.transition(draggy.el, "all 300ms", true);
        draggy.el.classList.add("hidden");
        isCorrect = this.options.config().direction === "rtl" ? this.isLeft(draggy) === draggy.isTrue : this.isRight(draggy) === draggy.isTrue;
        return window.setTimeout((function() {
          var guess, guessA, guessQ;
          if (isCorrect) {
            _this.onCorrectAnswer({
              score: 1000,
              time: 1000,
              bonus: _this.getBonus(_this.game.timer.timestamp - Date.now(), 500),
              tally: true
            });
          } else {
            _this.onIncorrectAnswer({
              time: 1000,
              score: 700,
              bonus: 300,
              tally: true
            });
          }
          guessQ = draggy.$el.text();
          guessA = draggy.velocity.dir === "left" ? "false" : "true";
          guess = {
            q: guessQ,
            a: guessA
          };
          _this.guesses.push(guess);
          _this.transition(draggy.el, "", true);
          draggy.reset();
          return _this.showNext();
        }), 400);
      } else {
        this.transition(draggy.el, "all 300ms");
        return draggy.reset();
      }
    }
  };

  GameNextInOrderView.prototype.didMove = function(draggy) {
    return this.isRight(draggy) || this.isLeft(draggy);
  };

  GameNextInOrderView.prototype.isRight = function(draggy) {
    return (Math.abs(draggy.velocity.x) > 0.5 && draggy.velocity.dir === "right") || draggy.x > this.el.offsetWidth * 0.33;
  };

  GameNextInOrderView.prototype.isLeft = function(draggy) {
    return (Math.abs(draggy.velocity.x) > 0.5 && draggy.velocity.dir === "left") || draggy.x < -this.el.offsetWidth * 0.33;
  };

  GameNextInOrderView.prototype.showNext = function() {
    var statement;
    this.game.timer.timestamp = Date.now();
    statement = this.getRandom("statements");
    this.getEl("true").classList.remove("active");
    this.getEl("false").classList.remove("active");
    this.draggy.el.innerHTML = statement.text;
    this.draggy.isTrue = statement["true"];
    this.draggy.el.offsetLeft;
    return this.draggy.el.classList.remove("hidden");
  };

  GameNextInOrderView.prototype.answerDetails = function() {
    var questionMetadataByContentDict, questions;
    questions = this.options.metadata.questions || [];
    if (!(questions.length > 0)) {
      return [];
    }
    questionMetadataByContentDict = _.indexBy(questions, function(q) {
      return q.question.content;
    });
    return _.chain(this.guesses).map(function(_arg) {
      var a, q;
      q = _arg.q, a = _arg.a;
      if (questionMetadataByContentDict[q]) {
        return {
          question: questionMetadataByContentDict[q].question,
          answer: _.find(questionMetadataByContentDict[q].answers, function(a) {
            return a.content.toString() === a;
          })
        };
      } else {
        return false;
      }
    }).filter(function(g) {
      return g;
    }).value();
  };

  return GameNextInOrderView;

})(GameView);

module.exports = GameNextInOrderView;
});

;require.register("engine/image-collection/model.yaml", function(exports, require, module) {
module.exports = {"title":"image-collection","display":"Image Collection","category":"Content","description":"Select an image to see more detail","features":{"narration":true},"model":{"title":{"type":"html"},"images":{"display":"List items","type":[{"image":{"type":"image"},"content":{"type":"html"},"narration":{"type":"audio"}}],"min":2,"max":8},"prompt":{"type":"html","default":"Select each image for more details"},"lightbox":{"type":"boolean","default":false,"help":"Focus on the image by hiding other parts of the interface. If a background color is set, that color will be used.\n"},"background":{"type":"html","default":"","display":"Background color","help":"This color (eg. “orange”, “#f90”, “rgb(255,160,0)”) will be used for the background in lightbox mode.\n"}},"examples":[{"title":"Example Image Collection","images":[{"image":"img/examples/product-1.png","content":"This is the original product in our line and is a great source of pride for the company.\n"},{"image":"img/examples/product-2.png","content":"Product Y was introduced to appeal to a broader customers base and was a great success.\n"},{"image":"img/examples/product-3.png","content":"Completing our range is Product Z. It appeals to old and new customers alike, making us a company for everyone.\n"}]}]}
});

;require.register("engine/image-collection/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (continueBtnText, hasNarration, hasPrompt, i18n, prompt, tappies, title, undefined) {
buf.push("<div class=\"block-v-lg content-fill text-center\"><div class=\"tappies-parent content-fill\"><div class=\"thumbnail-collection content-sm-ver content-md-ver content-lg-ver\"><h1 class=\"title slide-down delay-3 tight\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"row tappies text-center\">");
var full = "col-sm-12 col-lg-8 col-lg-offset-2"
var half = "col-sm-6 col-lg-6"
// iterate tappies
;(function(){
  var $$obj = tappies;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var tappy = $$obj[i];

buf.push("<div" + (jade.attr("data-index", i, true, false)) + (jade.cls(['tappy','content-fill','slide-up',"delay-" + (i + 1) + " " + (tappies.length >= 4 ? half : full) + ""], [null,null,null,true])) + "><div class=\"tappy-child content-fill block-dk block-sm\"><img" + (jade.attr("src", tappy.image, true, false)) + " class=\"content-ver thumbnail\"/></div></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var tappy = $$obj[i];

buf.push("<div" + (jade.attr("data-index", i, true, false)) + (jade.cls(['tappy','content-fill','slide-up',"delay-" + (i + 1) + " " + (tappies.length >= 4 ? half : full) + ""], [null,null,null,true])) + "><div class=\"tappy-child content-fill block-dk block-sm\"><img" + (jade.attr("src", tappy.image, true, false)) + " class=\"content-ver thumbnail\"/></div></div>");
    }

  }
}).call(this);

buf.push("</div></div></div><div class=\"details-parent content-fill\">");
// iterate tappies
;(function(){
  var $$obj = tappies;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var tappy = $$obj[i];

buf.push("<div class=\"image-details content-fill\"><div class=\"row content-lg-fill content-sm-ver content-md-ver\"><div class=\"col-lg-6 content-lg-ver\"><img" + (jade.attr("src", tappy.image, true, false)) + " class=\"image-full-size block-v-md\"/></div><div class=\"col-lg-6 content-lg-ver\"><div class=\"caption block-v-md text-md\">" + (null == (jade_interp = tappy.content) ? "" : jade_interp) + "</div></div></div></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var tappy = $$obj[i];

buf.push("<div class=\"image-details content-fill\"><div class=\"row content-lg-fill content-sm-ver content-md-ver\"><div class=\"col-lg-6 content-lg-ver\"><img" + (jade.attr("src", tappy.image, true, false)) + " class=\"image-full-size block-v-md\"/></div><div class=\"col-lg-6 content-lg-ver\"><div class=\"caption block-v-md text-md\">" + (null == (jade_interp = tappy.content) ? "" : jade_interp) + "</div></div></div></div>");
    }

  }
}).call(this);

buf.push("</div></div><div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"tappies" in locals_for_with?locals_for_with.tappies:typeof tappies!=="undefined"?tappies:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/image-collection/view.coffee", function(exports, require, module) {
var ImageCollectionView, Preloader, SlideView, Sound, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Preloader = require("lib/preload");

SlideView = require("views/slide");

Sound = Application.actions().Sound;

ImageCollectionView = (function(_super) {
  __extends(ImageCollectionView, _super);

  function ImageCollectionView() {
    _ref = ImageCollectionView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  ImageCollectionView.prototype.template = require("./template");

  ImageCollectionView.prototype.fitTextOnResize = false;

  ImageCollectionView.prototype.fitTextOnRender = false;

  ImageCollectionView.prototype.events = function() {
    return {
      "iostap .btn-done": "submit",
      "iostap .image-details": "hideDetails",
      "iostap .tappy": "toggleThumbnail"
    };
  };

  ImageCollectionView.prototype.serialize = function() {
    var data;
    data = ImageCollectionView.__super__.serialize.apply(this, arguments);
    data.tappies = _.filter(data.images || [], function(d) {
      return d.image;
    });
    data.hasPrompt = true;
    return data;
  };

  ImageCollectionView.prototype.onResize = function() {
    var images,
      _this = this;
    this.el.classList.remove("active");
    images = _.pluck(this.options.data.images, "image");
    return Preloader.load(_.compact(images), function() {
      _this.setTappyHeight();
      return _this.fitText(function() {
        return window.setTimeout((function() {
          return _this.el.classList.add("active");
        }), 300);
      });
    });
  };

  ImageCollectionView.prototype.show = function() {
    var _i, _ref1, _results;
    this.setEl(this.findOne(".tappies-parent"), "parent");
    this.setEl(this.findOne(".tappies"), "tappies");
    this.setEl(this.findOne(".title"), "title");
    this.setEl(this.findAll(".image-details"), "imageDetails");
    this.listenTo(this, "resize", this.onResize);
    this.onResize();
    this.toVisit = (function() {
      _results = [];
      for (var _i = 0, _ref1 = this.serialize().tappies.length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; 0 <= _ref1 ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this);
    return this.hideDetails();
  };

  ImageCollectionView.prototype.beforeHide = function() {
    if (this.currentSrc) {
      return Sound.fadeOut(this.currentSrc, 500, 0.02);
    }
  };

  ImageCollectionView.prototype.setTappyHeight = function() {
    var el, i, length, outerHeight, tappyHeight, _i, _len, _ref1, _results;
    length = this.getEl("tappies").children.length;
    if (length >= 4) {
      length = Math.ceil(length / 2);
    }
    outerHeight = this.getEl("parent").offsetHeight - this.getEl("title").offsetHeight;
    tappyHeight = outerHeight / length;
    tappyHeight = Math.min(tappyHeight, 220);
    _ref1 = this.getEl("tappies").children;
    _results = [];
    for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
      el = _ref1[i];
      _results.push(el.style.height = "" + tappyHeight + "px");
    }
    return _results;
  };

  ImageCollectionView.prototype.limitImageSize = function(imgDetails) {
    var ch, cw, img, scale, txt;
    img = imgDetails.querySelector(".image-full-size");
    txt = imgDetails.querySelector(".caption");
    ch = imgDetails.offsetHeight - txt.offsetHeight;
    cw = imgDetails.offsetWidth;
    scale = _.max([img.height / ch, img.width / cw]);
    if (scale > 1) {
      return img.style.height = "" + (img.height / scale) + "px";
    }
  };

  ImageCollectionView.prototype.toggleThumbnail = function(e) {
    return this.showDetails(e.currentTarget, true);
  };

  ImageCollectionView.prototype.showDetails = function(tappy, animate) {
    var imgDetails, index, loaded, narration,
      _this = this;
    index = +tappy.dataset.index;
    imgDetails = this.getEl("imageDetails").item(index);
    narration = this.serialize().tappies[index].narration;
    loaded = false;
    if (this.currentSrc) {
      Sound.stop(this.currentSrc);
    }
    if ((this.currentSrc = narration) && !this.withoutNarration) {
      this.showLoadingNarration();
      Sound.play(narration, {
        cb: function() {},
        onProgress: function() {
          if (!loaded) {
            loaded = true;
            return _this.hideLoadingNarration();
          }
        }
      });
    }
    this.toVisit = _.without(this.toVisit, index);
    this.setEl(imgDetails, "active-details");
    if (_.isEmpty(this.toVisit)) {
      this.setState("touched");
    }
    this.setState("active", "details");
    this.showLightbox();
    this.limitImageSize(imgDetails);
    tappy.classList.add("visited");
    return this.transform(imgDetails, {
      opacity: 1,
      transition: animate ? "all 300ms" : ""
    });
  };

  ImageCollectionView.prototype.hideDetails = function() {
    var imgDetails;
    if (this.currentSrc) {
      Sound.fadeOut(this.currentSrc, 500, 0.02);
    }
    if (!(imgDetails = this.getEl("active-details"))) {
      return;
    }
    this.transform(imgDetails, {
      opacity: 0,
      scale: 0.9,
      transition: "all 300ms"
    });
    this.trigger("ui", {
      lightbox: false
    });
    return this.setState("inactive", "details");
  };

  ImageCollectionView.prototype.showLightbox = function() {
    if (this.options.data.lightbox) {
      return this.trigger("ui", {
        lightbox: this.options.data.background || true
      });
    }
  };

  ImageCollectionView.prototype.refresh = function(params) {
    var changed, content, i, tappy, _i, _len, _ref1, _ref2;
    if (params.data.images.length === this.options.data.images.length) {
      _ref1 = params.data.images;
      for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
        content = _ref1[i].content;
        if (content && ((_ref2 = this.options.data.images[i]) != null ? _ref2.content : void 0) !== content) {
          changed = i;
        }
      }
    }
    ImageCollectionView.__super__.refresh.apply(this, arguments);
    if ((changed != null) && (tappy = this.getEl("tappies").children[changed])) {
      return this.showDetails(tappy, false);
    }
  };

  return ImageCollectionView;

})(SlideView);

module.exports = ImageCollectionView;
});

;require.register("engine/image-gallery/model.yaml", function(exports, require, module) {
module.exports = {"title":"image-gallery","display":"Image Gallery","category":"Content","description":"Swipe through a gallery of images","links":{"academy":"https://academy.edapp.com/tag/image-gallery/"},"features":{"narration":true},"model":{"images":{"min":1,"max":10,"type":[{"image":{"type":"image","display":"Image"},"caption":{"type":"html"}}]},"prompt":{"type":"html","default":"Swipe to continue"},"lightbox":{"type":"boolean","default":false,"help":"Focus on the image by hiding other parts of the interface. If a background color is set, that color will be used.\n"},"background":{"type":"html","default":"","display":"Background color","help":"This color (eg. “orange”, “#f90”, “rgb(255,160,0)”) will be used for the background in lightbox mode.\n"}},"examples":[{"images":[{"image":"img/examples/product-1.png","caption":"This is the original product in our line and is a great source of pride for the company.\n"},{"image":"img/examples/product-2.png","caption":"Product Y was introduced to appeal to a broader customers base and was a great success.\n"},{"image":"img/examples/product-3.png","caption":"Completing our range is Product Z. It appeals to old and new customers alike, making us a company for everyone.\n"}]}]}
});

;require.register("engine/image-gallery/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (continueBtnText, hasNarration, hasPrompt, i18n, images, prompt, undefined) {
buf.push("<div class=\"content-wrapper content-fill slide-up\"><div class=\"carousel content-fill delay-6 draggy block-v-xl\"><div" + (jade.attr("style", "width:" + (images.length * 100) + "%;", true, false)) + " class=\"carousel-slider content-fill clearfix\">");
// iterate images
;(function(){
  var $$obj = images;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var item = $$obj[$index];

buf.push("<div" + (jade.attr("style", "width: " + (100 / images.length) + "%;", true, false)) + " class=\"carousel-item content-fill\"><div class=\"row content-lg-fill content-sm-ver content-md-ver\">");
var size = _.compact([item.image, item.caption]).length
var cols = size == 2 ? "col-lg-6" : ""
if ( item.image)
{
buf.push("<div" + (jade.cls(['col-sm-12','content-lg-ver',cols], [null,null,true])) + "><img" + (jade.attr("src", item.image, true, false)) + " class=\"img\"/></div>");
}
if ( item.caption)
{
buf.push("<div" + (jade.cls(['caption','content-fit','col-sm-12','content-lg-ver',cols], [null,null,null,null,true])) + "><div class=\"text-center text-normal text-md block-v-lg\">" + (null == (jade_interp = item.caption) ? "" : jade_interp) + "</div></div>");
}
buf.push("</div></div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var item = $$obj[$index];

buf.push("<div" + (jade.attr("style", "width: " + (100 / images.length) + "%;", true, false)) + " class=\"carousel-item content-fill\"><div class=\"row content-lg-fill content-sm-ver content-md-ver\">");
var size = _.compact([item.image, item.caption]).length
var cols = size == 2 ? "col-lg-6" : ""
if ( item.image)
{
buf.push("<div" + (jade.cls(['col-sm-12','content-lg-ver',cols], [null,null,true])) + "><img" + (jade.attr("src", item.image, true, false)) + " class=\"img\"/></div>");
}
if ( item.caption)
{
buf.push("<div" + (jade.cls(['caption','content-fit','col-sm-12','content-lg-ver',cols], [null,null,null,null,true])) + "><div class=\"text-center text-normal text-md block-v-lg\">" + (null == (jade_interp = item.caption) ? "" : jade_interp) + "</div></div>");
}
buf.push("</div></div>");
    }

  }
}).call(this);

buf.push("</div></div></div>");
if ( images.length > 1)
{
buf.push("<div class=\"pagination\">");
// iterate images
;(function(){
  var $$obj = images;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var item = $$obj[i];

buf.push("<div" + (jade.attr("data-page", i, true, false)) + " class=\"dot\"></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var item = $$obj[i];

buf.push("<div" + (jade.attr("data-page", i, true, false)) + " class=\"dot\"></div>");
    }

  }
}).call(this);

buf.push("</div>");
}
buf.push("<div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"images" in locals_for_with?locals_for_with.images:typeof images!=="undefined"?images:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/image-gallery/view.coffee", function(exports, require, module) {
var Device, DraggyView, ImageGalleryView, Preload, SlideView, fitText, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SlideView = require("views/slide");

DraggyView = require("views/components/draggy");

Preload = require("lib/preload");

Device = require("lib/device");

fitText = require("lib/fit-text");

ImageGalleryView = (function(_super) {
  __extends(ImageGalleryView, _super);

  function ImageGalleryView() {
    _ref = ImageGalleryView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  ImageGalleryView.prototype.template = require("./template");

  ImageGalleryView.prototype.currentIndex = 0;

  ImageGalleryView.prototype.events = {
    "iostap .btn-done": "submit",
    "iostap .dot": "goToPage"
  };

  ImageGalleryView.prototype.serialize = function() {
    var data;
    data = ImageGalleryView.__super__.serialize.apply(this, arguments);
    this.options.data.images = data.images = (data.images || []).filter(function(m) {
      return m.image || m.caption.length > 0;
    });
    if (this.options.config().direction === "rtl") {
      data.images = data.images.reverse();
    }
    data.hasPrompt = data.images.length > 1;
    return data;
  };

  ImageGalleryView.prototype.beforeShow = function() {
    var lightboxColor;
    lightboxColor = this.options.data.lightbox ? void 0 : "default";
    if (this.options.data.lightbox) {
      return this.trigger("ui", {
        lightbox: this.options.data.background || true
      });
    } else {
      return this.trigger("ui", {
        lightbox: false
      });
    }
  };

  ImageGalleryView.prototype.onRefresh = function() {
    ImageGalleryView.__super__.onRefresh.apply(this, arguments);
    return this.beforeShow();
  };

  ImageGalleryView.prototype.show = function(index) {
    var el, len, min, x, _ref1;
    if (index == null) {
      index = 0;
    }
    if ((_ref1 = this.draggy) != null) {
      _ref1.undelegateEvents();
    }
    this.draggy = null;
    if (!this.draggy) {
      el = this.findOne(".carousel");
      this.setEl(el.firstChild, "scroller");
      if (this.options.data.images.length > 1) {
        this.setEl(this.findOne(".pagination"), "pagination");
        len = this.options.data.images.length - 1;
        min = -el.offsetWidth * len;
        this.draggy = new DraggyView({
          el: el,
          minX: min,
          maxX: 0,
          lock: "y"
        });
        this.listenTo(this.draggy, "drag", this.onDrag);
        this.listenTo(this.draggy, "drop", this.onDrop);
        if (this.options.config().direction === "rtl") {
          x = -this.draggy.el.offsetWidth * (len - Math.min(index, len));
        } else {
          x = -this.draggy.el.offsetWidth * Math.min(index, len);
        }
        this.draggy.reset({
          x: x
        });
      } else {
        this.getEl("scroller").firstChild.style.opacity = 1;
      }
      this.listenTo(this, "resize", this.onResize);
      this.onResize();
      return this.limitImageSize();
    }
  };

  ImageGalleryView.prototype.limitImageSize = function() {
    var height, images,
      _this = this;
    images = _.chain(this.options.data.images).pluck("image").compact().value();
    height = this.getEl("scroller").offsetHeight;
    return Preload.load(images, function() {
      var child, i, img, maxH, shouldFitText, text, _i, _len, _ref1, _results;
      _ref1 = _this.getEl("scroller").children;
      _results = [];
      for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
        child = _ref1[i];
        child.style.fontSize = "";
        img = child.querySelector(".img");
        if (img) {
          maxH = height;
          if (Device.breakpoint(["xs", "sm", "md"])) {
            text = child.querySelector(".caption");
            maxH -= (text != null ? text.offsetHeight : void 0) || 0;
          } else {
            shouldFitText = true;
          }
          img.style.maxHeight = "" + maxH + "px";
        }
        if (shouldFitText) {
          _results.push(fitText(child));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    });
  };

  ImageGalleryView.prototype.onDrag = function(draggy, isInitial) {
    var transition;
    transition = isInitial ? "all 300ms" : "none";
    this.transform(this.getEl("scroller"), {
      x: this.getScrollDist(draggy),
      transition: transition
    });
    return this.updateChildren(draggy, transition);
  };

  ImageGalleryView.prototype.onDrop = function(draggy, isReset) {
    var dot, func, i, m, step, transition, x, _i, _len, _ref1;
    if (isReset) {
      transition = this.currentIndex != null ? "all 300ms" : "";
      this.currentIndex = Math.floor(-draggy.x / draggy.offset.width);
      this.transform(this.getEl("scroller"), {
        x: this.getScrollDist(draggy),
        transition: transition
      });
      this.updateChildren(draggy, transition);
    } else {
      x = draggy.velocity.x;
      m = 0.9;
      func = x < -m ? "ceil" : x > m ? "floor" : "round";
      step = Math[func](Math.min(draggy.x / draggy.offset.width, 1));
      draggy.reset({
        x: step * draggy.offset.width
      });
    }
    _ref1 = this.getEl("pagination").children;
    for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
      dot = _ref1[i];
      dot.classList.toggle("active", i === this.currentIndex);
    }
    if (this.options.config().direction === "rtl") {
      if (this.currentIndex === 0) {
        return this.setState("touched");
      }
    } else {
      if (this.currentIndex === this.options.data.images.length - 1) {
        return this.setState("touched");
      }
    }
  };

  ImageGalleryView.prototype.goToPage = function(e) {
    var index, total;
    index = e.currentTarget.dataset.page;
    total = this.options.data.images.length - 1;
    return this.draggy.reset({
      x: (index / total) * this.draggy.options.minX
    });
  };

  ImageGalleryView.prototype.updateChildren = function(draggy, transition) {
    var child, i, width, _i, _len, _ref1, _results;
    width = draggy.offset.width;
    _ref1 = this.getEl("scroller").children;
    _results = [];
    for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
      child = _ref1[i];
      if (transition) {
        child.classList.toggle("active", i === this.currentIndex);
        this.transition(child, transition, true);
      }
      _results.push(this.transform(child, {
        scale: 1 - Math.abs(draggy.x + (i * width)) / width / 5,
        opacity: 1 - Math.abs(draggy.x + (i * width)) / width
      }));
    }
    return _results;
  };

  ImageGalleryView.prototype.getScrollDist = function(draggy) {
    return "" + (draggy.x / draggy.offset.width / this.options.data.images.length * 100) + "%";
  };

  ImageGalleryView.prototype.onResize = function() {
    var scroller;
    this.limitImageSize();
    if (scroller = this.getEl("scroller") && this.draggy) {
      this.draggy.options.minX = -this.draggy.el.offsetWidth * (this.options.data.images.length - 1);
      return this.draggy.getOffset();
    }
  };

  ImageGalleryView.prototype.refresh = function(params) {
    var changed, i, image, _i, _len, _ref1;
    _ref1 = params.data.images;
    for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
      image = _ref1[i];
      if (!_.isEqual(image, this.options.data.images[i])) {
        changed = i;
      }
    }
    ImageGalleryView.__super__.refresh.apply(this, arguments);
    if (this.draggy) {
      this.draggy.undelegateEvents();
      this.draggy = this.currentIndex = null;
    }
    return this.show(changed);
  };

  return ImageGalleryView;

})(SlideView);

module.exports = ImageGalleryView;
});

;require.register("engine/image-map/model.yaml", function(exports, require, module) {
module.exports = {"title":"image-map","display":"Image Map","category":"Content","description":"Map out details through a series of images","model":{"url":{"type":"image","default":"","display":"Image Map"},"waypoints":{"min":1,"max":20,"type":[{"region":{"type":"image-region","for":"url"},"image":{"type":"image"},"caption":{"type":"html","default":""},"narration":{"type":"audio"}}]},"zoom":{"type":"boolean","default":true,"help":"Recenter the map image on the region after is has been selected.\n"},"appearance":{"waypointColor":{"display":"Waypoint Style","type":"html","default":"White","enum":["Black","White","None"]}},"prompt":{"type":"html","default":"Explore each region of the image"},"lightbox":{"background":{"type":"html","default":"","display":"Background Color","help":"This color (eg. \"orange\", \"#f90\", \"rgb(255,160,0)\") will be used for the background of the entire screen in lightbox mode.\n"},"textColor":{"display":"Text Color","type":"html","default":"White","enum":["Black","White"]}}},"examples":[{"url":"img/examples/product-1-xl.png","guided":true,"waypoints":[{"region":{"xMin":0.4,"xMax":0.76,"yMin":0.2,"yMax":0.5},"image":"img/examples/product-1.png","caption":"\n# Product X\nThe product design harks back to our classic product.\n"},{"region":{"xMin":0.15,"xMax":0.4,"yMin":0.35,"yMax":0.65},"image":"img/examples/product-2.png","caption":"\n# Product Y\nNutrition Facts reflect changes since Product Y was introduced.\n"},{"region":{"xMin":0.16,"xMax":0.32,"yMin":0.76,"yMax":0.92},"image":"img/examples/product-3.png","caption":"\n# Product Z\nThe QR code links to a teaser for our latest product.\n"}]},{"url":"img/examples/flow-1.png","zoom":false,"waypoints":[{"region":{"xMin":0.66,"xMax":1,"yMin":0.25,"yMax":0.5},"image":"img/examples/flow-2.png","caption":"\n# Process Flow\nAt this point in the process, those who answer no move directly\nto the end.\n"}],"lightbox":{"background":"transparent"},"appearance":{"waypointColor":"None"}}]}
});

;require.register("engine/image-map/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (continueBtnText, hasNarration, hasPrompt, i18n, prompt, undefined, url, waypoints) {
buf.push("<div class=\"content-fill text-center block-v-md\"><div class=\"image-container block-inline content-fill\"><img" + (jade.attr("src", url, true, false)) + " class=\"img-map content-ver\"/><div class=\"waypoints content\">");
// iterate waypoints
;(function(){
  var $$obj = waypoints;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var w = $$obj[i];

buf.push("<div" + (jade.attr("style", ([
            "left: " + (w.region.xMin * 100) + "%",
            "top: " + (w.region.yMin * 100) + "%",
            "width: " + ((w.region.xMax - w.region.xMin) * 100) + "%",
            "height: " + ((w.region.yMax - w.region.yMin) * 100) + "%"
          ].join(";")), true, false)) + (jade.attr("data-index", i, true, false)) + " class=\"waypoint\"></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var w = $$obj[i];

buf.push("<div" + (jade.attr("style", ([
            "left: " + (w.region.xMin * 100) + "%",
            "top: " + (w.region.yMin * 100) + "%",
            "width: " + ((w.region.xMax - w.region.xMin) * 100) + "%",
            "height: " + ((w.region.yMax - w.region.yMin) * 100) + "%"
          ].join(";")), true, false)) + (jade.attr("data-index", i, true, false)) + " class=\"waypoint\"></div>");
    }

  }
}).call(this);

buf.push("</div></div></div>");
// iterate waypoints
;(function(){
  var $$obj = waypoints;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var w = $$obj[i];

buf.push("<div class=\"waypoint-img content-fill text-center block-v-md\"><img" + (jade.attr("src", w.image, true, false)) + " class=\"content-ver\"/></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var w = $$obj[i];

buf.push("<div class=\"waypoint-img content-fill text-center block-v-md\"><img" + (jade.attr("src", w.image, true, false)) + " class=\"content-ver\"/></div>");
    }

  }
}).call(this);

buf.push("<div class=\"full-screen\"><div class=\"navigation text-center\"><div class=\"caption text-md block-lg\"></div></div></div><div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined,"url" in locals_for_with?locals_for_with.url:typeof url!=="undefined"?url:undefined,"waypoints" in locals_for_with?locals_for_with.waypoints:typeof waypoints!=="undefined"?waypoints:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/image-map/view.coffee", function(exports, require, module) {
var ImageMapView, SlideView, Sound, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SlideView = require("views/slide");

Sound = Application.actions().Sound;

ImageMapView = (function(_super) {
  __extends(ImageMapView, _super);

  function ImageMapView() {
    _ref = ImageMapView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  ImageMapView.prototype.template = require("./template");

  ImageMapView.prototype.events = {
    "iostap .btn-done": "submit",
    "iostap .waypoint": "tapWaypoint",
    "iostap": "exitWaypoint"
  };

  ImageMapView.prototype.serialize = function() {
    var data, waypoint, _i, _len, _ref1;
    data = ImageMapView.__super__.serialize.apply(this, arguments);
    data.hasPrompt = true;
    _ref1 = data.waypoints;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      waypoint = _ref1[_i];
      waypoint.center = this.getCenter(waypoint.region);
    }
    return data;
  };

  ImageMapView.prototype.submit = function(e) {
    if (e != null) {
      e.stopImmediatePropagation();
    }
    return ImageMapView.__super__.submit.apply(this, arguments);
  };

  ImageMapView.prototype.beforeHide = function() {
    this.trigger("ui", {
      lightbox: false
    });
    if (this.currentSrc) {
      return Sound.fadeOut(this.currentSrc, 500, 0.02);
    }
  };

  ImageMapView.prototype.hide = function() {
    this.exitWaypoint();
    return this.el.classList.remove("is-loaded");
  };

  ImageMapView.prototype.refresh = function(params) {
    var caption, changed, i, _i, _len, _ref1, _ref2,
      _this = this;
    _ref1 = params.data.waypoints;
    for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
      caption = _ref1[i].caption;
      if (caption !== ((_ref2 = this.options.data.waypoints[i]) != null ? _ref2.caption : void 0)) {
        changed = i;
      }
    }
    ImageMapView.__super__.refresh.apply(this, arguments);
    this.beforeShow();
    this.show(false);
    if (changed != null) {
      this.el.classList.add("no-transition");
      this.goToWaypoint(changed);
      return _.delay((function() {
        return _this.el.classList.remove("no-transition");
      }), 1);
    }
  };

  ImageMapView.prototype.onRefresh = function() {};

  ImageMapView.prototype.onResize = function() {
    this.getEl("waypoints").removeAttribute("style");
    return this.setContainerDimensions();
  };

  ImageMapView.prototype.beforeShow = function() {
    this.setState(false, "zoom");
    return this.setState(this.options.data.zoom.toString(), "recenter");
  };

  ImageMapView.prototype.setTextColor = function(lightbox) {
    var color, _ref1, _ref2;
    if (color = lightbox != null ? (_ref1 = lightbox.textColor) != null ? _ref1.toLowerCase() : void 0 : void 0) {
      return this.el.style.color = lightbox != null ? (_ref2 = lightbox.textColor) != null ? _ref2.toLowerCase() : void 0 : void 0;
    }
  };

  ImageMapView.prototype.setWaypointColor = function(appearance) {
    var color, _ref1;
    if (color = appearance != null ? (_ref1 = appearance.waypointColor) != null ? _ref1.toLowerCase() : void 0 : void 0) {
      return this.el.classList.add("waypoint-" + color);
    }
  };

  ImageMapView.prototype.showLightbox = function() {
    var _ref1;
    this.setState(true, "zoom");
    return this.trigger("ui", {
      lightbox: ((_ref1 = this.options.data.lightbox) != null ? _ref1.background : void 0) || true
    });
  };

  ImageMapView.prototype.show = function(fadeImage) {
    var img,
      _this = this;
    if (fadeImage == null) {
      fadeImage = true;
    }
    this.setEl(img = this.findOne(".img-map"), "image");
    if (img == null) {
      return;
    }
    this.setEl(this.findOne(".caption"), "caption");
    this.setEl(this.findOne(".waypoints"), "waypoints");
    this.setEl(this.findOne(".navigation"), "navigation");
    this.setEl(this.findOne(".image-container"), "container");
    this.setEl(this.findAll(".waypoint-img"), "images");
    this.setState("prompt");
    this.setState(false, "zoom");
    this.setTextColor(this.options.data.lightbox);
    this.setWaypointColor(this.options.data.appearance);
    this.listenTo(this, "resize", this.onResize);
    if (!fadeImage) {
      this.el.classList.add("no-transition");
    }
    if (img != null ? img.complete : void 0) {
      return this.setDimensions();
    } else if (img != null) {
      return img.onload = function() {
        return _this.setDimensions();
      };
    }
  };

  ImageMapView.prototype.setDimensions = function() {
    var i, waypoint, _i, _len, _ref1, _results;
    this.setContainerDimensions();
    this.el.classList.add("is-loaded");
    this.el.offsetLeft;
    this.el.classList.remove("no-transition");
    _ref1 = this.options.data.waypoints;
    _results = [];
    for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
      waypoint = _ref1[i];
      _results.push(this.scaleDown(i));
    }
    return _results;
  };

  ImageMapView.prototype.getCenter = function(wp) {
    return {
      x: (wp.xMin + wp.xMax) / 2,
      y: (wp.yMin + wp.yMax) / 2
    };
  };

  ImageMapView.prototype.allWaypointsTapped = function() {
    return _.reduce(this.getEl("waypoints").children, function(allTapped, el) {
      return allTapped && el.dataset.tapped;
    }, true);
  };

  ImageMapView.prototype.tapWaypoint = function(e) {
    var el;
    el = e.target;
    e.stopImmediatePropagation();
    this.goToWaypoint(+el.dataset.index);
    el.dataset.tapped = "true";
    el.classList.add("tapped");
    if (this.allWaypointsTapped()) {
      return this.setState("touched");
    }
  };

  ImageMapView.prototype.limits = function() {
    return {
      min: 0,
      max: this.options.data.waypoints.length - 1
    };
  };

  ImageMapView.prototype.goToWaypoint = function(currentIndex) {
    var caption, loaded, narration, region, _ref1,
      _this = this;
    this.currentIndex = currentIndex;
    _ref1 = this.options.data.waypoints[this.currentIndex], region = _ref1.region, caption = _ref1.caption, narration = _ref1.narration;
    loaded = false;
    if (this.currentSrc) {
      Sound.stop(this.currentSrc);
    }
    if ((this.currentSrc = narration) && !this.withoutNarration) {
      this.showLoadingNarration();
      Sound.play(narration, {
        cb: function() {},
        onProgress: function() {
          if (!loaded) {
            loaded = true;
            return _this.hideLoadingNarration();
          }
        }
      });
    }
    this.getEl("images").item(this.currentIndex).classList.add("active");
    this.showLightbox();
    this.toggleCaption(caption);
    return this.scaleUp(this.currentIndex);
  };

  ImageMapView.prototype.exitWaypoint = function() {
    if (this.currentIndex == null) {
      return;
    }
    if (this.currentSrc) {
      Sound.fadeOut(this.currentSrc, 500, 0.02);
    }
    this.getEl("images").item(this.currentIndex).classList.remove("active");
    this.toggleCaption();
    this.setState(false, "zoom");
    this.trigger("ui", {
      lightbox: false
    });
    this.scaleDown(this.currentIndex);
    this.transform(this.getEl("image"), {
      scale: 1,
      y: "-50%"
    });
    return delete this.currentIndex;
  };

  ImageMapView.prototype.scaleDown = function(index) {
    var scale, waypoint, wimage, wp, x;
    waypoint = this.options.data.waypoints[index];
    wimage = this.getEl("images").item(index);
    wp = this.getEl("waypoints").children[index];
    scale = this.scaleForWaypoint(waypoint);
    x = this.options.data.zoom ? -(wimage.offsetWidth / 2) + (wp.getBoundingClientRect().left + wp.offsetWidth / 2) : 1;
    return this.transform(wimage, {
      scale: 1 / scale,
      x: x,
      y: "-50%"
    });
  };

  ImageMapView.prototype.scaleUp = function(index) {
    var image, navBounds, scaleToUse, waypoint, wimage, wp, x, y, yOffset, _ref1, _ref2;
    waypoint = this.options.data.waypoints[index];
    image = this.getEl("image");
    wp = this.getEl("waypoints").children[index];
    wimage = this.getEl("images").item(index);
    navBounds = this.getEl("navigation").getBoundingClientRect();
    _ref1 = this.getCenter(waypoint.region), x = _ref1.x, y = _ref1.y;
    yOffset = -(window.innerHeight - navBounds.top) / 2 / image.height;
    yOffset *= 0.75;
    if (this.options.data.zoom) {
      _ref2 = this.getCenter(waypoint.region), x = _ref2.x, y = _ref2.y;
      scaleToUse = this.scaleForWaypoint(waypoint);
    } else {
      x = 0.5;
      y = 0.5;
      scaleToUse = 1;
    }
    this.transform(image, {
      x: scaleToUse * 100 * (0.5 - x) + "%",
      y: -50 + yOffset * 100 + scaleToUse * 100 * (0.5 - y) + "%",
      scale: scaleToUse
    });
    return this.transform(wimage, {
      y: -50 + 100 * (yOffset * image.offsetHeight) / wimage.offsetHeight + "%",
      scale: 1
    });
  };

  ImageMapView.prototype.scaleForWaypoint = function(waypoint) {
    var heightScale, image, index, navBounds, region, regionHeight, regionWidth, scaleToUse, viewportHeight, viewportWidth, widthScale, wimage, wp;
    if (this.options.data.zoom) {
      index = this.options.data.waypoints.indexOf(waypoint);
      region = waypoint.region;
      image = this.getEl("image");
      wp = this.getEl("waypoints").children[index];
      wimage = this.getEl("images").item(index);
      navBounds = this.getEl("navigation").getBoundingClientRect();
      viewportWidth = wimage.firstChild.offsetWidth;
      viewportHeight = wimage.firstChild.offsetHeight;
      regionWidth = (region.xMax - region.xMin) * image.offsetWidth;
      regionHeight = (region.yMax - region.yMin) * image.offsetHeight;
      widthScale = viewportWidth / regionWidth;
      heightScale = viewportHeight / regionHeight;
      return scaleToUse = Math.min(widthScale, heightScale);
    } else {
      return scaleToUse = 1;
    }
  };

  ImageMapView.prototype.toggleCaption = function(caption) {
    var _ref1;
    if (caption == null) {
      caption = false;
    }
    this.setState(Boolean(caption), "caption");
    if (caption) {
      this.getEl("caption").innerHTML = caption;
    }
    if (caption == null) {
      return this.getEl("caption").style.background = "";
    } else if ((_ref1 = this.options.data.lightbox) != null ? _ref1.background : void 0) {
      return this.getEl("caption").style.background = this.options.data.lightbox.background;
    }
  };

  ImageMapView.prototype.setContainerDimensions = function() {
    this.getEl("waypoints").style.height = "" + (this.getEl("image").offsetHeight) + "px";
    return this.getEl("waypoints").style.width = "" + (this.getEl("image").offsetWidth) + "px";
  };

  return ImageMapView;

})(SlideView);

module.exports = ImageMapView;
});

;require.register("engine/image-multiple-choice/model.yaml", function(exports, require, module) {
module.exports = {"title":"image-multiple-choice","display":"Multiple Choice: Image","category":"Multiple Choice","features":{"stars":true},"description":"Select the correct image(s)","model":{"title":{"types":["text","image","audio","video"],"default":""},"selectable":{"display":"Number of selectable answers","default":1,"type":"number"},"answers":{"display":"List items","type":[{"image":{"type":"image"},"correct":{"type":"boolean"}}],"min":2,"max":9},"reject":{"type":"boolean","default":false,"display":"Reject Answers","help":"Users will not be able to select incorrect answers.\n"},"answer":{"text":{"type":"html","default":"","display":"Answer Text"},"correct":{"type":"html","default":"That's correct!","display":"Correct Reinforcement"},"incorrect":{"type":"html","default":"Not quite...","display":"Incorrect Reinforcement"},"takeaway":{"type":"html","default":"","display":"Core Message"}},"prompt":{"type":"html","default":"Select the correct answer"},"game":{"timer":{"limit":{"type":"number","default":-1,"display":"Time Limit (ms)"}}}},"examples":[{"title":"Which is the correct product?","selectable":1,"reject":false,"horizontal":true,"answers":[{"image":"img/examples/product-1.png","correct":true},{"image":"img/examples/product-2.png"},{"image":"img/examples/product-3.png"}],"answer":{"incorrect":"Not quite...","correct":"That's correct!","text":"Product X is correct.\n"}}]}
});

;require.register("engine/image-multiple-choice/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (config, continueBtnText, game, hasNarration, hasPrompt, i18n, prompt, tappies, undefined) {
jade_mixins["multi-content"] = jade_interp = function(prop, obj){
var block = (this && this.block), attributes = (this && this.attributes) || {};
obj = obj || locals;
switch (obj[prop + "Type"]){
case "image":
buf.push("<div" + (jade.attr("data-content", obj.image, true, false)) + " class=\"multi-content-wrapper multi-content-wrapper-image block-md block-lt\"><div class=\"block-sm multi-content-media\"><img" + (jade.attr("src", obj[prop], true, false)) + " class=\"multi-content multi-content-image\"/></div></div>");
  break;
case "video":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-video block-md block-lt\"><div class=\"block-sm multi-content-media\"><video" + (jade.attr("src", obj[prop], true, false)) + " webkit-playsinline=\"webkit-playsinline\" playsinline=\"playsinline\" preload=\"auto\" controls=\"controls\"" + (jade.attr("dir", config.direction, true, false)) + " class=\"video-js multi-content multi-content-video block-dk\"></video></div></div>");
  break;
case "audio":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-audio block-md block-lt\"><div class=\"block-sm multi-content-media\"><audio" + (jade.attr("src", obj[prop], true, false)) + " webkit-playsinline=\"webkit-playsinline\" playsinline=\"playsinline\" preload=\"auto\" controls=\"controls\"" + (jade.attr("dir", config.direction, true, false)) + " class=\"multi-content multi-content-audio block-dk\"></audio></div></div>");
  break;
case "iframe":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-iframe block-md block-lt\"><div class=\"block-sm multi-content-iframe\">");
var iframe = obj[prop].match(/<iframe[^<]*<\/iframe>/)
if ( iframe)
{
buf.push(null == (jade_interp = iframe[0].replace(/ (width|height)=["'\d\w]+/g, "")) ? "" : jade_interp);
}
buf.push("</div></div>");
  break;
default:
buf.push("<span class=\"multi-content multi-content-text\">" + (null == (jade_interp = obj[prop]) ? "" : jade_interp) + "</span>");
  break;
}
};
if ( game && game.timer && game.timer.limit > 0)
{
buf.push("<div class=\"full-screen\"><div class=\"game-stepper text-lg text-bold\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div></div>");
}
buf.push("<div class=\"content-fill text-center block-v-lg\"><div class=\"tappies-parent content-fill content-fit\"><h1 class=\"title block-v-md slide-up delay-3 tight\">");
jade_mixins["multi-content"]("title");
buf.push("</h1><div class=\"tappies\">");
// iterate tappies
;(function(){
  var $$obj = tappies;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var tappy = $$obj[i];

buf.push("<div" + (jade.attr("data-answer-id", tappy.id, true, false)) + (jade.cls(['tappy','block-md','delay-4','selectable',(i % 2 == 0 ? "slide-up" : "slide-down") + " delay-" + (i + 1) + "",tappy.correct ? "correct" : "incorrect"], [null,null,null,null,true,true])) + "><div class=\"tappy-content block-dk block-sm content-fill block-frame\"><img" + (jade.attr("src", tappy.image, true, false)) + " class=\"tappy-img content-ver\"/><div class=\"tappy-selection block-dk text-bold text-lg\"></div></div></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var tappy = $$obj[i];

buf.push("<div" + (jade.attr("data-answer-id", tappy.id, true, false)) + (jade.cls(['tappy','block-md','delay-4','selectable',(i % 2 == 0 ? "slide-up" : "slide-down") + " delay-" + (i + 1) + "",tappy.correct ? "correct" : "incorrect"], [null,null,null,null,true,true])) + "><div class=\"tappy-content block-dk block-sm content-fill block-frame\"><img" + (jade.attr("src", tappy.image, true, false)) + " class=\"tappy-img content-ver\"/><div class=\"tappy-selection block-dk text-bold text-lg\"></div></div></div>");
    }

  }
}).call(this);

buf.push("</div></div></div><div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"game" in locals_for_with?locals_for_with.game:typeof game!=="undefined"?game:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"tappies" in locals_for_with?locals_for_with.tappies:typeof tappies!=="undefined"?tappies:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/image-multiple-choice/view.coffee", function(exports, require, module) {
var ImageMultipleChoiceView, MultipleChoiceView, Prefix, Preloader, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

MultipleChoiceView = require("../multiple-choice-game/view");

Preloader = require("lib/preload");

Prefix = require("lib/prefix");

ImageMultipleChoiceView = (function(_super) {
  __extends(ImageMultipleChoiceView, _super);

  function ImageMultipleChoiceView() {
    _ref = ImageMultipleChoiceView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  ImageMultipleChoiceView.prototype.template = require("./template");

  ImageMultipleChoiceView.prototype.fitTextOnResize = false;

  ImageMultipleChoiceView.prototype.fitTextOnRender = false;

  ImageMultipleChoiceView.prototype.serialize = function() {
    var answers, data, _ref1, _ref2;
    data = ImageMultipleChoiceView.__super__.serialize.apply(this, arguments);
    answers = (((_ref1 = this.options.metadata.questions) != null ? (_ref2 = _ref1[0]) != null ? _ref2.answers : void 0 : void 0) || []).filter(function(el) {
      return el && el.content;
    }).map(function(el) {
      return {
        image: el.content,
        correct: el.correct,
        id: el.id
      };
    });
    data.tappies = _.shuffle(answers);
    return data;
  };

  ImageMultipleChoiceView.prototype.answerDetails = function() {
    var answers, details, ids, question, questions;
    questions = this.options.metadata.questions || [];
    if (!(questions.length > 0)) {
      return [];
    }
    question = questions[0];
    ids = this.getEl("selected").map(function(e) {
      return this.$(e).data('answer-id');
    });
    answers = question.answers.filter(function(a) {
      var _ref1;
      return _ref1 = a.id, __indexOf.call(ids, _ref1) >= 0;
    });
    details = answers.map(function(a) {
      return {
        question: question.question,
        answer: a
      };
    });
    return details;
  };

  ImageMultipleChoiceView.prototype.onResize = function() {
    return this.setTappyHeight(true);
  };

  ImageMultipleChoiceView.prototype.show = function() {
    ImageMultipleChoiceView.__super__.show.apply(this, arguments);
    this.listenTo(this, "resize", this.onResize);
    return this.setTappyHeight();
  };

  ImageMultipleChoiceView.prototype.setTappyHeight = function(isResize) {
    var _ref1,
      _this = this;
    if (!(((_ref1 = this.currentState) != null ? _ref1.refresh : void 0) || isResize)) {
      this.el.classList.remove("active");
    }
    this.setEl(this.findOne(".tappies-parent"), "tappy-parent");
    this.setEl(this.findAll(".tappy"), "tappies");
    this.setEl(this.findOne(".title"), "title");
    this.setEl(this.findOne(".tappies"), "tappy-container");
    return Preloader.load(_.pluck(this.findAll("img"), "src"), function(errors, imgs) {
      var cols, container, cratio, el, factor, iratio, parent, rows, tappies, title, _i, _j, _len, _len1, _ref2, _ref3;
      parent = _this.getEl("tappy-parent");
      container = _this.getEl("tappy-container");
      title = _this.getEl("title");
      tappies = _this.serialize().tappies;
      _ref2 = _this.getEl("tappies");
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        el = _ref2[_i];
        el.style.opacity = 0;
      }
      container.style.height = parent.offsetHeight - title.offsetHeight + "px";
      iratio = _.chain(imgs).map(function(el) {
        return el.naturalWidth / el.naturalHeight;
      }).average().value();
      cratio = parent.offsetWidth / (parent.offsetHeight - title.offsetHeight);
      factor = cratio / iratio;
      rows = Math.round(Math.sqrt(tappies.length * (iratio / cratio), 2));
      rows = Math.max(Math.min(rows, tappies.length), 1);
      cols = Math.round((tappies.length + tappies.length % rows) / rows);
      _ref3 = _this.getEl("tappies");
      for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
        el = _ref3[_j];
        el.style.height = "" + (100 / rows) + "%";
        el.style.width = "" + (100 / cols) + "%";
        el.offsetWidth;
        el.style.opacity = "";
      }
      return _this.fitText(function() {
        return window.setTimeout((function() {
          return _this.el.classList.add("active");
        }), 300);
      });
    });
  };

  return ImageMultipleChoiceView;

})(MultipleChoiceView);

module.exports = ImageMultipleChoiceView;
});

;require.register("engine/image-pair/model.yaml", function(exports, require, module) {
module.exports = {"title":"image-pair","display":"Image Pairs","category":"Relationships","features":{"stars":true},"model":{"title":{"type":"text","default":"Select the correct image in each group"},"multi":{"type":"boolean","default":false,"display":"Select more than one correct answer"},"reject":{"type":"boolean","default":false,"display":"Reject incorrect answers"},"groups":{"display":"Pairs","min":1,"max":4,"type":[{"images":{"min":2,"max":2,"type":[{"image":{"type":"image"},"correct":{"type":"boolean"}}]}}]},"answer":{"text":{"type":"html","default":"","display":"Answer Text"},"correct":{"type":"text","default":"That's correct!","display":"Correct Reinforcement"},"incorrect":{"type":"text","default":"Not quite...","display":"Incorrect Reinforcement"},"takeaway":{"type":"text","default":"","display":"Core Message"}},"prompt":{"type":"text","default":"Select each correct image"},"game":{"timer":{"limit":{"type":"number","default":-1,"display":"Time Limit (ms)"}}}},"examples":[{"title":"Which is our first product?\n","multi":true,"groups":[{"images":[{"image":"img/examples/product-1.png","correct":true},{"image":"img/examples/product-2.png","correct":false}]},{"images":[{"image":"img/examples/product-2.png","correct":false},{"image":"img/examples/product-1.png","correct":true}]},{"images":[{"image":"img/examples/product-1.png","correct":true},{"image":"img/examples/product-1.png","correct":true}]},{"images":[{"image":"img/examples/product-2.png","correct":false},{"image":"img/examples/product-3.png","correct":false}]}]}]}
});

;require.register("engine/image-pair/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (continueBtnText, game, hasNarration, hasPrompt, i18n, klass, metadata, prompt, title, undefined) {
if ( game && game.timer && game.timer.limit > 0)
{
buf.push("<div class=\"full-screen\"><div class=\"game-stepper text-lg text-bold\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div></div>");
}
buf.push("<div class=\"content-fill\"><div class=\"block-v-md content-fill content-sm-ver content-md-ver\"><div class=\"row content-fill content-area text-center\"><div class=\"col-sm-12 col-lg-6 content-lg-ver\"><h1 class=\"title tight block-v-md\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1></div><div class=\"col-sm-12 col-lg-6\">");
// iterate metadata.questions
;(function(){
  var $$obj = metadata.questions;
  if ('number' == typeof $$obj.length) {

    for (var j = 0, $$l = $$obj.length; j < $$l; j++) {
      var pair = $$obj[j];

var question = pair.question;
var answers = pair.answers;
buf.push("<div class=\"row\">");
// iterate _.shuffle(pair.answers)
;(function(){
  var $$obj = _.shuffle(pair.answers);
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var answer = $$obj[i];

klass  = answer.correct ? "correct" : "incorrect"
klass += i === 0 ? " left" : " right"
buf.push("<div class=\"col-sm-6 block-v-sm slide-up hide-overflow block-box-sizing\"><div" + (jade.attr("data-correct", answer.correct, true, false)) + (jade.attr("data-content", answer.content, true, false)) + (jade.attr("data-answer-id", answer.id, true, false)) + (jade.attr("data-question-id", question.id, true, false)) + (jade.attr("data-group", j, true, false)) + (jade.attr("data-image", i, true, false)) + (jade.cls(['image-container','block-dk','block-sm','content-fill',klass], [null,null,null,null,true])) + "><img" + (jade.attr("src", answer.content, true, false)) + " class=\"img content-ver block\"/></div></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var answer = $$obj[i];

klass  = answer.correct ? "correct" : "incorrect"
klass += i === 0 ? " left" : " right"
buf.push("<div class=\"col-sm-6 block-v-sm slide-up hide-overflow block-box-sizing\"><div" + (jade.attr("data-correct", answer.correct, true, false)) + (jade.attr("data-content", answer.content, true, false)) + (jade.attr("data-answer-id", answer.id, true, false)) + (jade.attr("data-question-id", question.id, true, false)) + (jade.attr("data-group", j, true, false)) + (jade.attr("data-image", i, true, false)) + (jade.cls(['image-container','block-dk','block-sm','content-fill',klass], [null,null,null,null,true])) + "><img" + (jade.attr("src", answer.content, true, false)) + " class=\"img content-ver block\"/></div></div>");
    }

  }
}).call(this);

buf.push("</div>");
    }

  } else {
    var $$l = 0;
    for (var j in $$obj) {
      $$l++;      var pair = $$obj[j];

var question = pair.question;
var answers = pair.answers;
buf.push("<div class=\"row\">");
// iterate _.shuffle(pair.answers)
;(function(){
  var $$obj = _.shuffle(pair.answers);
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var answer = $$obj[i];

klass  = answer.correct ? "correct" : "incorrect"
klass += i === 0 ? " left" : " right"
buf.push("<div class=\"col-sm-6 block-v-sm slide-up hide-overflow block-box-sizing\"><div" + (jade.attr("data-correct", answer.correct, true, false)) + (jade.attr("data-content", answer.content, true, false)) + (jade.attr("data-answer-id", answer.id, true, false)) + (jade.attr("data-question-id", question.id, true, false)) + (jade.attr("data-group", j, true, false)) + (jade.attr("data-image", i, true, false)) + (jade.cls(['image-container','block-dk','block-sm','content-fill',klass], [null,null,null,null,true])) + "><img" + (jade.attr("src", answer.content, true, false)) + " class=\"img content-ver block\"/></div></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var answer = $$obj[i];

klass  = answer.correct ? "correct" : "incorrect"
klass += i === 0 ? " left" : " right"
buf.push("<div class=\"col-sm-6 block-v-sm slide-up hide-overflow block-box-sizing\"><div" + (jade.attr("data-correct", answer.correct, true, false)) + (jade.attr("data-content", answer.content, true, false)) + (jade.attr("data-answer-id", answer.id, true, false)) + (jade.attr("data-question-id", question.id, true, false)) + (jade.attr("data-group", j, true, false)) + (jade.attr("data-image", i, true, false)) + (jade.cls(['image-container','block-dk','block-sm','content-fill',klass], [null,null,null,null,true])) + "><img" + (jade.attr("src", answer.content, true, false)) + " class=\"img content-ver block\"/></div></div>");
    }

  }
}).call(this);

buf.push("</div>");
    }

  }
}).call(this);

buf.push("</div></div></div></div><div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"game" in locals_for_with?locals_for_with.game:typeof game!=="undefined"?game:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"klass" in locals_for_with?locals_for_with.klass:typeof klass!=="undefined"?klass:undefined,"metadata" in locals_for_with?locals_for_with.metadata:typeof metadata!=="undefined"?metadata:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/image-pair/view.coffee", function(exports, require, module) {
var GameView, ImagePairView, Preloader, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

GameView = require("views/base/game");

Preloader = require("lib/preload");

ImagePairView = (function(_super) {
  __extends(ImagePairView, _super);

  function ImagePairView() {
    _ref = ImagePairView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  ImagePairView.prototype.template = require("./template");

  ImagePairView.prototype.events = function() {
    return {
      "iostap .image-container": "selectImage",
      "iostap .btn-done": "endGame"
    };
  };

  ImagePairView.prototype.show = function() {
    var images,
      _this = this;
    ImagePairView.__super__.show.apply(this, arguments);
    this.setEl(this.findAll(".image-container"), "images");
    this.setEl(this.findOne(".title"), "title");
    this.setEl(this.findOne(".content-area"), "parent");
    this.setState(this.options.data.reject, "reject");
    this.listenTo(this, "resize", this.onResize);
    images = _.chain(this.options.metadata.questions).pluck("answers").flatten().pluck("content").union().value();
    Preloader.load(images, function() {
      return _this.onResize();
    });
    return this.enterGame();
  };

  ImagePairView.prototype.onResize = function() {
    var groupLength, height, image, maxHeight, outerHeight, _i, _j, _len, _len1, _ref1, _ref2, _results;
    _ref1 = this.getEl("images");
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      image = _ref1[_i];
      image.parentNode.style.height = "";
    }
    outerHeight = this.getEl("parent").offsetHeight;
    if (this.el.offsetWidth < 1024) {
      outerHeight -= this.getEl("title").offsetHeight;
    }
    groupLength = this.options.data.groups.length;
    maxHeight = outerHeight / groupLength;
    height = _.reduce(this.getEl("images"), (function(m, e) {
      return Math.min(m, e.offsetHeight);
    }), maxHeight);
    this.getEl("parent").classList.toggle("content-fill", height === maxHeight);
    this.getEl("parent").classList.toggle("content-ver", height < maxHeight);
    _ref2 = this.getEl("images");
    _results = [];
    for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
      image = _ref2[_j];
      _results.push(image.parentNode.style.height = height + "px");
    }
    return _results;
  };

  ImagePairView.prototype.selectImage = function(e) {
    var image, other, wasIncorrect, _i, _len, _ref1;
    image = e.currentTarget;
    if (this.options.data.reject && (image.dataset.correct == null)) {
      wasIncorrect = true;
      image.classList.add("show-incorrect");
      window.setTimeout((function() {
        return image.classList.remove("show-incorrect");
      }), 500);
    } else {
      image.classList.toggle("active");
    }
    if (!(this.options.data.multi || wasIncorrect)) {
      _ref1 = this.getEl("images");
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        other = _ref1[_i];
        if (other !== image && other.dataset.group === image.dataset.group) {
          other.classList.remove("active");
        }
      }
    }
    return this.setState(this.isTouched() ? "touched" : "prompt");
  };

  ImagePairView.prototype.isTouched = function() {
    if (this.options.data.multi) {
      return true;
    } else {
      return _.chain(this.getEl("images")).groupBy(function(e, i) {
        return ~~(i / 2);
      }).map(function(group) {
        return group.filter(function(e) {
          return e.classList.contains("active");
        });
      }).reduce((function(isTouched, group) {
        return isTouched && group.length > 0;
      }), true).value();
    }
  };

  ImagePairView.prototype.imageIsCorrect = function(image) {
    return image.classList.contains("active") === (image.dataset.correct != null);
  };

  ImagePairView.prototype.isCorrect = function() {
    return _.chain(this.getEl("images")).map(this.imageIsCorrect).reduce((function(allCorrect, isCorrect) {
      return allCorrect && isCorrect;
    }), true).value();
  };

  ImagePairView.prototype.answerDetails = function() {
    var answersById, questions, questionsById, _ref1;
    questions = ((_ref1 = this.options.metadata) != null ? _ref1.questions : void 0) || [];
    if (!(questions.length > 0)) {
      return [];
    }
    questionsById = _.chain(questions).pluck('question').indexBy('id').value();
    answersById = _.chain(questions).pluck('answers').flatten().indexBy('id').value();
    return _.chain(this.getEl('images')).compact().groupBy(function(e) {
      return e.dataset.questionId;
    }).map(function(images, questionId) {
      return _.chain(images).filter(images, function(i) {
        return i.classList.contains("active");
      }).map(function(answer) {
        return {
          question: questionsById[questionId],
          answer: answersById[answer.dataset.answerId]
        };
      }).value();
    }).compact().value();
  };

  ImagePairView.prototype.endGame = function() {
    ImagePairView.__super__.endGame.apply(this, arguments);
    return this.submit();
  };

  return ImagePairView;

})(GameView);

module.exports = ImagePairView;
});

;require.register("engine/image-slider/model.yaml", function(exports, require, module) {
module.exports = {"title":"image-slider","display":"Image Slider","category":"Content","description":"Swipe through a group of images","features":{"narration":true},"model":{"items":{"min":1,"max":10,"type":[{"content":{"types":["image","text"]},"caption":{"type":"html"},"position":{"type":"select","enum":["Top","Middle","Bottom"],"default":"Bottom","display":"Caption Position"},"color":{"type":"text","default":"","display":"Background Color"}}]},"prompt":{"type":"html","default":"Swipe up to see more"}},"examples":[{"items":[{"contentType":"text","content":"\n# Our Range\nSwipe up to learn more about our range of products.\n"},{"content":"img/examples/product-1.png","contentType":"image","caption":"This is the original product in our line and is a great source of pride for the company.\n","color":"rgba(72, 162, 234, 0.6)"},{"content":"img/examples/product-2.png","contentType":"image","caption":"Product Y was introduced to appeal to a broader customers base and was a great success.\n","position":"Top","color":"rgba(255, 191, 0, 0.9)"},{"content":"img/examples/product-3.png","contentType":"image","caption":"Completing our range is Product Z. It appeals to old and new customers alike, making us a company for everyone.\n","position":"Middle","color":"rgba(37, 191, 128, 0.6)"}]},{"items":[{"content":"img/examples/product-1.png","contentType":"image","caption":"\n### Product X\nThis is our first product\n"}]}]}
});

;require.register("engine/image-slider/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (continueBtnText, hasNarration, hasPrompt, i18n, items, prompt, undefined) {



























buf.push("<div class=\"content-fill slide-up\"><div class=\"carousel content-fill delay-6 block-v-lg\"><div" + (jade.attr("style", "height: " + (items.length * 100) + "%;", true, false)) + " class=\"carousel-slider content-fill clearfix\">");
// iterate items
;(function(){
  var $$obj = items;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var item = $$obj[i];

buf.push("<div" + (jade.attr("style", "height: " + (100 / items.length) + "%;", true, false)) + " class=\"carousel-item content-fill\"><div class=\"content-fill carousel-content\">");
switch (item.contentType){
case "text":
buf.push("<div class=\"content-ver text-center text-md\">" + (null == (jade_interp = item.content) ? "" : jade_interp) + "</div>");
  break;
case "image":
buf.push("<img" + (jade.attr("src", item.content, true, false)) + " class=\"img content\"/>");
  break;
}
buf.push("</div>");
if ( item.caption)
{
buf.push("<div" + (jade.cls(['caption','text-center','block-box-sizing',"position-" + ((item.position || 'bottom').toLowerCase()) + ""], [null,null,null,true])) + "><div class=\"caption-content text-md block-lg\">" + (null == (jade_interp = item.caption) ? "" : jade_interp) + "</div></div>");
}
buf.push("</div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var item = $$obj[i];

buf.push("<div" + (jade.attr("style", "height: " + (100 / items.length) + "%;", true, false)) + " class=\"carousel-item content-fill\"><div class=\"content-fill carousel-content\">");
switch (item.contentType){
case "text":
buf.push("<div class=\"content-ver text-center text-md\">" + (null == (jade_interp = item.content) ? "" : jade_interp) + "</div>");
  break;
case "image":
buf.push("<img" + (jade.attr("src", item.content, true, false)) + " class=\"img content\"/>");
  break;
}
buf.push("</div>");
if ( item.caption)
{
buf.push("<div" + (jade.cls(['caption','text-center','block-box-sizing',"position-" + ((item.position || 'bottom').toLowerCase()) + ""], [null,null,null,true])) + "><div class=\"caption-content text-md block-lg\">" + (null == (jade_interp = item.caption) ? "" : jade_interp) + "</div></div>");
}
buf.push("</div>");
    }

  }
}).call(this);

buf.push("</div>");
if ( items.length > 1)
{
buf.push("<div class=\"btn btn-muted btn-circular btn-up\"><span class=\"icon icon-chevron-up text-xl\"></span></div><div class=\"btn btn-muted btn-circular btn-down\"><span class=\"icon icon-chevron-down text-xl\"></span></div>");
}
buf.push("</div></div><div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"items" in locals_for_with?locals_for_with.items:typeof items!=="undefined"?items:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/image-slider/view.coffee", function(exports, require, module) {
var DraggyView, ImageSliderView, Preload, SlideView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SlideView = require("views/slide");

DraggyView = require("views/components/draggy");

Preload = require("lib/preload");

ImageSliderView = (function(_super) {
  __extends(ImageSliderView, _super);

  function ImageSliderView() {
    _ref = ImageSliderView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  ImageSliderView.prototype.template = require("./template");

  ImageSliderView.prototype.currentIndex = 0;

  ImageSliderView.prototype.events = {
    "iostap .btn-done": "submit",
    "iostap": "onTap"
  };

  ImageSliderView.prototype.submit = function(e) {
    e.stopImmediatePropagation();
    return ImageSliderView.__super__.submit.apply(this, arguments);
  };

  ImageSliderView.prototype.onTap = function(e) {
    var index, _ref1;
    index = this.currentIndex;
    if (((_ref1 = e.detail) != null ? _ref1.clientY : void 0) > this.el.offsetHeight / 2) {
      index++;
    } else {
      index--;
    }
    index = Math.max(Math.min(index, this.options.data.items.length - 1), 0);
    return this.draggy.reset({
      y: -index * this.draggy.offset.height
    });
  };

  ImageSliderView.prototype.serialize = function() {
    var data;
    data = ImageSliderView.__super__.serialize.apply(this, arguments);
    this.options.data.items = data.items = (data.items || []).filter(function(m) {
      return m.content || m.caption.length > 0;
    });
    data.hasPrompt = data.items.length > 1;
    return data;
  };

  ImageSliderView.prototype.show = function(index) {
    var color, el, item, len, min, _i, _len, _ref1, _ref2;
    if (index == null) {
      index = 0;
    }
    if ((_ref1 = this.draggy) != null) {
      _ref1.undelegateEvents();
    }
    this.draggy = null;
    if (!this.draggy) {
      el = this.findOne(".carousel");
      this.setEl(el.firstChild, "scroller");
      this.setEl(this.findOne(".btn-up"), "btn-up");
      this.setEl(this.findOne(".btn-down"), "btn-down");
      if (this.options.data.items.length > 1) {
        len = this.options.data.items.length - 1;
        min = -el.offsetHeight * len;
        this.draggy = new DraggyView({
          el: el,
          minY: min,
          maxY: 0,
          lock: "x",
          allowPropagation: true
        });
        this.listenTo(this.draggy, "drag", this.onDrag);
        this.listenTo(this.draggy, "drop", this.onDrop);
        this.draggy.reset({
          y: -this.draggy.offset.height * Math.min(index, len)
        });
      } else {
        item = this.getEl("scroller").firstChild;
        item.classList.add("active");
        _ref2 = item.children;
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          el = _ref2[_i];
          this.transform(el, {
            opacity: 1,
            transition: "all 300ms"
          });
        }
      }
      if (color = this.options.data.items[0].color) {
        this.trigger("ui", {
          lightbox: color
        });
      }
      this.listenTo(this, "resize", this.onResize);
      return this.onResize();
    }
  };

  ImageSliderView.prototype.onDrag = function(draggy, isInitial) {
    var transition;
    window.Backbone.trigger("canceltap");
    transition = isInitial ? "all 300ms" : "none";
    this.transform(this.getEl("scroller"), {
      y: this.getScrollDist(draggy),
      transition: transition
    });
    return this.updateChildren(draggy, transition);
  };

  ImageSliderView.prototype.onDrop = function(draggy, isReset) {
    var color, func, m, step, total, transition, y;
    if (isReset) {
      transition = this.currentIndex != null ? "all 300ms" : "";
      this.currentIndex = Math.floor(-draggy.y / draggy.offset.height);
      this.transform(this.getEl("scroller"), {
        y: this.getScrollDist(draggy),
        transition: transition
      });
      this.updateChildren(draggy, transition);
    } else {
      y = draggy.velocity.y;
      m = 0.9;
      func = y < -m ? "ceil" : y > m ? "floor" : "round";
      step = Math[func](Math.min(draggy.y / draggy.offset.height, 1));
      draggy.reset({
        y: step * draggy.offset.height
      });
    }
    total = this.options.data.items.length - 1;
    if (color = this.options.data.items[this.currentIndex || 0].color) {
      this.trigger("ui", {
        lightbox: color
      });
    } else {
      this.trigger("ui", {
        lightbox: false
      });
    }
    this.getEl("btn-up").classList.toggle("active", this.currentIndex > 0);
    this.getEl("btn-down").classList.toggle("active", this.currentIndex < total);
    if (this.currentIndex === total) {
      return this.setState("touched");
    }
  };

  ImageSliderView.prototype.updateChildren = function(draggy, transition) {
    var child, height, i, item, o, _i, _len, _ref1, _results;
    height = draggy.offset.height;
    _ref1 = this.getEl("scroller").children;
    _results = [];
    for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
      child = _ref1[i];
      child.classList.toggle("active", i === this.currentIndex);
      child.classList.toggle("transition", transition !== "");
      if (transition) {
        this.transition(child, transition, true);
      }
      o = Math.abs(draggy.y + (i * height)) / height;
      _results.push((function() {
        var _j, _len1, _ref2, _results1;
        _ref2 = child.children;
        _results1 = [];
        for (i = _j = 0, _len1 = _ref2.length; _j < _len1; i = ++_j) {
          item = _ref2[i];
          if (!item.classList.contains("caption")) {
            _results1.push(this.transform(item, {
              y: -o * height / (i + 1) / 3,
              opacity: 1 - o,
              transition: transition
            }));
          }
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  ImageSliderView.prototype.getScrollDist = function(draggy) {
    return "" + (draggy.y / draggy.offset.height / this.options.data.items.length * 100) + "%";
  };

  ImageSliderView.prototype.onResize = function() {
    var scroller;
    if (scroller = this.getEl("scroller") && this.draggy) {
      this.draggy.y = -this.currentIndex * this.draggy.offset.height;
      this.draggy.options.minY = -this.draggy.el.offsetHeight * (this.options.data.items.length - 1);
      return this.draggy.getOffset();
    }
  };

  ImageSliderView.prototype.refresh = function(params) {
    var changed, i, item, _i, _len, _ref1;
    _ref1 = params.data.items;
    for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
      item = _ref1[i];
      if (!_.isEqual(item, this.options.data.items[i])) {
        changed = i;
      }
    }
    ImageSliderView.__super__.refresh.apply(this, arguments);
    if (this.draggy) {
      this.draggy.undelegateEvents();
      this.draggy = this.currentIndex = null;
    }
    return this.show(changed);
  };

  return ImageSliderView;

})(SlideView);

module.exports = ImageSliderView;
});

;require.register("engine/image-waypoints/model.yaml", function(exports, require, module) {
module.exports = {"title":"image-waypoints","display":"Image Waypoints","category":"Content","description":"Highlight important details in an image","features":{"narration":true},"model":{"url":{"type":"image","default":"","display":"Image"},"waypoints":{"min":1,"max":20,"type":[{"region":{"type":"image-region","for":"url"},"caption":{"type":"html","default":""},"narration":{"type":"audio"}}]},"guided":{"type":"boolean","default":false,"help":"Start on the first waypoint and only continue with Previous and Next buttons.\n"},"appearance":{"waypointColor":{"display":"Waypoints Color","type":"html","default":"White","enum":["Black","White"]}},"prompt":{"type":"html","default":"Explore the image"},"lightbox":{"background":{"type":"html","default":"","display":"Background Color","help":"This color (eg. \"orange\", \"#f90\", \"rgb(255,160,0)\") will be used for the background of the entire screen in lightbox mode.\n"},"textColor":{"display":"Text Color","type":"html","default":"White","enum":["Black","White"]}}},"examples":[{"url":"img/examples/product-1-xl.png","guided":true,"waypoints":[{"region":{"xMin":0,"xMax":1,"yMin":0,"yMax":1}},{"region":{"xMin":0.4,"xMax":0.76,"yMin":0.16,"yMax":0.46},"caption":"The Classic Logo"},{"region":{"xMin":0.15,"xMax":0.4,"yMin":0.35,"yMax":0.65},"caption":"Nutritional Facts"},{"region":{"xMin":0.16,"xMax":0.32,"yMin":0.76,"yMax":0.92},"caption":"A Scannable QR Code"}]},{"url":"img/examples/product-1-xl.png","guided":false,"waypoints":[{"region":{"xMin":0.4,"xMax":0.76,"yMin":0.16,"yMax":0.46},"caption":"\n**The Classic Logo**\n\nThe classic Ed logo adorns Product X.\n"},{"region":{"xMin":0.15,"xMax":0.4,"yMin":0.35,"yMax":0.65},"caption":"\n**Nutritional Facts**\n\nProduct X features the relevant nutrional information.\n"},{"region":{"xMin":0.16,"xMax":0.32,"yMin":0.76,"yMax":0.92},"caption":"\n**A Scannable QR Code**\n\nA QR code takes consumers to our website.\n"}]}]}
});

;require.register("engine/image-waypoints/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (continueBtnText, guided, hasNarration, hasPrompt, i18n, prompt, undefined, url, waypoints) {
buf.push("<div class=\"full-screen content-fill hide-overflow\"><div" + (jade.cls(['content-fill','text-center',guided ? "" : "block-h-lg"], [null,null,true])) + "><div class=\"image-container content-ver block-inline\"><img" + (jade.attr("src", url, true, false)) + " class=\"img\"/>");
if ( !guided)
{
buf.push("<div class=\"waypoints\">");
// iterate waypoints
;(function(){
  var $$obj = waypoints;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var w = $$obj[i];

buf.push("<div" + (jade.attr("style", "left: " + (w.center.x * 100) + "%; top: " + (w.center.y * 100) + "%", true, false)) + (jade.attr("data-index", i, true, false)) + " class=\"waypoint\"></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var w = $$obj[i];

buf.push("<div" + (jade.attr("style", "left: " + (w.center.x * 100) + "%; top: " + (w.center.y * 100) + "%", true, false)) + (jade.attr("data-index", i, true, false)) + " class=\"waypoint\"></div>");
    }

  }
}).call(this);

buf.push("</div>");
}
buf.push("</div></div><div class=\"navigation text-center\"><div class=\"caption text-md block-lg\"></div>");
if ( guided)
{
buf.push("<div class=\"btn-container\"><div class=\"col-sm-4 col-sm-offset-2 col-lg-3 col-lg-offset-3 block-v-sm\"><div class=\"prev-wp btn btn-block\"><span class=\"icon icon-chevron-left text-xxl\"></span></div></div><div class=\"col-sm-4 col-lg-3 block-v-sm\"><div class=\"next-wp btn btn-block\"><span class=\"icon icon-chevron-right text-xxl\"></span></div></div></div>");
}
buf.push("</div></div><div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"guided" in locals_for_with?locals_for_with.guided:typeof guided!=="undefined"?guided:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined,"url" in locals_for_with?locals_for_with.url:typeof url!=="undefined"?url:undefined,"waypoints" in locals_for_with?locals_for_with.waypoints:typeof waypoints!=="undefined"?waypoints:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/image-waypoints/view.coffee", function(exports, require, module) {
var ImageWaypointsView, SlideView, Sound, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SlideView = require("views/slide");

Sound = Application.actions().Sound;

ImageWaypointsView = (function(_super) {
  __extends(ImageWaypointsView, _super);

  function ImageWaypointsView() {
    _ref = ImageWaypointsView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  ImageWaypointsView.prototype.template = require("./template");

  ImageWaypointsView.prototype.events = {
    "iostap .btn-done": "submit",
    "iostap .prev-wp": "goToPrevWaypoint",
    "iostap .next-wp": "goToNextWaypoint",
    "iostap .waypoint": "tapWaypoint",
    "iostap": "exitWaypoint"
  };

  ImageWaypointsView.prototype.serialize = function() {
    var data, waypoint, _i, _len, _ref1;
    data = ImageWaypointsView.__super__.serialize.apply(this, arguments);
    data.hasPrompt = true;
    _ref1 = data.waypoints;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      waypoint = _ref1[_i];
      waypoint.center = this.getCenter(waypoint.region);
    }
    return data;
  };

  ImageWaypointsView.prototype.submit = function(e) {
    if (e != null) {
      e.stopImmediatePropagation();
    }
    return ImageWaypointsView.__super__.submit.apply(this, arguments);
  };

  ImageWaypointsView.prototype.beforeHide = function() {
    this.trigger("ui", {
      lightbox: false
    });
    if (this.currentSrc) {
      return Sound.fadeOut(this.currentSrc, 500, 0.02);
    }
  };

  ImageWaypointsView.prototype.hide = function() {
    this.exitWaypoint();
    return this.el.classList.remove("is-loaded");
  };

  ImageWaypointsView.prototype.refresh = function(params) {
    var caption, changed, i, _i, _len, _ref1, _ref2,
      _this = this;
    _ref1 = params.data.waypoints;
    for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
      caption = _ref1[i].caption;
      if (caption !== ((_ref2 = this.options.data.waypoints[i]) != null ? _ref2.caption : void 0)) {
        changed = i;
      }
    }
    ImageWaypointsView.__super__.refresh.apply(this, arguments);
    this.beforeShow();
    this.show(false);
    if (changed != null) {
      this.el.classList.add("no-transition");
      this.goToWaypoint(changed);
      return _.delay((function() {
        return _this.el.classList.remove("no-transition");
      }), 1);
    }
  };

  ImageWaypointsView.prototype.onRefresh = function() {};

  ImageWaypointsView.prototype.onResize = function() {
    var _ref1;
    if (this.getEl("container")) {
      this.getEl("container").style.height = "";
      this.getEl("container").style.width = "";
      if ((_ref1 = this.getEl("container").parentNode) != null) {
        _ref1.style.height = "";
      }
    }
    return this.setDimensions();
  };

  ImageWaypointsView.prototype.beforeShow = function() {
    this.setState(false, "zoom");
    this.setState(this.options.data.guided.toString(), "guided");
    if (this.options.data.guided) {
      return this.showLightbox();
    } else {
      return this.trigger("ui", {
        lightbox: false
      });
    }
  };

  ImageWaypointsView.prototype.setTextColor = function(lightbox) {
    var color, _ref1, _ref2;
    if (color = lightbox != null ? (_ref1 = lightbox.textColor) != null ? _ref1.toLowerCase() : void 0 : void 0) {
      return this.el.style.color = lightbox != null ? (_ref2 = lightbox.textColor) != null ? _ref2.toLowerCase() : void 0 : void 0;
    }
  };

  ImageWaypointsView.prototype.setWaypointColor = function(appearance) {
    var color, _ref1;
    if (color = appearance != null ? (_ref1 = appearance.waypointColor) != null ? _ref1.toLowerCase() : void 0 : void 0) {
      return this.el.classList.add("waypoint-" + color);
    }
  };

  ImageWaypointsView.prototype.showLightbox = function() {
    var _ref1;
    this.setState(true, "zoom");
    return this.trigger("ui", {
      lightbox: ((_ref1 = this.options.data.lightbox) != null ? _ref1.background : void 0) || true
    });
  };

  ImageWaypointsView.prototype.show = function(fadeImage) {
    var img,
      _this = this;
    if (fadeImage == null) {
      fadeImage = true;
    }
    this.setEl(img = this.findOne(".img"), "image");
    this.setEl(this.findOne(".caption"), "caption");
    this.setEl(this.findOne(".waypoints"), "waypoints");
    this.setEl(this.findOne(".navigation"), "navigation");
    this.setEl(this.findOne(".image-container"), "container");
    this.setState("prompt");
    this.setState(false, "zoom");
    this.setState(this.options.data.guided.toString(), "guided");
    this.setTextColor(this.options.data.lightbox);
    this.setWaypointColor(this.options.data.appearance);
    this.listenTo(this, "resize", this.onResize);
    if (!fadeImage) {
      this.el.classList.add("no-transition");
    }
    if (img != null ? img.complete : void 0) {
      return this.setDimensions();
    } else if (img != null) {
      return img.onload = function() {
        return _this.setDimensions();
      };
    }
  };

  ImageWaypointsView.prototype.setDimensions = function() {
    this.setContainerDimensions();
    this.el.classList.add("is-loaded");
    if (this.options.data.guided) {
      this.goToWaypoint(0);
    }
    this.el.offsetLeft;
    return this.el.classList.remove("no-transition");
  };

  ImageWaypointsView.prototype.getCenter = function(wp) {
    return {
      x: (wp.xMin + wp.xMax) / 2,
      y: (wp.yMin + wp.yMax) / 2
    };
  };

  ImageWaypointsView.prototype.allWaypointsTapped = function() {
    return _.reduce(this.getEl("waypoints").children, function(allTapped, el) {
      return allTapped && el.dataset.tapped;
    }, true);
  };

  ImageWaypointsView.prototype.tapWaypoint = function(e) {
    var el;
    el = e.target;
    e.stopImmediatePropagation();
    this.goToWaypoint(+el.dataset.index);
    el.dataset.tapped = "true";
    el.classList.add("tapped");
    if (this.allWaypointsTapped()) {
      return this.setState("touched");
    }
  };

  ImageWaypointsView.prototype.goToPrevWaypoint = function(e) {
    e.stopImmediatePropagation();
    return this.goToWaypoint(Math.max(this.currentIndex - 1, this.limits().min));
  };

  ImageWaypointsView.prototype.goToNextWaypoint = function(e) {
    e.stopImmediatePropagation();
    return this.goToWaypoint(Math.min(this.currentIndex + 1, this.limits().max));
  };

  ImageWaypointsView.prototype.updateNextPrevButtons = function() {
    var max, min, _ref1;
    if (this.options.data.guided) {
      _ref1 = this.limits(), min = _ref1.min, max = _ref1.max;
      this.el.classList.toggle("prev-disabled", this.currentIndex === min);
      this.el.classList.toggle("next-disabled", this.currentIndex === max);
      if (this.currentIndex === max) {
        return this.setState("touched");
      }
    }
  };

  ImageWaypointsView.prototype.limits = function() {
    return {
      min: 0,
      max: this.options.data.waypoints.length - 1
    };
  };

  ImageWaypointsView.prototype.goToWaypoint = function(currentIndex) {
    var caption, loaded, narration, region, _ref1,
      _this = this;
    this.currentIndex = currentIndex;
    _ref1 = this.options.data.waypoints[this.currentIndex], region = _ref1.region, caption = _ref1.caption, narration = _ref1.narration;
    loaded = false;
    if (this.currentSrc) {
      Sound.stop(this.currentSrc);
    }
    if ((this.currentSrc = narration) && !this.withoutNarration) {
      this.showLoadingNarration();
      Sound.play(narration, {
        cb: function() {
          return _this.hideLoadingNarration();
        },
        onProgress: function() {
          if (!loaded) {
            loaded = true;
            return _this.hideLoadingNarration();
          }
        }
      });
    }
    this.showLightbox();
    this.updateNextPrevButtons();
    this.toggleCaption(caption);
    return this.scaleImage(region);
  };

  ImageWaypointsView.prototype.exitWaypoint = function() {
    if (this.currentSrc) {
      Sound.fadeOut(this.currentSrc, 500, 0.02);
    }
    if (!this.options.data.guided) {
      this.toggleCaption();
      this.setState(false, "zoom");
      this.trigger("ui", {
        lightbox: false
      });
      return this.transform(this.getEl("image"), {
        scale: 1
      });
    }
  };

  ImageWaypointsView.prototype.scaleImage = function(region) {
    var heightScale, image, navBounds, regionHeight, regionWidth, scaleToUse, viewportHeight, viewportWidth, widthScale, x, y, yOffset, _ref1;
    image = this.getEl("image");
    navBounds = this.getEl("navigation").getBoundingClientRect();
    _ref1 = this.getCenter(region), x = _ref1.x, y = _ref1.y;
    yOffset = -(window.innerHeight - navBounds.top) / 2 / image.height;
    viewportWidth = this.el.offsetWidth / image.width;
    viewportHeight = navBounds.top / image.height;
    regionWidth = region.xMax - region.xMin;
    regionHeight = region.yMax - region.yMin;
    widthScale = viewportWidth / regionWidth;
    heightScale = viewportHeight / regionHeight;
    scaleToUse = Math.min(widthScale, heightScale);
    return this.transform(image, {
      x: scaleToUse * 100 * (0.5 - x) + "%",
      y: yOffset * 100 + scaleToUse * 100 * (0.5 - y) + "%",
      scale: scaleToUse
    });
  };

  ImageWaypointsView.prototype.toggleCaption = function(caption) {
    var _ref1;
    if (caption == null) {
      caption = false;
    }
    this.setState(Boolean(caption), "caption");
    this.getEl("caption").innerHTML = caption || "";
    if (caption == null) {
      return this.getEl("caption").style.background = "";
    } else if ((_ref1 = this.options.data.lightbox) != null ? _ref1.background : void 0) {
      return this.getEl("caption").style.background = this.options.data.lightbox.background;
    }
  };

  ImageWaypointsView.prototype.setContainerDimensions = function() {
    var h, i, p, w;
    i = this.getEl("image");
    p = this.getEl("container").parentNode;
    if (!((i != null) && (p != null))) {
      return;
    }
    w = i.width || this.el.offsetWidth;
    h = i.height || this.el.offsetHeight;
    w = Math.min(w, p.offsetWidth);
    h = Math.min(h, (this.options.data.guided ? p : this.el).offsetHeight);
    p.style.height = "" + p.offsetHeight + "px";
    this.getEl("container").style.height = "" + h + "px";
    return this.getEl("container").style.maxWidth = "" + w + "px";
  };

  return ImageWaypointsView;

})(SlideView);

module.exports = ImageWaypointsView;
});

;require.register("engine/image/model.yaml", function(exports, require, module) {
module.exports = {"title":"image","display":"Simple Image","category":"Content","features":{"narration":true},"description":"Display an image and optional caption","model":{"url":{"type":"image","default":"","display":"Image"},"compose":{"type":"boolean","default":false,"help":"Add a border and shadow to the image.\n"},"autofocus":{"type":"boolean","default":false,"help":"Automatically focus on the image to show it’s caption.\n"},"caption":{"title":{"type":"html","default":""},"content":{"type":"html","default":""}},"prompt":{"type":"html","default":"Select the image for more details"},"tapAnywhere":{"type":"boolean","display":"Tap anywhere to continue","default":false,"help":"Let the user tap anywhere on the screen to continue to the next slide. This only applies if there is no caption.\n"}},"examples":[{"url":"img/examples/product-1.png","autofocus":false,"compose":true,"caption":{"title":"Product X","content":"This is the original product in our line and is a great source of pride for the company.\n"}}]}
});

;require.register("engine/image/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (backgroundColor, caption, compose, continueBtnText, hasCaption, hasNarration, hasPrompt, i18n, prompt, url) {
buf.push("<div class=\"block-v-lg content-fill text-center\"><img" + (jade.attr("src", url, true, false)) + (jade.cls(['img','content-ver',(compose ? "img-compose" : "")], [null,null,true])) + "/><div class=\"slide-loader content\"></div></div>");
if ( hasCaption)
{
buf.push("<div class=\"text-center\"><div" + (jade.attr("style", "background-color: " + (backgroundColor) + ";", true, false)) + " class=\"caption block-lg text-md\">");
if ( caption.title)
{
buf.push("<p><strong>" + (null == (jade_interp = caption.title) ? "" : jade_interp) + "</strong></p>");
}
if ( caption.content)
{
buf.push(null == (jade_interp = caption.content) ? "" : jade_interp);
}
buf.push("</div></div>");
}
buf.push("<div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"backgroundColor" in locals_for_with?locals_for_with.backgroundColor:typeof backgroundColor!=="undefined"?backgroundColor:undefined,"caption" in locals_for_with?locals_for_with.caption:typeof caption!=="undefined"?caption:undefined,"compose" in locals_for_with?locals_for_with.compose:typeof compose!=="undefined"?compose:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"hasCaption" in locals_for_with?locals_for_with.hasCaption:typeof hasCaption!=="undefined"?hasCaption:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"url" in locals_for_with?locals_for_with.url:typeof url!=="undefined"?url:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/image/view.coffee", function(exports, require, module) {
var ImageSlideView, SlideView, dpi, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SlideView = require("views/slide");

dpi = require("lib/device").dpi;

ImageSlideView = (function(_super) {
  __extends(ImageSlideView, _super);

  function ImageSlideView() {
    _ref = ImageSlideView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  ImageSlideView.prototype.template = require("./template");

  ImageSlideView.prototype.events = function() {
    var events, tapEvent;
    events = {};
    tapEvent = this.options.data.size === "zoom" ? "touch:tap" : "iostap";
    if (this.options.data.tapAnywhere && !this.hasCaption()) {
      events[tapEvent] = "submit";
    } else {
      events["iostap .btn-done"] = "submit";
      events["iostap"] = "showZoom";
    }
    return events;
  };

  ImageSlideView.prototype.serialize = function() {
    var data;
    data = ImageSlideView.__super__.serialize.apply(this, arguments);
    data.hasCaption = this.hasCaption();
    if (data.tapAnywhere && !data.hasCaption) {
      data.hasPrompt = true;
      data.prompt = i18n("image.tap-to-continue");
    } else if (data.hasCaption) {
      data.hasPrompt = true;
    }
    return data;
  };

  ImageSlideView.prototype.hasCaption = function() {
    var _ref1, _ref2;
    return ((_ref1 = this.options.data.caption) != null ? _ref1.title : void 0) || ((_ref2 = this.options.data.caption) != null ? _ref2.content : void 0);
  };

  ImageSlideView.prototype.beforeShow = function() {
    return this.trigger("ui", {
      flexibleHeight: true
    });
  };

  ImageSlideView.prototype.beforeHide = function() {
    return this.trigger("ui", {
      flexibleHeight: false
    });
  };

  ImageSlideView.prototype.show = function() {
    var img, onLoad,
      _this = this;
    this.setState(false, "focus");
    this.setState("prompt");
    img = this.findOne("img");
    onLoad = function() {
      img.removeEventListener("load", onLoad);
      _this.setState(true, "loaded");
      if (_this.options.data.autofocus) {
        return _this.showZoom();
      }
    };
    if (img.complete) {
      return onLoad();
    } else {
      return img.addEventListener("load", onLoad);
    }
  };

  ImageSlideView.prototype.hide = function() {
    var _ref1;
    return (_ref1 = this.photoswipe) != null ? _ref1.close() : void 0;
  };

  ImageSlideView.prototype.showZoom = function(e, showAnimationDuration) {
    var img, left, pad, thumbBounds, top, width, _ref1,
      _this = this;
    if (showAnimationDuration == null) {
      showAnimationDuration = 300;
    }
    this.setState("touched");
    this.setState(true, "focus");
    img = this.findOne("img");
    pad = this.options.data.compose ? 12 : 0;
    _ref1 = img.getBoundingClientRect(), top = _ref1.top, left = _ref1.left, width = _ref1.width;
    thumbBounds = {
      x: left + pad,
      y: top + pad,
      w: width - pad * 2
    };
    this.photoswipe = new PhotoSwipe(document.querySelector("#photoswipe"), PhotoSwipeUI_Default, [
      {
        msrc: img.src,
        src: img.src,
        title: written.wrapInTag(this.options.data.caption.title, "h1") + written.wrapInTag(this.options.data.caption.content, "div"),
        w: (img.naturalWidth || img.width) / Math.min(dpi, 1.66),
        h: (img.naturalHeight || img.height) / Math.min(dpi, 1.66)
      }
    ], {
      showAnimationDuration: showAnimationDuration,
      focus: false,
      history: false,
      barsSize: {
        top: 0,
        bottom: 0
      },
      getThumbBoundsFn: function() {
        return thumbBounds;
      }
    });
    this.photoswipe.listen("close", function() {
      return _this.setState(false, "focus");
    });
    return this.photoswipe.init();
  };

  ImageSlideView.prototype.submit = function(e) {
    if (e != null) {
      e.stopImmediatePropagation();
    }
    return ImageSlideView.__super__.submit.apply(this, arguments);
  };

  ImageSlideView.prototype.refresh = function(params) {
    var showCaption, _ref1;
    if (_.isEqual(params.data.caption, this.options.data.caption)) {
      if ((_ref1 = this.photoswipe) != null) {
        _ref1.close();
      }
    } else {
      showCaption = true;
    }
    ImageSlideView.__super__.refresh.apply(this, arguments);
    if (showCaption) {
      return this.showZoom(null, 0);
    }
  };

  return ImageSlideView;

})(SlideView);

module.exports = ImageSlideView;
});

;require.register("engine/list/model.yaml", function(exports, require, module) {
module.exports = {"title":"list","display":"List Slide","category":"Content","features":{"narration":true},"description":"Display a list of bullet points","model":{"title":{"type":"html","default":""},"list":{"type":[{"type":"html"}],"min":1,"max":32}},"examples":[{"title":"A List Slide","list":["Has a several points","Displays each point with a bullet","Is similar to a PowerPoint slide"]}]}
});

;require.register("engine/list/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (Math, continueBtnText, hasNarration, hasPrompt, i18n, list, prompt, title, undefined) {
buf.push("<div class=\"list-container content content-scroll\"><div class=\"block-v-xl\"><h1 class=\"slide-up\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><ul class=\"list\">");
// iterate list
;(function(){
  var $$obj = list;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var item = $$obj[i];

buf.push("<li" + (jade.cls(['list-item','slide-up',"delay-" + (Math.min(i, 10)) + ""], [null,null,true])) + "><h2>" + (null == (jade_interp = item) ? "" : jade_interp) + "</h2></li>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var item = $$obj[i];

buf.push("<li" + (jade.cls(['list-item','slide-up',"delay-" + (Math.min(i, 10)) + ""], [null,null,true])) + "><h2>" + (null == (jade_interp = item) ? "" : jade_interp) + "</h2></li>");
    }

  }
}).call(this);

buf.push("</ul></div></div><div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"Math" in locals_for_with?locals_for_with.Math:typeof Math!=="undefined"?Math:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"list" in locals_for_with?locals_for_with.list:typeof list!=="undefined"?list:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/list/view.coffee", function(exports, require, module) {
var ListView, SlideView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SlideView = require("views/slide");

ListView = (function(_super) {
  __extends(ListView, _super);

  function ListView() {
    _ref = ListView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  ListView.prototype.template = require("./template");

  ListView.prototype.events = {
    "iostap .btn-done": "submit"
  };

  return ListView;

})(SlideView);

module.exports = ListView;
});

;require.register("engine/matrix/model.yaml", function(exports, require, module) {
module.exports = {"title":"matrix","display":"Matrix","category":"Multiple Choice","features":{"stars":true},"model":{"title":{"type":"html","default":""},"columns":{"min":2,"max":3,"type":[{"title":{"type":"html","default":"","display":"Column Title"},"correct":{"display":"Correct Answer","type":"html","default":""},"incorrect":{"display":"Incorrect Answers","min":1,"max":2,"type":[{"type":"html"}]}}]},"answer":{"text":{"type":"html","default":"","display":"Answer Text"},"correct":{"type":"html","default":"That's correct!","display":"Correct Reinforcement"},"incorrect":{"type":"html","default":"Not quite...","display":"Incorrect Reinforcement"},"takeaway":{"type":"html","default":"","display":"Core Message"}},"game":{"timer":{"limit":{"type":"number","default":-1,"display":"Time Limit (ms)"}}},"prompt":{"type":"html","default":"Select each correct answer"}},"examples":[{"title":"Name the actor who played...","columns":[{"title":"Neo","correct":"Keanu Reeves","incorrect":["Laurence Fishburne","Carrie-Anne Moss"]},{"title":"Trinity","correct":"Carrie-Anne Moss","incorrect":["Keanu Reeves","Laurence Fishburne"]},{"title":"Morpheus","correct":"Laurence Fishburne","incorrect":["Keanu Reeves","Carrie-Anne Moss"]}],"answer":{"takeaway":"The matrix template tests connected information","text":"The matrix template is powerful addition to standard mulitple choice questions. You can even use it to talk about the Matrix movie!\n"}}]}
});

;require.register("engine/matrix/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (columns, continueBtnText, game, hasNarration, hasPrompt, i18n, isLong, metadata, prompt, title, undefined) {
if ( game && game.timer && game.timer.limit > 0)
{
buf.push("<div class=\"full-screen\"><div class=\"game-stepper text-lg text-bold\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div></div>");
}
buf.push("<div class=\"block-v-xl content-ver text-center content-sm-scroll\"><div class=\"content-scroll-inner\"><h1 class=\"block-v-sm fade-in\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"row\">");
// iterate metadata.questions
;(function(){
  var $$obj = metadata.questions;
  if ('number' == typeof $$obj.length) {

    for (var j = 0, $$l = $$obj.length; j < $$l; j++) {
      var column = $$obj[j];

buf.push("<div" + (jade.cls(['col-sm-12','block-v-sm',columns.length > 2 ? "col-md-4" : "col-md-6"], [null,null,true])) + "><div" + (jade.cls(['block-dk','block-sm','fade-in',"delay-" + (j) + ""], [null,null,null,true])) + "><div class=\"block-sm text-bold text-md\">" + (null == (jade_interp = column.question.content) ? "" : jade_interp) + "</div>");
// iterate column.answers
;(function(){
  var $$obj = column.answers;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var answer = $$obj[i];

buf.push("<div" + (jade.attr("data-column", j, true, false)) + (jade.attr("data-correct", answer.correct, true, false)) + (jade.attr("data-question-id", column.question.id, true, false)) + (jade.attr("data-answer-id", answer.id, true, false)) + " class=\"selectable block-sm fade-in\"><div" + (jade.cls(['btn','btn-solid','btn-block','slide-up',(isLong ? "btn-long" : "") + " delay-" + (i) + ""], [null,null,null,null,true])) + ">" + (null == (jade_interp = answer.content || "&nbsp;") ? "" : jade_interp) + "</div></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var answer = $$obj[i];

buf.push("<div" + (jade.attr("data-column", j, true, false)) + (jade.attr("data-correct", answer.correct, true, false)) + (jade.attr("data-question-id", column.question.id, true, false)) + (jade.attr("data-answer-id", answer.id, true, false)) + " class=\"selectable block-sm fade-in\"><div" + (jade.cls(['btn','btn-solid','btn-block','slide-up',(isLong ? "btn-long" : "") + " delay-" + (i) + ""], [null,null,null,null,true])) + ">" + (null == (jade_interp = answer.content || "&nbsp;") ? "" : jade_interp) + "</div></div>");
    }

  }
}).call(this);

buf.push("</div></div>");
    }

  } else {
    var $$l = 0;
    for (var j in $$obj) {
      $$l++;      var column = $$obj[j];

buf.push("<div" + (jade.cls(['col-sm-12','block-v-sm',columns.length > 2 ? "col-md-4" : "col-md-6"], [null,null,true])) + "><div" + (jade.cls(['block-dk','block-sm','fade-in',"delay-" + (j) + ""], [null,null,null,true])) + "><div class=\"block-sm text-bold text-md\">" + (null == (jade_interp = column.question.content) ? "" : jade_interp) + "</div>");
// iterate column.answers
;(function(){
  var $$obj = column.answers;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var answer = $$obj[i];

buf.push("<div" + (jade.attr("data-column", j, true, false)) + (jade.attr("data-correct", answer.correct, true, false)) + (jade.attr("data-question-id", column.question.id, true, false)) + (jade.attr("data-answer-id", answer.id, true, false)) + " class=\"selectable block-sm fade-in\"><div" + (jade.cls(['btn','btn-solid','btn-block','slide-up',(isLong ? "btn-long" : "") + " delay-" + (i) + ""], [null,null,null,null,true])) + ">" + (null == (jade_interp = answer.content || "&nbsp;") ? "" : jade_interp) + "</div></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var answer = $$obj[i];

buf.push("<div" + (jade.attr("data-column", j, true, false)) + (jade.attr("data-correct", answer.correct, true, false)) + (jade.attr("data-question-id", column.question.id, true, false)) + (jade.attr("data-answer-id", answer.id, true, false)) + " class=\"selectable block-sm fade-in\"><div" + (jade.cls(['btn','btn-solid','btn-block','slide-up',(isLong ? "btn-long" : "") + " delay-" + (i) + ""], [null,null,null,null,true])) + ">" + (null == (jade_interp = answer.content || "&nbsp;") ? "" : jade_interp) + "</div></div>");
    }

  }
}).call(this);

buf.push("</div></div>");
    }

  }
}).call(this);

buf.push("</div></div></div><div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"columns" in locals_for_with?locals_for_with.columns:typeof columns!=="undefined"?columns:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"game" in locals_for_with?locals_for_with.game:typeof game!=="undefined"?game:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"isLong" in locals_for_with?locals_for_with.isLong:typeof isLong!=="undefined"?isLong:undefined,"metadata" in locals_for_with?locals_for_with.metadata:typeof metadata!=="undefined"?metadata:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/matrix/view.coffee", function(exports, require, module) {
var GameView, MatrixView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

GameView = require("views/base/game");

MatrixView = (function(_super) {
  __extends(MatrixView, _super);

  function MatrixView() {
    _ref = MatrixView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  MatrixView.prototype.template = require("./template");

  MatrixView.prototype.events = {
    "iostap .selectable": "selectAnswer",
    "iostap .btn-done": "endGame"
  };

  MatrixView.prototype.serialize = function() {
    var allTheAboveRx, d;
    d = MatrixView.__super__.serialize.apply(this, arguments);
    d.isLong = _.chain(d.metadata.questions).pluck('answers').flatten().pluck('content').sortBy(function(el) {
      return el.length;
    }).last().value().length > 10;
    allTheAboveRx = /the above/i;
    d.metadata.questions = _.map(d.metadata.questions, function(q) {
      var allTheAboveAnswer;
      q.answers = _.shuffle(q.answers);
      allTheAboveAnswer = _.find(q.answers, function(a) {
        return allTheAboveRx.test(a.content);
      });
      if (allTheAboveAnswer) {
        q.answers = _.without(q.answers, allTheAboveAnswer).concat(allTheAboveAnswer);
      }
      return q;
    });
    return d;
  };

  MatrixView.prototype.render = function() {
    MatrixView.__super__.render.apply(this, arguments);
    this.setEl(this.findAll(".selectable"), "answers");
    this.setEl(this.findAll(".column"), "columns");
    return this.onTimerChange(this.game.timer);
  };

  MatrixView.prototype.show = function() {
    var el, _i, _len, _ref1;
    MatrixView.__super__.show.apply(this, arguments);
    this.setState("prompt");
    _ref1 = this.getEl("answers");
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      el = _ref1[_i];
      el.classList.remove("active");
    }
    return this.enterGame();
  };

  MatrixView.prototype.endGame = function() {
    MatrixView.__super__.endGame.apply(this, arguments);
    return this.submit();
  };

  MatrixView.prototype.selectAnswer = function(e) {
    var column, el, nbActive, target, _i, _len, _ref1;
    if (this.currentState.state === "complete") {
      return;
    }
    target = e.currentTarget;
    column = target.dataset.column;
    target.classList.add("active");
    _ref1 = this.getEl("answers");
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      el = _ref1[_i];
      if (el.dataset.column === column) {
        if (el !== target) {
          el.classList.remove("active");
        }
      }
    }
    nbActive = (function() {
      var _j, _len1, _ref2, _results;
      _ref2 = this.getEl("answers");
      _results = [];
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        el = _ref2[_j];
        if (el.classList.contains("active")) {
          _results.push(el);
        }
      }
      return _results;
    }).call(this);
    if (nbActive.length === this.options.metadata.questions.length) {
      return this.setState("touched");
    }
  };

  MatrixView.prototype.isCorrect = function() {
    var correctSelected, el;
    correctSelected = (function() {
      var _i, _len, _ref1, _results;
      _ref1 = this.getEl("answers");
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        el = _ref1[_i];
        if (el.classList.contains("active") && el.dataset.correct) {
          _results.push(el);
        }
      }
      return _results;
    }).call(this);
    return correctSelected.length === this.options.metadata.questions.length;
  };

  MatrixView.prototype.answerDetails = function() {
    var colIdx, details, dictAnswersByColNum, q, questionDetails, questions, selectedAnswer, selectedAnswerEl, _i, _len;
    questions = this.options.metadata.questions || [];
    if (!(questions.length > 0)) {
      return [];
    }
    details = [];
    dictAnswersByColNum = _.groupBy(this.$(".selectable"), function(el) {
      return this.$(el).data("column");
    });
    for (_i = 0, _len = questions.length; _i < _len; _i++) {
      q = questions[_i];
      colIdx = questions.indexOf(q);
      selectedAnswerEl = _.find(dictAnswersByColNum[colIdx], function(el) {
        return this.$(el).hasClass("active");
      });
      selectedAnswer = _.filter(q.answers, function(a) {
        return a.content === this.$(selectedAnswerEl).text();
      });
      questionDetails = {
        question: q.question,
        answer: selectedAnswer[0]
      };
      details.push(questionDetails);
    }
    return details;
  };

  return MatrixView;

})(GameView);

module.exports = MatrixView;
});

;require.register("engine/missing-word/model.yaml", function(exports, require, module) {
module.exports = {"title":"missing-word","display":"Missing Word","category":"Concepts","links":{"academy":"https://academy.edapp.com/how-to-missing-word/"},"features":{"stars":true},"model":{"title":{"type":"html","default":"Select the missing words in this sentence"},"words":{"min":1,"max":6,"type":[{"type":"html"}]},"answer":{"text":{"type":"html","default":"","display":"Answer Text"},"correct":{"type":"html","default":"That's correct!","display":"Correct Reinforcement"},"incorrect":{"type":"html","default":"Not quite...","display":"Incorrect Reinforcement"},"takeaway":{"type":"html","default":"","display":"Core Message"}},"prompt":{"type":"html","default":"Drag in the missing words"},"game":{"timer":{"limit":{"type":"number","default":-1,"display":"Time Limit (ms)"}}}},"examples":[{"title":"Fill in the important information about Product X","words":["important","old","Product X","Product Y"],"answer":{"text":"Use missing word to reinforce important messaging about Product X."}}]}
});

;require.register("engine/missing-word/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (Math, components, continueBtnText, game, hasNarration, hasPrompt, i18n, prompt, undefined, words) {
if ( game && game.timer && game.timer.limit > 0)
{
buf.push("<div class=\"full-screen\"><div class=\"game-stepper text-lg text-bold\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div></div>");
}
buf.push("<div class=\"content-fill\"><div class=\"content-md content-fill text-center\"><div class=\"row content-md-ver content-sm-ver content-fit\"><div class=\"col-md-10 col-md-offset-1 col-sm-12 block-v-md\"><h1 class=\"fade-in\">");
// iterate components
;(function(){
  var $$obj = components;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var word = $$obj[i];

var n = 9;
buf.push("<div" + (jade.cls(['word','slide-up',"delay-" + (n - Math.abs(-n + i % (n * 2))) + ""], [null,null,true])) + ">");
if ( word.incorrect)
{
buf.push("<div" + (jade.attr("data-name", word.incorrect, true, false)) + " class=\"droppy\"></div><span class=\"word-text\">" + (null == (jade_interp = word.replaces) ? "" : jade_interp) + "</span>");
}
else
{
buf.push(null == (jade_interp = word.replaces) ? "" : jade_interp);
}
buf.push("</div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var word = $$obj[i];

var n = 9;
buf.push("<div" + (jade.cls(['word','slide-up',"delay-" + (n - Math.abs(-n + i % (n * 2))) + ""], [null,null,true])) + ">");
if ( word.incorrect)
{
buf.push("<div" + (jade.attr("data-name", word.incorrect, true, false)) + " class=\"droppy\"></div><span class=\"word-text\">" + (null == (jade_interp = word.replaces) ? "" : jade_interp) + "</span>");
}
else
{
buf.push(null == (jade_interp = word.replaces) ? "" : jade_interp);
}
buf.push("</div>");
    }

  }
}).call(this);

buf.push("</h1></div><div class=\"col-sm-12 block-v-md\"><div class=\"block-v-lg block-h-md block-dk\">");
// iterate words 
;(function(){
  var $$obj = words ;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var word = $$obj[i];

buf.push("<div" + (jade.attr("data-name", word, true, false)) + (jade.cls(['draggy','btn','btn-sm','btn-solid','slide-up',"delay-" + (i) + ""], [null,null,null,null,null,true])) + ">" + (null == (jade_interp = word) ? "" : jade_interp) + "</div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var word = $$obj[i];

buf.push("<div" + (jade.attr("data-name", word, true, false)) + (jade.cls(['draggy','btn','btn-sm','btn-solid','slide-up',"delay-" + (i) + ""], [null,null,null,null,null,true])) + ">" + (null == (jade_interp = word) ? "" : jade_interp) + "</div>");
    }

  }
}).call(this);

buf.push("</div></div></div></div></div><div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"Math" in locals_for_with?locals_for_with.Math:typeof Math!=="undefined"?Math:undefined,"components" in locals_for_with?locals_for_with.components:typeof components!=="undefined"?components:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"game" in locals_for_with?locals_for_with.game:typeof game!=="undefined"?game:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined,"words" in locals_for_with?locals_for_with.words:typeof words!=="undefined"?words:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/missing-word/view.coffee", function(exports, require, module) {
var Draggy, GameView, MissingWordView, convert, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

GameView = require("views/base/game");

Draggy = require("views/components/draggy");

convert = require("lib/convert");

MissingWordView = (function(_super) {
  __extends(MissingWordView, _super);

  function MissingWordView() {
    _ref = MissingWordView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  MissingWordView.prototype.template = require("./template");

  MissingWordView.prototype.events = {
    "iostap .btn-done": "endGame"
  };

  MissingWordView.prototype.serialize = function() {
    var component, data, escapedWord, i, incorrect, index, rx, title, unescapedWord, word, words;
    data = MissingWordView.__super__.serialize.apply(this, arguments);
    title = data.title, words = data.words;
    title = convert.toText(title);
    words = (function() {
      var _i, _len, _results;
      _results = [];
      for (i = _i = 0, _len = words.length; _i < _len; i = ++_i) {
        word = words[i];
        unescapedWord = word;
        escapedWord = word.replace(/\W/g, (function(w) {
          return "\\" + w;
        }));
        word = convert.toText(word);
        rx = new RegExp("([^A-Z]|^)" + escapedWord + "([^A-Z]|$)", "i");
        if (title.match(rx) != null) {
          incorrect = unescapedWord;
          title = title.replace(word, "{{" + i + "}}");
        }
        _results.push({
          replaces: word,
          incorrect: incorrect
        });
      }
      return _results;
    })();
    data.components = (function() {
      var _i, _len, _ref1, _ref2, _ref3, _ref4, _results;
      _ref1 = title.trim().split(" ");
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        component = _ref1[_i];
        index = +((_ref2 = component.match(/\{\{(\d+)\}\}/)) != null ? _ref2[1] : void 0);
        _results.push({
          incorrect: (_ref3 = words[index]) != null ? _ref3.incorrect : void 0,
          replaces: ((_ref4 = words[index]) != null ? _ref4.replaces : void 0) || component
        });
      }
      return _results;
    })();
    data.words = _.shuffle(data.words);
    return data;
  };

  MissingWordView.prototype.show = function() {
    var draggy, el, i, _i, _len, _ref1;
    MissingWordView.__super__.show.apply(this, arguments);
    if (this.draggies) {
      _ref1 = this.draggies;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        draggy = _ref1[_i];
        draggy.undelegateEvents();
      }
    }
    this.draggies = (function() {
      var _j, _len1, _ref2, _results;
      _ref2 = this.findAll(".draggy");
      _results = [];
      for (i = _j = 0, _len1 = _ref2.length; _j < _len1; i = ++_j) {
        el = _ref2[i];
        draggy = new Draggy({
          el: el
        });
        this.listenTo(draggy, "drag", this.onDrag);
        this.listenTo(draggy, "drop", this.onDrop);
        _results.push(draggy);
      }
      return _results;
    }).call(this);
    this.droppies = this.getElements(".droppy", null);
    this.el.classList.add("ready");
    return this.enterGame();
  };

  MissingWordView.prototype.getElements = function(selector, original) {
    var contains, el, i, _i, _j, _len, _len1, _ref1, _ref2, _results, _results1;
    if (original) {
      _results = [];
      for (_i = 0, _len = original.length; _i < _len; _i++) {
        _ref1 = original[_i], el = _ref1.el, contains = _ref1.contains;
        _results.push({
          el: el,
          contains: contains,
          bounds: el.getBoundingClientRect()
        });
      }
      return _results;
    } else {
      _ref2 = this.findAll(selector);
      _results1 = [];
      for (i = _j = 0, _len1 = _ref2.length; _j < _len1; i = ++_j) {
        el = _ref2[i];
        _results1.push({
          el: el,
          bounds: el.getBoundingClientRect(),
          contains: []
        });
      }
      return _results1;
    }
  };

  MissingWordView.prototype.onDrag = function(draggy, isInitialDrag) {
    var activeIndex, droppy, i, _i, _len, _ref1;
    if (isInitialDrag) {
      this.droppies = this.getElements(".droppy", this.droppies);
    }
    activeIndex = draggy.closest(_.pluck(this.droppies, "bounds"));
    _ref1 = this.droppies;
    for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
      droppy = _ref1[i];
      droppy.el.classList.toggle("active", i === activeIndex);
      droppy.isActive = i === activeIndex;
    }
    if (isInitialDrag) {
      draggy.el.className = draggy.el.className.replace(/delay-\d/, "");
    }
    return this.transform(draggy.el, {
      x: draggy.x,
      y: draggy.y,
      transition: isInitialDrag ? "all 300ms" : "none"
    });
  };

  MissingWordView.prototype.onDrop = function(draggy) {
    var bounds, droppy, height, left, top, width, x, y, _ref1;
    _ref1 = draggy.offset, left = _ref1.left, top = _ref1.top, width = _ref1.width, height = _ref1.height;
    droppy = ((function() {
      var _i, _len, _ref2, _results;
      _ref2 = this.droppies;
      _results = [];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        droppy = _ref2[_i];
        if (droppy.isActive) {
          _results.push(droppy);
        }
      }
      return _results;
    }).call(this))[0];
    x = y = 0;
    if (droppy) {
      bounds = droppy.bounds;
      x = Math.round(bounds.left + bounds.width / 2 - left - width / 2);
      y = Math.round(bounds.top + bounds.height / 2 - top - height / 2);
    } else {
      draggy.isPositioned = false;
    }
    if (this.options.data.reject && (droppy != null ? droppy.el.dataset.name : void 0) !== draggy.el.dataset.name) {
      if (droppy != null) {
        droppy.isActive = false;
      }
      x = y = 0;
    }
    if (draggy.x !== x || draggy.y !== y) {
      draggy.reset({
        x: x,
        y: y
      });
    } else {
      this.transform(draggy.el, {
        x: draggy.x,
        y: draggy.y,
        transition: "all 300ms"
      });
      this.checkAnswer(draggy);
    }
    return this.setState(this.isTouched() ? "touched" : "prompt");
  };

  MissingWordView.prototype.checkAnswer = function(draggy) {
    var containsActive, droppy, toReset, _i, _len, _ref1, _results;
    _ref1 = this.droppies;
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      droppy = _ref1[_i];
      droppy.el.classList.remove("active");
      containsActive = _.include(droppy.contains, draggy.cid);
      if (droppy.isActive) {
        draggy.el.classList.add("is-positioned");
        draggy.isPositioned = true;
        toReset = this.getDraggyFromID(droppy.contains[0], draggy);
        if (droppy.contains.length > 0 && toReset) {
          droppy.isActive = false;
          this.resetDraggy(toReset);
        }
        _results.push(droppy.contains = _.uniq(droppy.contains.concat(draggy.cid)));
      } else if (containsActive) {
        _results.push(droppy.contains = _.without(droppy.contains, draggy.cid));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  MissingWordView.prototype.showAnswer = function() {
    var draggy, _i, _len, _ref1, _results;
    _ref1 = this.draggies;
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      draggy = _ref1[_i];
      _results.push(draggy.lock());
    }
    return _results;
  };

  MissingWordView.prototype.isTouched = function() {
    var droppy, touchedDroppies;
    touchedDroppies = (function() {
      var _i, _len, _ref1, _results;
      _ref1 = this.droppies;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        droppy = _ref1[_i];
        if (droppy.contains.length > 0) {
          _results.push(droppy);
        }
      }
      return _results;
    }).call(this);
    return touchedDroppies.length === this.droppies.length;
  };

  MissingWordView.prototype.getDraggyFromID = function(cid, draggy) {
    return _.find(this.draggies, function(d) {
      return d !== draggy && d.cid === cid;
    });
  };

  MissingWordView.prototype.resetDraggy = function(draggy) {
    draggy.reset();
    draggy.el.classList.remove("is-positioned");
    return draggy.isPositioned = false;
  };

  MissingWordView.prototype.isCorrect = function() {
    var _this = this;
    return this.droppies.reduce(function(isCorrect, d, i) {
      var _ref1;
      return isCorrect && ((_ref1 = _this.getDraggyFromID(d.contains[0])) != null ? _ref1.el.dataset.name : void 0) === d.el.dataset.name;
    }, true);
  };

  MissingWordView.prototype.answerDetails = function() {
    var details, questions,
      _this = this;
    questions = this.options.strippedMetadata.questions || [];
    if (!(questions.length > 0)) {
      return [];
    }
    details = this.droppies.map(function(d, i) {
      var answer, question, text, _ref1;
      text = (_ref1 = _this.getDraggyFromID(d.contains[0])) != null ? _ref1.el.dataset.name : void 0;
      question = questions[i];
      answer = _.find(question.answers, function(a) {
        return a.content === text;
      });
      return {
        question: question.question,
        answer: answer
      };
    });
    return details;
  };

  MissingWordView.prototype.endGame = function() {
    MissingWordView.__super__.endGame.apply(this, arguments);
    return this.submit();
  };

  return MissingWordView;

})(GameView);

module.exports = MissingWordView;
});

;require.register("engine/multiple-choice-game/model.yaml", function(exports, require, module) {
module.exports = {"title":"multiple-choice-game","display":"Multiple Choice","category":"Multiple Choice","features":{"stars":true},"description":"Select the correct answer(s)","model":{"title":{"default":"Your question","types":["text","image","video","audio","iframe"]},"subtitle":{"type":"text","default":""},"selectable":{"display":"Number of selectable answers","default":1,"type":"number"},"randomize":{"default":true,"type":"boolean","help":"Shuffle the answers, with those containing \"the above\" at the bottom.\n"},"answers":{"min":2,"max":8,"type":[{"content":{"type":"html"},"correct":{"type":"boolean"}}]},"answer":{"text":{"type":"html","default":"","display":"Answer Text"},"correct":{"type":"html","default":"That's correct!","display":"Correct Reinforcement"},"incorrect":{"type":"html","default":"Not quite...","display":"Incorrect Reinforcement"},"takeaway":{"type":"html","default":"","display":"Core Message"}},"prompt":{"type":"html","default":"Select the correct answer"},"game":{"timer":{"limit":{"type":"number","default":-1,"display":"Time Limit (ms)"}}}},"examples":[{"title":"Can I do a simple true or false question?","titleType":"text","answers":[{"content":"True","correct":true},{"content":"False"}],"randomize":false,"answer":{"text":"Definitely. True and false works exactly as you would expect.\n"}},{"title":"Does the template support verbose answers?","titleType":"text","answers":[{"correct":true,"content":"Yes, the answers can be long and will still display nicely."},{"content":"No, verbosity is not allowed as it complicates things."},{"content":"No, it's boring to have long answers. No one will read them."}],"answer":{"text":"We do of course we support long answers. They are not always necessary, but sometimes it's important to be specific and we always want to support your needs.\n"}},{"title":"Which countries start with \"A\"?","titleType":"text","selectable":5,"prompt":"Select the correct answers","answers":[{"content":"Australia","correct":true},{"content":"Afghanistan","correct":true},{"content":"Armenia","correct":true},{"content":"Africa"},{"content":"France"}],"answer":{"text":"Australia, Afghanistan and Armenia all start with an \"A\". Can you name the other eight countries?\n"},"game":{"timer":{"limit":10000}}},{"title":"Which of these are true?","titleType":"text","answers":[{"content":"All of the above","correct":true},{"content":"This"},{"content":"That"},{"content":"The other"}],"answer":{"takeaway":"All of the above are true","text":"It's possible to show incorrect answers in the specific order followed by a correct answer. Any answer that contains \"the above\" will be placed at the bottom of the list, random or not.\n"}}]}
});

;require.register("engine/multiple-choice-game/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (answers, config, continueBtnText, game, hasNarration, hasPrompt, i18n, prompt, subtitle, undefined) {
jade_mixins["multi-content"] = jade_interp = function(prop, obj){
var block = (this && this.block), attributes = (this && this.attributes) || {};
obj = obj || locals;
switch (obj[prop + "Type"]){
case "image":
buf.push("<div" + (jade.attr("data-content", obj.image, true, false)) + " class=\"multi-content-wrapper multi-content-wrapper-image block-md block-lt\"><div class=\"block-sm multi-content-media\"><img" + (jade.attr("src", obj[prop], true, false)) + " class=\"multi-content multi-content-image\"/></div></div>");
  break;
case "video":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-video block-md block-lt\"><div class=\"block-sm multi-content-media\"><video" + (jade.attr("src", obj[prop], true, false)) + " webkit-playsinline=\"webkit-playsinline\" playsinline=\"playsinline\" preload=\"auto\" controls=\"controls\"" + (jade.attr("dir", config.direction, true, false)) + " class=\"video-js multi-content multi-content-video block-dk\"></video></div></div>");
  break;
case "audio":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-audio block-md block-lt\"><div class=\"block-sm multi-content-media\"><audio" + (jade.attr("src", obj[prop], true, false)) + " webkit-playsinline=\"webkit-playsinline\" playsinline=\"playsinline\" preload=\"auto\" controls=\"controls\"" + (jade.attr("dir", config.direction, true, false)) + " class=\"multi-content multi-content-audio block-dk\"></audio></div></div>");
  break;
case "iframe":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-iframe block-md block-lt\"><div class=\"block-sm multi-content-iframe\">");
var iframe = obj[prop].match(/<iframe[^<]*<\/iframe>/)
if ( iframe)
{
buf.push(null == (jade_interp = iframe[0].replace(/ (width|height)=["'\d\w]+/g, "")) ? "" : jade_interp);
}
buf.push("</div></div>");
  break;
default:
buf.push("<span class=\"multi-content multi-content-text\">" + (null == (jade_interp = obj[prop]) ? "" : jade_interp) + "</span>");
  break;
}
};
if ( game && game.timer && game.timer.limit > 0)
{
buf.push("<div class=\"full-screen\"><div class=\"game-stepper text-lg text-bold\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div></div>");
}
buf.push("<div class=\"content-sm-scroll content-sm-ver content-fit block-v-md content-lg-fill content-md-fill\"><div class=\"content-scroll-inner content-lg-fill content-md-fill fade-in text-center\"><div class=\"row content-lg-fill content-md-fill\"><div class=\"col-lg-6 col-sm-12 content-lg-ver block-v-md\"><h1 class=\"slide-title text-lg-right text-md-center text-sm-center fade-in\">");
jade_mixins["multi-content"]("title");
buf.push("</h1>");
if ( subtitle)
{
buf.push("<h2 class=\"text-lg-right text-md-center text-sm-center fade-in delay-2\">" + (null == (jade_interp = subtitle) ? "" : jade_interp) + "</h2>");
}
buf.push("</div><div class=\"col-lg-6 col-sm-12 content-lg-ver block-v-md\"><div class=\"block-md block-dk fade-in\"><div class=\"block-h-sm\">");
// iterate answers
;(function(){
  var $$obj = answers;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var answer = $$obj[i];

buf.push("<div" + (jade.cls(['selectable','block-v-sm','fade-in',answer.correct ? "correct" : "incorrect"], [null,null,null,true])) + "><div" + (jade.cls(['btn','btn-solid','btn-block','slide-up',(answer.isLong ? "btn-long" : "") + " delay-" + (i) + ""], [null,null,null,null,true])) + ">" + (null == (jade_interp = answer.content) ? "" : jade_interp) + "</div></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var answer = $$obj[i];

buf.push("<div" + (jade.cls(['selectable','block-v-sm','fade-in',answer.correct ? "correct" : "incorrect"], [null,null,null,true])) + "><div" + (jade.cls(['btn','btn-solid','btn-block','slide-up',(answer.isLong ? "btn-long" : "") + " delay-" + (i) + ""], [null,null,null,null,true])) + ">" + (null == (jade_interp = answer.content) ? "" : jade_interp) + "</div></div>");
    }

  }
}).call(this);

buf.push("</div></div></div></div></div></div><div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"answers" in locals_for_with?locals_for_with.answers:typeof answers!=="undefined"?answers:undefined,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"game" in locals_for_with?locals_for_with.game:typeof game!=="undefined"?game:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"subtitle" in locals_for_with?locals_for_with.subtitle:typeof subtitle!=="undefined"?subtitle:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/multiple-choice-game/view.coffee", function(exports, require, module) {
var GameView, MultipleChoiceGameView, dpi, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

GameView = require("views/base/game");

dpi = require("lib/device").dpi;

MultipleChoiceGameView = (function(_super) {
  __extends(MultipleChoiceGameView, _super);

  function MultipleChoiceGameView() {
    _ref = MultipleChoiceGameView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  MultipleChoiceGameView.prototype.template = require("./template");

  MultipleChoiceGameView.prototype.events = {
    "iostap .selectable": "selectAnswer",
    "iostap .btn-done": "endGame",
    "iostap .multi-content-wrapper-image": "showZoom"
  };

  MultipleChoiceGameView.prototype.serialize = function() {
    var answer, answers, bottomAnswers, data, isLong, longest, otherAnswers, _ref1, _ref2, _ref3;
    data = MultipleChoiceGameView.__super__.serialize.apply(this, arguments);
    answers = _.filter(((_ref1 = data.metadata.questions) != null ? (_ref2 = _ref1[0]) != null ? _ref2.answers : void 0 : void 0) || [], "content");
    longest = _.max(answers, function(answer) {
      var _ref3;
      return ((_ref3 = answer.content) != null ? _ref3.length : void 0) || 0;
    });
    isLong = ((_ref3 = longest.content) != null ? _ref3.length : void 0) > Math.min(data.width / 16, 30);
    answers = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = answers.length; _i < _len; _i++) {
        answer = answers[_i];
        _results.push(_.extend({}, answer, {
          isLong: isLong,
          bottom: /the above/i.test(answer.content)
        }));
      }
      return _results;
    })();
    if (data.randomize) {
      answers = _.shuffle(answers);
    }
    bottomAnswers = _.where(answers, {
      bottom: true
    });
    otherAnswers = _.without.apply(_, [answers].concat(__slice.call(bottomAnswers)));
    data.answers = otherAnswers.concat(bottomAnswers);
    return data;
  };

  MultipleChoiceGameView.prototype.render = function() {
    MultipleChoiceGameView.__super__.render.apply(this, arguments);
    this.setEl(this.findAll(".selectable"), "answers");
    this.setEl([], "selected");
    return this.onTimerChange(this.game.timer);
  };

  MultipleChoiceGameView.prototype.beforeShow = function() {
    return this.trigger("ui", {
      flexibleHeight: true
    });
  };

  MultipleChoiceGameView.prototype.beforeHide = function() {
    return this.trigger("ui", {
      flexibleHeight: false
    });
  };

  MultipleChoiceGameView.prototype.show = function() {
    var canFocusImage, el, img, rect, _i, _len, _ref1;
    MultipleChoiceGameView.__super__.show.apply(this, arguments);
    this.setState("prompt");
    _ref1 = this.getEl("answers") || [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      el = _ref1[_i];
      el.classList.remove("active");
    }
    this.enterGame();
    if (this.options.data.titleType === "image") {
      img = this.findOne(".multi-content-image");
      rect = img.getBoundingClientRect();
      if (rect.height < (img.naturalHeight || img.height) || rect.width < (img.naturalWidth || img.width)) {
        canFocusImage = true;
      }
    }
    return this.setState(canFocusImage, "image-focus");
  };

  MultipleChoiceGameView.prototype.showZoom = function(e) {
    var img, rect,
      _this = this;
    img = this.findOne(".multi-content-image");
    rect = img.getBoundingClientRect();
    if (rect.height < (img.naturalHeight || img.height) || rect.width < (img.naturalWidth || img.width)) {
      this.photoswipe = new PhotoSwipe(document.querySelector("#photoswipe"), PhotoSwipeUI_Default, [
        {
          msrc: img.src,
          src: img.src,
          title: written.wrapInTag(this.options.data.subtitle || "", "h2"),
          w: (img.naturalWidth || img.width) / Math.min(dpi, 1.66),
          h: (img.naturalHeight || img.height) / Math.min(dpi, 1.66)
        }
      ], {
        focus: false,
        history: false,
        barsSize: {
          top: 0,
          bottom: 0
        },
        getThumbBoundsFn: function() {
          return {
            x: rect.left,
            y: rect.top,
            w: rect.width
          };
        }
      });
      this.photoswipe.listen("close", function() {
        return _this.setState(false, "focus");
      });
      return this.photoswipe.init();
    }
  };

  MultipleChoiceGameView.prototype.endGame = function() {
    MultipleChoiceGameView.__super__.endGame.apply(this, arguments);
    return this.submit();
  };

  MultipleChoiceGameView.prototype.selectAnswer = function(e) {
    var el, selected, _ref1;
    if (this.currentState.state === "complete") {
      return;
    }
    selected = this.getEl("selected");
    el = e.currentTarget;
    if (this.options.data.selectable === 1 && el.classList.contains("active")) {
      return;
    }
    el.classList.toggle("active");
    if (el.classList.contains("active")) {
      if (selected.length >= this.options.data.selectable) {
        if ((_ref1 = selected.shift()) != null) {
          _ref1.classList.remove("active");
        }
      }
      selected.push(el);
    } else {
      selected = _.without(selected, el);
    }
    this.setEl(selected, "selected");
    return this.setState("touched");
  };

  MultipleChoiceGameView.prototype.noDifference = function(arr1, arr2) {
    return _.chain(arr1).difference(arr2).isEmpty().value();
  };

  MultipleChoiceGameView.prototype.answerDetails = function() {
    var answers, details, question, questions, texts;
    questions = this.options.metadata.questions || [];
    if (!(questions.length > 0)) {
      return [];
    }
    question = questions[0];
    texts = this.getEl("selected").map(function(e) {
      return this.$(e).text();
    });
    answers = question.answers.filter(function(a) {
      var _ref1, _ref2;
      return _ref1 = (_ref2 = a.content) != null ? _ref2.toString() : void 0, __indexOf.call(texts, _ref1) >= 0;
    });
    details = answers.map(function(a) {
      return {
        question: question.question,
        answer: a
      };
    });
    return details;
  };

  MultipleChoiceGameView.prototype.isCorrect = function() {
    var correct, selected;
    selected = this.getEl("selected");
    correct = _.chain(this.getEl("answers")).filter(function(el) {
      return el.classList.contains("correct");
    }).value();
    return this.noDifference(correct, selected) && this.noDifference(selected, correct);
  };

  return MultipleChoiceGameView;

})(GameView);

module.exports = MultipleChoiceGameView;
});

;require.register("engine/multiple-choice-survey/model.yaml", function(exports, require, module) {
module.exports = {"title":"multiple-choice-survey","display":"Multiple Choice","category":"Survey","description":"Ask a multiple choice question","model":{"question":{"id":{"type":"uuid","hidden":true},"content":{"default":"Your question","types":["text","image","video","audio","iframe"]}},"answers":{"min":2,"max":8,"type":[{"id":{"type":"uuid","hidden":true},"content":{"type":"html"}}]},"prompt":{"type":"html","default":"Select the best response"},"randomize":{"default":true,"type":"boolean","help":"Randomize the order of the answers to reduce response bias from your learners.\n"}},"examples":[{"question":{"id":"#GENUUID#","content":"Have you learned something new with this lesson?","contentType":"text"},"answers":[{"id":"#GENUUID#","content":"Yes"},{"id":"#GENUUID#","content":"No"}]}]}
});

;require.register("engine/multiple-choice-survey/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (answers, config, continueBtnText, hasNarration, hasPrompt, i18n, prompt, undefined) {
jade_mixins["multi-content"] = jade_interp = function(prop, obj){
var block = (this && this.block), attributes = (this && this.attributes) || {};
obj = obj || locals;
switch (obj[prop + "Type"]){
case "image":
buf.push("<div" + (jade.attr("data-content", obj.image, true, false)) + " class=\"multi-content-wrapper multi-content-wrapper-image block-md block-lt\"><div class=\"block-sm multi-content-media\"><img" + (jade.attr("src", obj[prop], true, false)) + " class=\"multi-content multi-content-image\"/></div></div>");
  break;
case "video":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-video block-md block-lt\"><div class=\"block-sm multi-content-media\"><video" + (jade.attr("src", obj[prop], true, false)) + " webkit-playsinline=\"webkit-playsinline\" playsinline=\"playsinline\" preload=\"auto\" controls=\"controls\"" + (jade.attr("dir", config.direction, true, false)) + " class=\"video-js multi-content multi-content-video block-dk\"></video></div></div>");
  break;
case "audio":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-audio block-md block-lt\"><div class=\"block-sm multi-content-media\"><audio" + (jade.attr("src", obj[prop], true, false)) + " webkit-playsinline=\"webkit-playsinline\" playsinline=\"playsinline\" preload=\"auto\" controls=\"controls\"" + (jade.attr("dir", config.direction, true, false)) + " class=\"multi-content multi-content-audio block-dk\"></audio></div></div>");
  break;
case "iframe":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-iframe block-md block-lt\"><div class=\"block-sm multi-content-iframe\">");
var iframe = obj[prop].match(/<iframe[^<]*<\/iframe>/)
if ( iframe)
{
buf.push(null == (jade_interp = iframe[0].replace(/ (width|height)=["'\d\w]+/g, "")) ? "" : jade_interp);
}
buf.push("</div></div>");
  break;
default:
buf.push("<span class=\"multi-content multi-content-text\">" + (null == (jade_interp = obj[prop]) ? "" : jade_interp) + "</span>");
  break;
}
};
buf.push("<div class=\"block-v-lg content-fill content-fit\"><div class=\"row content-lg-fill content-sm-ver content-md-ver\"><div class=\"col-lg-6 col-sm-12 content-lg-ver block-v-md\"><h1 class=\"slide-title text-lg-right text-md-center text-sm-center fade-in\">");
jade_mixins["multi-content"]("title");
buf.push("</h1></div><div class=\"col-lg-6 col-sm-12 content-lg-ver block-v-md\"><div class=\"block-md block-dk fade-in\"><div class=\"block-h-sm\">");
// iterate answers
;(function(){
  var $$obj = answers;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var answer = $$obj[i];

buf.push("<div" + (jade.attr("data-answer-id", answer.id, true, false)) + " class=\"selectable block-v-sm fade-in\"><div" + (jade.cls(['btn','btn-solid','btn-block','slide-up',(answer.isLong ? "btn-long" : "") + " delay-" + (i) + ""], [null,null,null,null,true])) + ">" + (null == (jade_interp = answer.content) ? "" : jade_interp) + "</div></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var answer = $$obj[i];

buf.push("<div" + (jade.attr("data-answer-id", answer.id, true, false)) + " class=\"selectable block-v-sm fade-in\"><div" + (jade.cls(['btn','btn-solid','btn-block','slide-up',(answer.isLong ? "btn-long" : "") + " delay-" + (i) + ""], [null,null,null,null,true])) + ">" + (null == (jade_interp = answer.content) ? "" : jade_interp) + "</div></div>");
    }

  }
}).call(this);

buf.push("</div></div></div></div></div><div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"answers" in locals_for_with?locals_for_with.answers:typeof answers!=="undefined"?answers:undefined,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/multiple-choice-survey/view.coffee", function(exports, require, module) {
var InputView, MultipleChoiceSurveyView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

InputView = require("views/input");

MultipleChoiceSurveyView = (function(_super) {
  __extends(MultipleChoiceSurveyView, _super);

  function MultipleChoiceSurveyView() {
    _ref = MultipleChoiceSurveyView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  MultipleChoiceSurveyView.prototype.template = require("./template");

  MultipleChoiceSurveyView.prototype.events = {
    "iostap .selectable": "selectAnswer",
    "iostap .btn-done": "nextSlide"
  };

  MultipleChoiceSurveyView.prototype.serialize = function() {
    var answer, answers, bottomAnswers, data, isLong, longest, otherAnswers, _ref1;
    data = MultipleChoiceSurveyView.__super__.serialize.apply(this, arguments);
    data.title = data.question.content;
    data.titleType = data.question.contentType;
    data.hasPrompt = true;
    answers = _.filter(data.answers, "content");
    longest = _.max(answers, function(answer) {
      var _ref1;
      return ((_ref1 = answer.content) != null ? _ref1.length : void 0) || 0;
    });
    isLong = ((_ref1 = longest.content) != null ? _ref1.length : void 0) > Math.min(data.width / 16, 30);
    answers = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = answers.length; _i < _len; _i++) {
        answer = answers[_i];
        _results.push(_.extend({}, answer, {
          isLong: isLong,
          bottom: /the above/i.test(answer.content)
        }));
      }
      return _results;
    })();
    if (data.randomize) {
      answers = _.shuffle(answers);
    }
    bottomAnswers = _.where(answers, {
      bottom: true
    });
    otherAnswers = _.without.apply(_, [answers].concat(__slice.call(bottomAnswers)));
    data.answers = otherAnswers.concat(bottomAnswers);
    return data;
  };

  MultipleChoiceSurveyView.prototype.render = function() {
    MultipleChoiceSurveyView.__super__.render.apply(this, arguments);
    this.setEl(this.findAll(".selectable"), "answers");
    return this.setEl([], "selected");
  };

  MultipleChoiceSurveyView.prototype.show = function() {
    var el, _i, _len, _ref1, _results;
    _ref1 = this.getEl("answers") || [];
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      el = _ref1[_i];
      _results.push(el.classList.remove("active"));
    }
    return _results;
  };

  MultipleChoiceSurveyView.prototype.userInput = function(e) {
    var selected;
    selected = $(this.getEl("selected"));
    return {
      question: {
        id: this.options.data.question.id,
        text: this.options.data.question.content
      },
      answer: {
        id: selected.data('answer-id'),
        text: selected.text()
      }
    };
  };

  MultipleChoiceSurveyView.prototype.selectAnswer = function(e) {
    var el, selected, _ref1;
    if (this.currentState.state === "complete") {
      return;
    }
    selected = this.getEl("selected");
    el = e.currentTarget;
    if (el.classList.contains("active")) {
      return;
    }
    el.classList.toggle("active");
    if (el.classList.contains("active")) {
      if (selected.length >= 1) {
        if ((_ref1 = selected.shift()) != null) {
          _ref1.classList.remove("active");
        }
      }
      selected.push(el);
    } else {
      selected = _.without(selected, el);
    }
    this.setEl(selected, "selected");
    return this.setState("touched");
  };

  return MultipleChoiceSurveyView;

})(InputView);

module.exports = MultipleChoiceSurveyView;
});

;require.register("engine/number-picker/model.yaml", function(exports, require, module) {
module.exports = {"title":"number-picker","display":"Number Picker","category":"Numbers","features":{"stars":true},"model":{"title":{"type":"html","default":"Input number 5 in this sentence","help":"Include the number or hashes (#) where the number will occur. The latter takes precendence.\n"},"number":{"digits":{"type":"int","default":2,"min":1,"max":4},"min":{"type":"int","default":0,"display":"Min. Value"},"max":{"type":"int","default":99,"display":"Max. Value"},"prefix":{"type":"html","default":""},"suffix":{"type":"html","default":""},"initial":{"display":"Starting Value","type":"int","default":0}},"answer":{"text":{"type":"html","default":"","display":"Answer Text"},"value":{"type":"number","default":5,"display":"Correct Value"},"correct":{"type":"html","default":"That's correct!","display":"Correct Reinforcement"},"incorrect":{"type":"html","default":"Not quite...","display":"Incorrect Reinforcement"},"takeaway":{"type":"html","default":"","display":"Core Message"}},"prompt":{"type":"html","default":"Select the correct number"},"game":{"timer":{"limit":{"type":"number","default":-1,"display":"Time Limit (ms)"}}}},"examples":[{"title":"Of the 3 top-selling brands, our portfolio has ##.","number":{"digits":2,"max":10,"min":0,"initial":0},"answer":{"value":3,"takeaway":"Our portfolio has 3 of the 3 top-selling brands"}},{"title":"At a cost of $99, our product is the cheapest","number":{"digits":3,"max":147,"min":12,"initial":99,"prefix":"$","suffix":","},"answer":{"value":99,"takeaway":"The product costs $99.00"}}]}
});

;require.register("engine/number-picker/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (Array, after, before, continueBtnText, game, hasNarration, hasPrompt, i18n, isLong, number, prompt, undefined) {
if ( game && game.timer && game.timer.limit > 0)
{
buf.push("<div class=\"full-screen\"><div class=\"game-stepper text-lg text-bold\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div></div>");
}
buf.push("<div class=\"content-fill\"><div class=\"content-fit block-v-xl content text-center\">");
if ( before)
{
buf.push("<div class=\"block-v-md\"><h1 class=\"number-picker-title slide-down\">" + (null == (jade_interp = before) ? "" : jade_interp) + "</h1></div>");
}
buf.push("<div" + (jade.cls(['number-pickers','scale-up','block-v-md',isLong ? "pickers-sm" : ""], [null,null,null,true])) + ">");
if ( number.prefix)
{
buf.push("<div class=\"number-picker-prefix text-right text-xxl\">" + (null == (jade_interp = number.prefix) ? "" : jade_interp) + "</div>");
}
// iterate (new Array(number.digits))
;(function(){
  var $$obj = (new Array(number.digits));
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var el = $$obj[i];

buf.push("<div class=\"number-picker block-dk\"><div class=\"btn btn-solid btn-block text-sm number-picker-arr-up\"><span class=\"icon text-xl icon-chevron-up\"></span></div><div class=\"number-picker-nums\"><div class=\"number-picker-nums-scroller\">");
// iterate new Array(11)
;(function(){
  var $$obj = new Array(11);
  if ('number' == typeof $$obj.length) {

    for (var j = 0, $$l = $$obj.length; j < $$l; j++) {
      var el = $$obj[j];

buf.push("<div class=\"number-picker-num block-h-md\"><div class=\"text-xxl\">" + (jade.escape(null == (jade_interp = j % 10) ? "" : jade_interp)) + "</div></div>");
    }

  } else {
    var $$l = 0;
    for (var j in $$obj) {
      $$l++;      var el = $$obj[j];

buf.push("<div class=\"number-picker-num block-h-md\"><div class=\"text-xxl\">" + (jade.escape(null == (jade_interp = j % 10) ? "" : jade_interp)) + "</div></div>");
    }

  }
}).call(this);

buf.push("</div></div><div class=\"btn btn-solid btn-block text-sm number-picker-arr-down\"><span class=\"icon text-xl icon-chevron-down\"></span></div></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var el = $$obj[i];

buf.push("<div class=\"number-picker block-dk\"><div class=\"btn btn-solid btn-block text-sm number-picker-arr-up\"><span class=\"icon text-xl icon-chevron-up\"></span></div><div class=\"number-picker-nums\"><div class=\"number-picker-nums-scroller\">");
// iterate new Array(11)
;(function(){
  var $$obj = new Array(11);
  if ('number' == typeof $$obj.length) {

    for (var j = 0, $$l = $$obj.length; j < $$l; j++) {
      var el = $$obj[j];

buf.push("<div class=\"number-picker-num block-h-md\"><div class=\"text-xxl\">" + (jade.escape(null == (jade_interp = j % 10) ? "" : jade_interp)) + "</div></div>");
    }

  } else {
    var $$l = 0;
    for (var j in $$obj) {
      $$l++;      var el = $$obj[j];

buf.push("<div class=\"number-picker-num block-h-md\"><div class=\"text-xxl\">" + (jade.escape(null == (jade_interp = j % 10) ? "" : jade_interp)) + "</div></div>");
    }

  }
}).call(this);

buf.push("</div></div><div class=\"btn btn-solid btn-block text-sm number-picker-arr-down\"><span class=\"icon text-xl icon-chevron-down\"></span></div></div>");
    }

  }
}).call(this);

if ( number.suffix)
{
buf.push("<div class=\"number-picker-suffix text-left text-xxl\">" + (null == (jade_interp = number.suffix) ? "" : jade_interp) + "</div>");
}
buf.push("</div>");
if ( after)
{
buf.push("<div class=\"block-v-md\"><h1 class=\"number-picker-title slide-up\">" + (null == (jade_interp = after) ? "" : jade_interp) + "</h1></div>");
}
buf.push("</div></div><div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"Array" in locals_for_with?locals_for_with.Array:typeof Array!=="undefined"?Array:undefined,"after" in locals_for_with?locals_for_with.after:typeof after!=="undefined"?after:undefined,"before" in locals_for_with?locals_for_with.before:typeof before!=="undefined"?before:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"game" in locals_for_with?locals_for_with.game:typeof game!=="undefined"?game:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"isLong" in locals_for_with?locals_for_with.isLong:typeof isLong!=="undefined"?isLong:undefined,"number" in locals_for_with?locals_for_with.number:typeof number!=="undefined"?number:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/number-picker/view.coffee", function(exports, require, module) {
var GameView, NumberPickerView, Picker, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

GameView = require("views/base/game");

Picker = require("views/components/picker");

NumberPickerView = (function(_super) {
  __extends(NumberPickerView, _super);

  function NumberPickerView() {
    _ref = NumberPickerView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  NumberPickerView.prototype.template = require("./template");

  NumberPickerView.prototype.events = {
    "iostap .btn-done": "endGame"
  };

  NumberPickerView.prototype.serialize = function() {
    var answer, bits, data, num, number, prefix, splitter, suffix, title;
    data = NumberPickerView.__super__.serialize.apply(this, arguments);
    title = data.title, number = data.number, answer = data.answer;
    prefix = number.prefix, suffix = number.suffix;
    if (/\W#+\W/.test(title)) {
      bits = title.split(/\W+#+\W+/);
    } else {
      num = "" + prefix + answer.value + suffix;
      num = num != null ? num.replace(/[\$\!]/g, function(w) {
        return "\\" + w;
      }) : void 0;
      splitter = new RegExp("\\s+" + num + "\\s+");
      bits = (title || "").split(splitter);
    }
    data.isLong = prefix.length + suffix.length > 5;
    data.before = bits[0];
    data.after = bits.slice(1).join("");
    return data;
  };

  NumberPickerView.prototype.show = function() {
    var digits, el, i, initial, picker, _i, _len, _ref1, _ref2;
    NumberPickerView.__super__.show.apply(this, arguments);
    this.setEl(this.findAll(".number-picker"), "pickers");
    _ref1 = this.options.data.number, initial = _ref1.initial, digits = _ref1.digits;
    while (("" + initial).length < digits) {
      initial = " " + initial;
    }
    this.pickers = (function() {
      var _i, _len, _ref2, _results;
      _ref2 = this.getEl("pickers");
      _results = [];
      for (i = _i = 0, _len = _ref2.length; _i < _len; i = ++_i) {
        el = _ref2[i];
        picker = new Picker({
          el: el,
          value: +("" + initial).charAt(i)
        });
        this.listenTo(picker, "change", this.onChange);
        _results.push(picker);
      }
      return _results;
    }).call(this);
    _ref2 = this.pickers;
    for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
      picker = _ref2[_i];
      this.onChange(picker, null, true);
    }
    return this.enterGame();
  };

  NumberPickerView.prototype.onChange = function(picker, isIncreasing, isFirstRun) {
    var cascade, reset;
    this.getTotal();
    if (!isFirstRun) {
      this.setState("touched");
    }
    if (isFirstRun) {
      this.transform(picker.scroller, {
        y: picker.offset.height * -picker.value,
        transition: "all 300ms"
      });
    } else if ((picker.value === 0) && isIncreasing) {
      this.transform(picker.scroller, {
        y: picker.offset.height * -10,
        transition: "all 300ms"
      });
      cascade = 1;
    } else {
      if ((picker.value === 1) && isIncreasing) {
        reset = 0;
      }
      if ((picker.value === 9) && !isIncreasing) {
        reset = picker.offset.height * -10;
        cascade = -1;
      }
      if (reset != null) {
        this.transform(picker.scroller, {
          y: reset,
          transition: "none"
        });
        picker.scroller.offsetWidth;
      }
      this.transform(picker.scroller, {
        y: picker.offset.height * -picker.value,
        transition: "all 300ms"
      });
    }
    if (cascade != null) {
      return this.cascadeFrom(picker, cascade);
    }
  };

  NumberPickerView.prototype.getTotal = function() {
    var diff, i, picker, _i, _len, _ref1, _results;
    this.currentValue = +((function() {
      var _i, _len, _ref1, _results;
      _ref1 = this.pickers;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        picker = _ref1[_i];
        _results.push(picker.value);
      }
      return _results;
    }).call(this)).join("");
    _ref1 = this.pickers;
    _results = [];
    for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
      picker = _ref1[i];
      diff = Math.pow(10, this.pickers.length - i - 1);
      picker.toggleUp(this.currentValue + diff > this.options.data.number.max);
      _results.push(picker.toggleDown(this.currentValue - diff < this.options.data.number.min));
    }
    return _results;
  };

  NumberPickerView.prototype.cascadeFrom = function(picker, diff) {
    var index, _ref1;
    index = this.pickers.indexOf(picker);
    return (_ref1 = this.pickers[index - 1]) != null ? _ref1.setBy(diff, true) : void 0;
  };

  NumberPickerView.prototype.isCorrect = function() {
    return this.currentValue === this.options.data.answer.value;
  };

  NumberPickerView.prototype.endGame = function() {
    NumberPickerView.__super__.endGame.apply(this, arguments);
    return this.submit();
  };

  NumberPickerView.prototype.answerDetails = function() {
    var answer, cleanedContent, correct, details, question, questions, value, _ref1;
    questions = ((_ref1 = this.options.metadata) != null ? _ref1.questions : void 0) || [];
    if (!(questions.length > 0)) {
      return [];
    }
    question = questions[0];
    correct = this.isCorrect();
    value = parseInt(this.currentValue);
    cleanedContent = question.question.content.replace(/##/, '__').replace(/<br>/, ' ');
    question.question.content = cleanedContent;
    answer = _.find(question.answers, function(a) {
      return a.correct === correct;
    });
    details = {
      question: question.question,
      answer: answer
    };
    details.answer.content = value;
    return [details];
  };

  return NumberPickerView;

})(GameView);

module.exports = NumberPickerView;
});

;require.register("engine/number-sentence/components/digits.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (digits, undefined) {
// iterate digits
;(function(){
  var $$obj = digits;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var digit = $$obj[$index];

buf.push("<span" + (jade.attr("style", ([
      "opacity: " + (_.isNumber(digit.opacity) ? digit.opacity : 1) + "",
      "transform: translate3d(" + (digit.x || 0) + "px, " + (digit.y || 0) + "px, 0)"
    ]).join(";"), true, false)) + " class=\"digit\">" + (jade.escape(null == (jade_interp = digit.text) ? "" : jade_interp)) + "</span>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var digit = $$obj[$index];

buf.push("<span" + (jade.attr("style", ([
      "opacity: " + (_.isNumber(digit.opacity) ? digit.opacity : 1) + "",
      "transform: translate3d(" + (digit.x || 0) + "px, " + (digit.y || 0) + "px, 0)"
    ]).join(";"), true, false)) + " class=\"digit\">" + (jade.escape(null == (jade_interp = digit.text) ? "" : jade_interp)) + "</span>");
    }

  }
}).call(this);
}.call(this,"digits" in locals_for_with?locals_for_with.digits:typeof digits!=="undefined"?digits:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/number-sentence/components/wrapper.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (zero) {
buf.push("<span class=\"number-wrap\"><span class=\"number\">" + (jade.escape(null == (jade_interp = zero) ? "" : jade_interp)) + "</span>&nbsp;</span>");}.call(this,"zero" in locals_for_with?locals_for_with.zero:typeof zero!=="undefined"?zero:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/number-sentence/model.yaml", function(exports, require, module) {
module.exports = {"title":"number-sentence","display":"Number Sentence","category":"Numbers","features":{"stars":true},"model":{"title":{"type":"html","default":"Input number 5 in this sentence","help":"Include hashes (#) where the number will occur.\n"},"numbers":{"min":2,"max":8,"type":[{"number":{"type":"number","default":false},"correct":{"type":"boolean"}}]},"decimals":{"type":"int","min":0,"max":8,"default":0},"answer":{"text":{"type":"html","default":"","display":"Answer Text"},"correct":{"type":"html","default":"That's correct!","display":"Correct Reinforcement"},"incorrect":{"type":"html","default":"Not quite...","display":"Incorrect Reinforcement"},"takeaway":{"type":"html","default":"","display":"Core Message"}},"prompt":{"type":"html","default":"Select the correct number"},"game":{"timer":{"limit":{"type":"number","default":-1,"display":"Time Limit (ms)"}}}},"examples":[{"title":"We have sold<br>over ## units<br>around the world.\n","numbers":[{"number":100},{"number":1000},{"number":10000},{"number":100000},{"number":1000000,"correct":true}]},{"title":"Our product has ##% market share.","decimals":1,"numbers":[{"number":20.6},{"number":16.2},{"number":12.6},{"number":32.8},{"number":26.6,"correct":true}]}]}
});

;require.register("engine/number-sentence/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (continueBtnText, game, hasNarration, hasPrompt, i18n, prompt, sentence) {
if ( game && game.timer && game.timer.limit > 0)
{
buf.push("<div class=\"full-screen\"><div class=\"game-stepper text-lg text-bold\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div></div>");
}
buf.push("<div class=\"content-fill\"><div class=\"content-ver text-center content-fit\"><div class=\"arrow btn-up block-md\"><div class=\"btn btn-muted btn-circular slide-down delay-2\"><span class=\"icon icon-chevron-up text-xl\"></span></div></div><div class=\"block-v-xl fade-in\"><div class=\"block-v-xl\"><div class=\"text-xxl slide-up\">" + (null == (jade_interp = sentence) ? "" : jade_interp) + "</div></div></div><div class=\"arrow btn-down block-md\"><div class=\"btn btn-muted btn-circular slide-up delay-2\"><span class=\"icon icon-chevron-down text-xl\"></span></div></div></div></div><div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"game" in locals_for_with?locals_for_with.game:typeof game!=="undefined"?game:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"sentence" in locals_for_with?locals_for_with.sentence:typeof sentence!=="undefined"?sentence:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/number-sentence/view.coffee", function(exports, require, module) {
var Easie, GameView, NumberPickerView, animate, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

GameView = require("views/base/game");

animate = require("lib/animate");

Easie = require("lib/easie");

NumberPickerView = (function(_super) {
  __extends(NumberPickerView, _super);

  function NumberPickerView() {
    _ref = NumberPickerView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  NumberPickerView.prototype.templates = {
    "default": require("./template"),
    wrapper: require("./components/wrapper"),
    digits: require("./components/digits")
  };

  NumberPickerView.prototype.events = {
    "iostap   .btn-up": "increase",
    "iostap .btn-down": "decrease",
    "iostap .btn-done": "endGame"
  };

  NumberPickerView.prototype.serialize = function() {
    var answers, data, decimals, numbers, question, zero, _ref1;
    data = NumberPickerView.__super__.serialize.apply(this, arguments);
    _ref1 = data.metadata.questions[0], question = _ref1.question, answers = _ref1.answers;
    decimals = data.decimals, numbers = data.numbers;
    data.correct = _.find(numbers, 'correct');
    data.answers = _.sortBy(answers, 'content');
    zero = 0..toFixed(decimals || 0);
    data.sentence = question.content.replace(/#+/, this.templates.wrapper({
      zero: zero
    }));
    return data;
  };

  NumberPickerView.prototype.onRefresh = function() {
    this.beforeShow();
    return NumberPickerView.__super__.onRefresh.apply(this, arguments);
  };

  NumberPickerView.prototype.beforeShow = function() {
    this.setEl(this.findOne(".btn-up"), "up");
    this.setEl(this.findOne(".btn-down"), "down");
    this.setEl(this.findOne(".number"), "number");
    this.currentIndex = _.random(this.options.metadata.questions[0].answers.length - 1);
    this.animateChange(0);
    return this.trigger("ui", {
      flexibleHeight: true
    });
  };

  NumberPickerView.prototype.beforeHide = function() {
    return this.trigger("ui", {
      flexibleHeight: false
    });
  };

  NumberPickerView.prototype.show = function() {
    NumberPickerView.__super__.show.apply(this, arguments);
    return this.enterGame();
  };

  NumberPickerView.prototype.increase = function() {
    var prev, values;
    values = this.serialize().answers;
    prev = values[this.currentIndex].content;
    this.currentIndex = Math.min(values.length - 1, this.currentIndex + 1);
    this.animateChange(prev);
    return this.setState("touched");
  };

  NumberPickerView.prototype.decrease = function() {
    var prev, values;
    values = this.serialize().answers;
    prev = values[this.currentIndex].content;
    this.currentIndex = Math.max(0, this.currentIndex - 1);
    this.animateChange(prev, null, -1);
    return this.setState("touched");
  };

  NumberPickerView.prototype.animateChange = function(prev, next, dir) {
    var answers, cache, decimals, dist, draw, dur, el, limit, nStr, nb, pStr, w1, w2, _ref1, _ref2, _ref3,
      _this = this;
    if (dir == null) {
      dir = 1;
    }
    _ref1 = this.serialize(), answers = _ref1.answers, decimals = _ref1.decimals;
    el = this.getEl("number");
    limit = answers.length - 1;
    if (next == null) {
      next = answers[this.currentIndex].content;
    }
    w1 = el.offsetWidth;
    nb = el.innerHTML;
    el.innerHTML = written.prettyNumber(next, ",", decimals);
    w2 = el.offsetWidth;
    el.innerHTML = nb;
    this.getEl("down").classList.toggle("disabled", this.currentIndex === 0);
    this.getEl("up").classList.toggle("disabled", this.currentIndex === limit);
    if (!(decimals > -1)) {
      decimals = 0;
    }
    cache = null;
    pStr = written.prettyNumber(prev, ",", decimals);
    nStr = written.prettyNumber(next, ",", decimals);
    dur = 0.66;
    dist = -4;
    draw = function(d) {
      var clamp, diff, digits, eez, i, k, ln, num, start, str, yDiff, _i, _j, _k, _l;
      eez = Easie.quartInOut(d, 0, 1, 1);
      num = prev + (next - prev) * eez;
      if (decimals === 0) {
        num = Math.round(num);
      }
      str = written.prettyNumber(num, ",", decimals);
      el.parentNode.style.width = "" + (w1 + (w2 - w1) * eez) + "px";
      digits = (function() {
        var _i, _len, _results;
        _results = [];
        for (i = _i = 0, _len = str.length; _i < _len; i = ++_i) {
          k = str[i];
          ln = str.length;
          start = i / ln * (1 - dur);
          clamp = _.limit(d - start, dur);
          yDiff = Easie.quartIn(Math.sin(clamp / dur * Math.PI), 0, 1, 1);
          _results.push({
            text: k,
            y: yDiff * dist * dir
          });
        }
        return _results;
      })();
      if (d < 1) {
        if (str.length < pStr.length) {
          diff = pStr.length - str.length - 1;
          for (i = _i = diff; diff <= 0 ? _i <= 0 : _i >= 0; i = diff <= 0 ? ++_i : --_i) {
            digits.unshift({
              text: pStr[i],
              opacity: 1 - eez,
              x: (0.25 - eez / 4) * dist * (diff - i + 1)
            });
          }
        }
        if (str.length < nStr.length) {
          diff = nStr.length - str.length - 1;
          for (i = _j = diff; diff <= 0 ? _j <= 0 : _j >= 0; i = diff <= 0 ? ++_j : --_j) {
            digits.unshift({
              text: nStr[i],
              opacity: eez,
              x: (0.25 - eez / 4) * dist * (diff - i + 1)
            });
          }
        }
        if (str.length > pStr.length) {
          diff = str.length - pStr.length - 1;
          for (i = _k = 0; 0 <= diff ? _k <= diff : _k >= diff; i = 0 <= diff ? ++_k : --_k) {
            digits[i].opacity = d;
          }
        }
        if (str.length > nStr.length) {
          diff = str.length - nStr.length - 1;
          for (i = _l = 0; 0 <= diff ? _l <= diff : _l >= diff; i = 0 <= diff ? ++_l : --_l) {
            digits[i].opacity = 1 - d;
          }
        }
      }
      return el.innerHTML = _this.templates.digits({
        digits: digits
      });
    };
    if ((_ref2 = this.animation) != null) {
      _ref2.cancel();
    }
    return this.animation = animate(draw, ((_ref3 = this.currentState) != null ? _ref3.refresh : void 0) ? 0 : 900);
  };

  NumberPickerView.prototype.isCorrect = function() {
    var answer, _ref1;
    answer = this.serialize().answers[this.currentIndex];
    return (answer != null ? answer.correct : void 0) || answer.content === ((_ref1 = this.serialize().correct) != null ? _ref1.number : void 0);
  };

  NumberPickerView.prototype.endGame = function() {
    var next, numbers, prev, _ref1;
    NumberPickerView.__super__.endGame.apply(this, arguments);
    this.submit();
    if (!this.isCorrect()) {
      numbers = this.serialize().numbers;
      prev = numbers[this.currentIndex].number;
      next = (_ref1 = _.find(numbers, {
        correct: true
      })) != null ? _ref1.number : void 0;
      return this.animateChange(prev, next);
    }
  };

  NumberPickerView.prototype.answerDetails = function() {
    var questions, _ref1;
    questions = ((_ref1 = this.options.metadata) != null ? _ref1.questions : void 0) || [];
    if (!(questions.length > 0)) {
      return [];
    }
    return [
      {
        question: questions[0].question,
        answer: this.serialize().answers[this.currentIndex],
        correct: this.isCorrect()
      }
    ];
  };

  return NumberPickerView;

})(GameView);

module.exports = NumberPickerView;
});

;require.register("engine/parallax/model.yaml", function(exports, require, module) {
module.exports = {"title":"parallax","display":"Parallax Motion","category":"Content","features":{"narration":true},"description":"Create the illusion of 3-dimensions","model":{"images":{"min":1,"max":10,"type":[{"type":"image"}],"help":"Separate each layer of your design onto it’s own image. Images overlay each other, with the first positioned at the back. Those nearer the back or front of the stack will move more than images in the middle.\n"},"caption":{"type":"html","default":""},"background":{"type":"text","default":"","display":"Background Color"}},"examples":[{"caption":"## The Ed experience is available on **mobile & desktop**\n","images":["img/examples/parallax-1.png","img/examples/parallax-2.png","img/examples/parallax-3.png"]}]}
});

;require.register("engine/parallax/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (background, caption, continueBtnText, hasNarration, hasPrompt, i18n, images, prompt, undefined) {
buf.push("<div class=\"parallax-container content-fill text-center\"><div" + (jade.cls(['parallax-images','fade-in','delay-4','content-fill',background ? "full-screen" : ""], [null,null,null,null,true])) + ">");
// iterate images
;(function(){
  var $$obj = images;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var src = $$obj[i];

buf.push("<img" + (jade.attr("src", src, true, false)) + (jade.cls(['parallax-img','content',"parallax-img-" + (i) + ""], [null,null,true])) + "/>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var src = $$obj[i];

buf.push("<img" + (jade.attr("src", src, true, false)) + (jade.cls(['parallax-img','content',"parallax-img-" + (i) + ""], [null,null,true])) + "/>");
    }

  }
}).call(this);

if ( caption)
{
buf.push("<div" + (jade.attr("style", "background: " + (background) + "", true, false)) + (jade.cls(['caption','block-v-lg','text-center','slide-up',background ? "block-h-lg" : ""], [null,null,null,null,true])) + ">" + (null == (jade_interp = caption) ? "" : jade_interp) + "</div>");
}
buf.push("</div></div><div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"background" in locals_for_with?locals_for_with.background:typeof background!=="undefined"?background:undefined,"caption" in locals_for_with?locals_for_with.caption:typeof caption!=="undefined"?caption:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"images" in locals_for_with?locals_for_with.images:typeof images!=="undefined"?images:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/parallax/view.coffee", function(exports, require, module) {
var ParallaxView, Preloader, SlideView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SlideView = require("views/slide");

Preloader = require("lib/preload");

ParallaxView = (function(_super) {
  __extends(ParallaxView, _super);

  function ParallaxView() {
    _ref = ParallaxView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  ParallaxView.prototype.template = require("./template");

  ParallaxView.prototype.useMouseEvent = true;

  ParallaxView.prototype.events = function() {
    return {
      "iostap .btn-done": "next",
      "mousemove": "onMouseMove"
    };
  };

  ParallaxView.prototype.serialize = function() {
    var data;
    data = ParallaxView.__super__.serialize.apply(this, arguments);
    data.images = _.compact(data.images);
    return data;
  };

  ParallaxView.prototype.beforeShow = function() {
    var _this = this;
    return Preloader.load(this.options.data.images, function() {
      return _this.onRotate({
        beta: 0,
        gamma: 0
      });
    });
  };

  ParallaxView.prototype.show = function() {
    var _this = this;
    this.setEl(this.findAll(".parallax-img"), "images");
    this.setEl(this.findOne(".caption"), "caption");
    if (this.options.data.background) {
      this.trigger("ui", {
        lightbox: this.options.data.background
      });
    }
    if (window.Promise == null) {
      return;
    }
    this.gn = new GyroNorm();
    return this.gn.init({
      frequency: 150
    })["catch"](function() {
      return typeof console !== "undefined" && console !== null ? console.log("DeviceOrientation not available in this context") : void 0;
    }).then(function() {
      return _this.gn.start(function(data) {
        if (!_this.useMouseEvent || _this.gn.isAvailable().deviceOrientationAvailable) {
          _this.useMouseEvent = false;
          return _this.onRotate(data["do"], "all 300ms");
        }
      });
    });
  };

  ParallaxView.prototype.hide = function() {
    var _ref1;
    return (_ref1 = this.gn) != null ? _ref1.end() : void 0;
  };

  ParallaxView.prototype.onRefresh = function() {
    var _ref1;
    if ((_ref1 = this.gn) != null) {
      _ref1.end();
    }
    this.show();
    if (!this.options.data.background) {
      return this.trigger("ui", {
        lightbox: false
      });
    }
  };

  ParallaxView.prototype.undelegateEvents = function() {
    $(window).off("." + this.cid);
    return ParallaxView.__super__.undelegateEvents.apply(this, arguments);
  };

  ParallaxView.prototype.onMouseMove = function(e) {
    var beta, gamma, pageX, pageY, _ref1, _ref2;
    if (!this.useMouseEvent) {
      return;
    }
    if (typeof e.stopImmediatePropagation === "function") {
      e.stopImmediatePropagation();
    }
    _ref2 = ((_ref1 = e.touches) != null ? _ref1[0] : void 0) || e, pageX = _ref2.pageX, pageY = _ref2.pageY;
    gamma = (pageX / this.el.offsetWidth - 0.5) * 90;
    beta = (pageY / this.el.offsetHeight - 0.5) * 90;
    return this.onRotate({
      beta: beta,
      gamma: gamma
    });
  };

  ParallaxView.prototype.onRotate = function(_arg, transition) {
    var b, beta, dampenX, dampenY, g, gamma, i, images, img, length, offsetY, _i, _len, _ref1, _results;
    beta = _arg.beta, gamma = _arg.gamma;
    if (transition == null) {
      transition = "";
    }
    images = this.getEl("images");
    if (!images) {
      return;
    }
    length = images.length - (1 - images.length % 2);
    dampenX = 0.3;
    dampenY = 0.25;
    g = dampenX * gamma;
    b = dampenY * beta;
    offsetY = -((_ref1 = this.getEl("caption")) != null ? _ref1.offsetHeight : void 0) / 2 || 0;
    _results = [];
    for (i = _i = 0, _len = images.length; _i < _len; i = ++_i) {
      img = images[i];
      _results.push(this.transform(img, {
        x: g * (-length / 2 + i + 1) - img.offsetWidth / 2,
        y: b * (-length / 2 + i + 1) - img.offsetHeight / 2 + offsetY,
        transition: transition
      }));
    }
    return _results;
  };

  return ParallaxView;

})(SlideView);

module.exports = ParallaxView;
});

;require.register("engine/pie-chart/model.yaml", function(exports, require, module) {
module.exports = {"title":"pie-chart","display":"Pie Chart","category":"Numbers","features":{"stars":true},"model":{"title":{"type":"html","default":"Ask a question"},"pie":{"min":{"type":"number","default":0,"display":"Min. Value"},"max":{"type":"number","default":100,"display":"Max. Value"},"prefix":{"type":"html","default":""},"suffix":{"type":"html","default":"%"},"increment":{"type":"number","default":1}},"answer":{"text":{"type":"html","default":"","display":"Answer Text"},"value":{"type":"number","default":5,"display":"Correct Value"},"correct":{"type":"html","default":"That's correct!","display":"Correct Reinforcement"},"incorrect":{"type":"html","default":"Not quite...","display":"Incorrect Reinforcement"},"takeaway":{"type":"html","default":"","display":"Core Message"}},"prompt":{"type":"html","default":"Drag to set the correct value"},"game":{"timer":{"limit":{"type":"number","default":-1,"display":"Time Limit (ms)"}}}},"examples":[{"title":"What percentage of the market belongs to the product?","pie":{"min":0,"max":100,"labels":4,"prefix":"","suffix":"%","increment":1},"answer":{"value":26,"takeaway":"The product holds 26% market share","text":"With so much market share held by this product, it's obviously the only choice for consumers in the know.\n"}}]}
});

;require.register("engine/pie-chart/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (config, continueBtnText, game, hasNarration, hasPrompt, i18n, prompt, title) {
if ( game && game.timer && game.timer.limit > 0)
{
buf.push("<div class=\"full-screen\"><div class=\"game-stepper text-lg text-bold\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div></div>");
}
buf.push("<div class=\"content-fill\"><div class=\"content-fit block-v-xl content-lg-fill content-sm-ver content-md-ver\"><div class=\"row content-lg-fill\"><div class=\"col-lg-6 col-sm-12 content-lg-ver block-v-md\"><h1 class=\"text-lg-right text-md-center text-sm-center fade-in\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1></div><div class=\"col-lg-6 col-sm-12 content-lg-ver text-center block-v-md\">");
if ( config.direction === "rtl")
{
var circle = "M5,0 a-5,-5 0 0,0 0,10 a-5,-5 0 0,0 0,-10 z";
}
else
{
var circle = "M5,0 a5,5 0 0,1 0,10 a5,5 0 0,1 0,-10 z";
}
buf.push("<div class=\"pie scale-up\"><svg viewbox=\"0,0,10,10\" class=\"pie-ring-svg\"><path" + (jade.attr("d", circle, true, false)) + " class=\"pie-ring\"></path><path" + (jade.attr("d", circle, true, false)) + " class=\"pie-ring pie-ring-input\"></path><path" + (jade.attr("d", circle, true, false)) + " class=\"pie-ring pie-ring-answer\"></path></svg><div class=\"pie-ring-value text-xxl text-bold content-ver\"><div class=\"text-sm\"><div class=\"text-sm\">" + (jade.escape((jade_interp = i18n("pie-chart.touch-to-begin")) == null ? '' : jade_interp)) + "</div></div></div></div></div></div></div></div><div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"game" in locals_for_with?locals_for_with.game:typeof game!=="undefined"?game:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/pie-chart/view.coffee", function(exports, require, module) {
var Draggy, GameView, PieChartView, Prefix, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

GameView = require("views/base/game");

Prefix = require("lib/prefix");

Draggy = require("views/components/draggy");

PieChartView = (function(_super) {
  __extends(PieChartView, _super);

  function PieChartView() {
    _ref = PieChartView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  PieChartView.prototype.template = require("./template");

  PieChartView.prototype.events = {
    "iostap .btn-done": "submit"
  };

  PieChartView.prototype.show = function() {
    PieChartView.__super__.show.apply(this, arguments);
    this.setEl(this.findOne(".pie"), "pie");
    this.setEl(this.findOne(".pie-ring-input"), "knob-input");
    this.setEl(this.findOne(".pie-ring-value"), "knob-value");
    this.setEl(this.findOne(".pie-ring-answer"), "knob-answer");
    this.resetDashOffset(this.getEl("knob-input"));
    this.resetDashOffset(this.getEl("knob-answer"));
    this.createDraggy();
    return this.enterGame();
  };

  PieChartView.prototype.createDraggy = function() {
    this.draggy = new Draggy({
      el: this.getEl("pie"),
      radius: this.getEl("pie").offsetWidth / 2,
      isParent: true
    });
    this.listenTo(this.draggy, "drag", this.onDrag);
    return this.listenTo(this.draggy, "drop", this.onDrop);
  };

  PieChartView.prototype.onDrag = function(draggy, isInitialDrag) {
    this.currentValue = this.roundValue(draggy);
    this.labelEl(this.getEl("knob-value"), this.currentValue);
    this.transition(this.getEl("knob-input"), isInitialDrag ? "all 300ms" : "none");
    return this.offsetStrokeDash(this.getEl("knob-input"), draggy.t);
  };

  PieChartView.prototype.onDrop = function(draggy, isReset) {
    if (!isReset) {
      return draggy.reset({
        t: this.roundPos(draggy)
      });
    } else {
      this.transition(this.getEl("knob-input"), "all 300ms");
      this.offsetStrokeDash(this.getEl("knob-input"), draggy.t);
      if (this.currentValue != null) {
        return this.setState("touched");
      }
    }
  };

  PieChartView.prototype.resetDashOffset = function(path) {
    var c;
    c = 10 * Math.PI;
    path.style.strokeDashoffset = c;
    path.style.strokeDasharray = [c, c].join(" ");
    return this.circumference = c;
  };

  PieChartView.prototype.offsetStrokeDash = function(path, t) {
    var offset, percent;
    if (this.options.config().direction === "rtl") {
      t = Math.PI * 2 - t;
    }
    percent = -(t - Math.PI * 2) / (Math.PI * 2);
    offset = this.circumference * percent;
    return path.style.strokeDashoffset = "" + offset + "px";
  };

  PieChartView.prototype.roundValue = function(draggy) {
    var increment, max, min, value, _ref1;
    _ref1 = this.options.data.pie, min = _ref1.min, max = _ref1.max, increment = _ref1.increment;
    value = Big(max - min).mul(this.roundPercent(draggy)).div(increment).round().mul(increment).plus(min);
    if (this.options.config().direction === "rtl") {
      return Big(max - value);
    } else {
      return value;
    }
  };

  PieChartView.prototype.roundPos = function(draggy) {
    return (Math.PI * 2) * this.roundPercent(draggy);
  };

  PieChartView.prototype.roundPercent = function(draggy) {
    var increment, max, min, percent, steps, _ref1;
    _ref1 = this.options.data.pie, increment = _ref1.increment, min = _ref1.min, max = _ref1.max;
    max = Big(max).sub(min).div(increment).round().mul(increment).plus(min);
    percent = _.limit(draggy.t / (Math.PI * 2), 0, 1);
    steps = Big(max).sub(min).div(increment).valueOf();
    return Big(steps).mul(percent).round().div(steps);
  };

  PieChartView.prototype.labelEl = function(el, value) {
    var prefix, suffix, _ref1;
    _ref1 = this.options.data.pie, prefix = _ref1.prefix, suffix = _ref1.suffix;
    return el.innerHTML = "" + prefix + value + suffix;
  };

  PieChartView.prototype.showAnswer = function() {
    this.offsetStrokeDash(this.getEl("knob-answer"), this.draggy.t);
    return this.animateAnswerKnob(this.getEl("knob-answer"));
  };

  PieChartView.prototype.isCorrect = function() {
    var _ref1;
    return (this.currentValue != null) && ((_ref1 = this.currentValue) != null ? _ref1.eq(this.options.data.answer.value) : void 0);
  };

  PieChartView.prototype.animateAnswerKnob = function(el) {
    var answer, increment, max, min, percent, pie, _ref1;
    _ref1 = this.options.data, answer = _ref1.answer, pie = _ref1.pie;
    increment = pie.increment, min = pie.min, max = pie.max;
    max = Big(max).sub(min).div(increment).round().mul(increment).plus(min);
    percent = (answer.value - min) / (max - min);
    if (this.options.config().direction === "rtl") {
      percent = 1 - percent;
    }
    el.offsetWidth;
    this.transition(el, "all 600ms");
    return this.offsetStrokeDash(el, percent * Math.PI * 2);
  };

  PieChartView.prototype.endGame = function() {
    PieChartView.__super__.endGame.apply(this, arguments);
    return this.submit();
  };

  PieChartView.prototype.answerDetails = function() {
    var answer, correct, details, question, questions, value, _ref1;
    questions = ((_ref1 = this.options.metadata) != null ? _ref1.questions : void 0) || [];
    if (!(questions.length > 0)) {
      return [];
    }
    question = questions[0];
    correct = this.isCorrect();
    value = parseInt(this.currentValue);
    answer = _.find(question.answers, function(a) {
      return a.correct === correct;
    });
    details = {
      question: question.question,
      answer: answer
    };
    details.answer.content = value;
    return [details];
  };

  return PieChartView;

})(GameView);

module.exports = PieChartView;
});

;require.register("engine/question-pool/model.yaml", function(exports, require, module) {
module.exports = {"title":"question-pool","display":"Question Pool","category":"Advanced","description":"Ask questions from a pool of questions","model":{"content":{"type":"slides","display":"Question Slides","help":"Add the slides that will be shown in this question pool.","allows":["Multiple Choice","Numbers","Concepts","Relationships","import-slides"]},"nbQuestionsToAsk":{"type":"number","default":1,"display":"Number of questions to present"},"scoringMethod":{"type":"select","display":"Scoring Method","default":"Slide","enum":["Slide","Answer","Slide Negative Marking","Answer Negative Marking","Answer Negative Marking II"]}},"examples":[{"content":[{"type":"number-picker","data":{"answer":{"takeaway":"The product costs $99.00","value":99,"incorrect":"Not quite...","correct":"That's correct!","text":""},"number":{"suffix":",","prefix":"$","initial":99,"min":12,"max":147,"digits":3},"title":"At a cost of $99, our product is the cheapest","game":{"timer":{"limit":-1}},"prompt":"Select the correct number"},"id":"148ff35b-5d0e-0144-d2d7-43f4dc74ff3f","name":0,"displayIndex":1},{"type":"slider","data":{"answer":{"value":98,"text":"A huge amount of responses were contributed to the survey.","takeaway":"","incorrect":"Not quite...","correct":"That's correct!"},"slider":{"labels":4,"suffix":"%","max":100,"min":85,"decimals":0,"increment":1,"prefix":""},"title":"What percent of customers responded in the survey?","game":{"timer":{"limit":-1}},"prompt":"Slide to the correct value"},"id":"ea2caa04-b708-1100-1ab6-3f0bd82e3270","name":1,"displayIndex":2},{"type":"dial","data":{"answer":{"text":"We're a true market leader with 10 states.","takeaway":"There are 10 states with over 10% market share","value":10,"incorrect":"Not quite...","correct":"That's correct!"},"dial":{"suffix":"","prefix":"","labels":4,"max":20,"min":0,"decimals":0,"increment":1},"title":"How many states have over 10% market share?","game":{"timer":{"limit":-1}},"prompt":"Drag to set the correct value"},"id":"9167bc66-87bd-0c0c-c4bb-2f0696c8085d","name":2,"displayIndex":3}]}]}
});

;require.register("engine/question-pool/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (continueBtnText, hasNarration, hasPrompt, i18n, prompt, title) {
buf.push("<div class=\"content content-scroll block-h-xl pull-left\"><div class=\"block-v-xl\"><h1 class=\"slide-up\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1></div></div><div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/question-pool/view.coffee", function(exports, require, module) {
var QuestionPoolView, SlideView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SlideView = require("views/slide");

QuestionPoolView = (function(_super) {
  __extends(QuestionPoolView, _super);

  function QuestionPoolView() {
    _ref = QuestionPoolView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  QuestionPoolView.prototype.template = require("./template");

  QuestionPoolView.prototype.events = {
    "iostap .btn-done": "submit"
  };

  return QuestionPoolView;

})(SlideView);

module.exports = QuestionPoolView;
});

;require.register("engine/ratio/model.yaml", function(exports, require, module) {
module.exports = {"title":"ratio","display":"Ratio","category":"Numbers","features":{"stars":true},"model":{"title":{"type":"html","default":"Choose the correct ratios"},"ratio":{"bars":{"min":1,"max":4,"type":[{"title":{"type":"html"},"value":{"type":"number"}}]},"total":{"type":"number","default":100,"display":"Total Value of All Bars"},"prefix":{"type":"html","default":""},"suffix":{"type":"html","default":"%"},"increment":{"type":"number","default":1},"independent":{"type":"boolean","default":false,"display":"Allow bars to move freely and total any number"}},"answer":{"text":{"type":"html","default":"","display":"Answer Text"},"correct":{"type":"html","default":"That's correct!","display":"Correct Reinforcement"},"incorrect":{"type":"html","default":"Not quite...","display":"Incorrect Reinforcement"},"takeaway":{"type":"html","default":"","display":"Core Message"}},"prompt":{"type":"html","default":"Drag to set the correct value"},"game":{"timer":{"limit":{"type":"number","default":-1,"display":"Time Limit (ms)"}}}},"examples":[{"title":"What is the price of each product?","ratio":{"increment":1,"prefix":"$5.","suffix":"0","total":9,"independent":true,"bars":[{"title":"Product X","value":7},{"title":"Product Y","value":2},{"title":"Product Z","value":5}]},"answer":{"text":"Ratio can be used to ask the same number question for several different items at once.\n"}},{"title":"What are the reported satisfaction levels for users of Product Z?","ratio":{"independent":true,"increment":20,"bars":[{"title":"Satisfaction levels","value":80}]},"answer":{"text":"Ratio can be used to ask a basic number question."}},{"title":"When making Product Y, what ratio of milk to water should you use?","ratio":{"suffix":"ml","total":30,"increment":10,"bars":[{"title":"Milk","value":20},{"title":"Water","value":10}]},"answer":{"text":"You can use Ratio to ask questions about the ratio of one value in relation to another.\n"}}]}
});

;require.register("engine/ratio/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (continueBtnText, game, hasNarration, hasPrompt, i18n, prompt, ratio, title, undefined) {
if ( game && game.timer && game.timer.limit > 0)
{
buf.push("<div class=\"full-screen\"><div class=\"game-stepper text-lg text-bold\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div></div>");
}
buf.push("<div class=\"content-fill\"><div class=\"content-fit block-v-xl content-lg-fill content-md-ver content-sm-ver\"><div class=\"row content-md-fill\"><div class=\"col-lg-6 col-sm-12 content-lg-ver block-v-sm\"><h1 class=\"text-lg-right text-md-center text-sm-center fade-in\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1></div><div class=\"col-lg-6 col-sm-12 content-lg-ver\">");
// iterate ratio.bars
;(function(){
  var $$obj = ratio.bars;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var bar = $$obj[i];

buf.push("<div" + (jade.cls(['text-lg','block-v-sm','slide-up',"delay-" + (i + 1) + ""], [null,null,null,true])) + "><div class=\"ratio-title pull-left block-v-sm\">" + (null == (jade_interp = bar.title) ? "" : jade_interp) + "</div><div" + (jade.attr("data-answer-id", i, true, false)) + " class=\"ratio\"><div class=\"ratio-bar-container block-dk\"><div class=\"ratio-bar\"></div></div><div class=\"ratio-value\"><div class=\"ratio-value-amount pull-right\">&hellip;</div></div></div></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var bar = $$obj[i];

buf.push("<div" + (jade.cls(['text-lg','block-v-sm','slide-up',"delay-" + (i + 1) + ""], [null,null,null,true])) + "><div class=\"ratio-title pull-left block-v-sm\">" + (null == (jade_interp = bar.title) ? "" : jade_interp) + "</div><div" + (jade.attr("data-answer-id", i, true, false)) + " class=\"ratio\"><div class=\"ratio-bar-container block-dk\"><div class=\"ratio-bar\"></div></div><div class=\"ratio-value\"><div class=\"ratio-value-amount pull-right\">&hellip;</div></div></div></div>");
    }

  }
}).call(this);

buf.push("</div></div></div></div><div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"game" in locals_for_with?locals_for_with.game:typeof game!=="undefined"?game:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"ratio" in locals_for_with?locals_for_with.ratio:typeof ratio!=="undefined"?ratio:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/ratio/view.coffee", function(exports, require, module) {
var Draggy, GameView, RatioView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

GameView = require("views/base/game");

Draggy = require("views/components/draggy");

RatioView = (function(_super) {
  __extends(RatioView, _super);

  function RatioView() {
    _ref = RatioView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  RatioView.prototype.template = require("./template");

  RatioView.prototype.events = {
    "iostap .btn-done": "endGame"
  };

  RatioView.prototype.show = function() {
    RatioView.__super__.show.apply(this, arguments);
    this.listenTo(this, "resize", this.onResize);
    this.setEl(this.findAll(".ratio"), "bars");
    this.createDraggies();
    return this.enterGame();
  };

  RatioView.prototype.onResize = function() {
    var _ref1,
      _this = this;
    if (!(((_ref1 = this.draggies) != null ? _ref1.length : void 0) > 0)) {
      return;
    }
    window.clearTimeout(this.timeout);
    return this.timeout = window.setTimeout((function() {
      var draggy, i, initialX, totalWidth, _i, _len, _ref2, _results;
      if (_this.currentState.state === "prompt") {
        totalWidth = _this.getEl("bars").item(0).offsetWidth;
        initialX = _this.options.data.ratio.independent ? totalWidth / 2 : totalWidth / _this.getEl("bars").length;
      }
      _ref2 = _this.draggies;
      _results = [];
      for (i = _i = 0, _len = _ref2.length; _i < _len; i = ++_i) {
        draggy = _ref2[i];
        draggy.getOffset();
        draggy.options.maxX = draggy.offset.totalWidth;
        if (initialX) {
          _results.push(draggy.reset({
            x: initialX
          }));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    }), 600);
  };

  RatioView.prototype.serialize = function() {
    var answers, data, increment, total, _ref1;
    data = RatioView.__super__.serialize.apply(this, arguments);
    _ref1 = data.ratio, total = _ref1.total, increment = _ref1.increment;
    data.ratio.total = parseFloat(total, 10) || 100;
    data.ratio.increment = parseFloat(increment, 10) || 1;
    data.ratio.bars = _.filter(data.ratio.bars, function(b) {
      return b.title && b.value;
    });
    if (data.ratio.bars.length === 1) {
      data.ratio.independent = true;
    }
    answers = data.metadata.questions.map(function(q) {
      return q.answers.map(function(a) {
        return {
          content: a.content,
          correct: a.correct,
          id: a.id
        };
      });
    });
    data.answers = answers;
    return data;
  };

  RatioView.prototype.createDraggies = function() {
    var draggy, el, initialX, totalWidth;
    totalWidth = this.getEl("bars").item(0).offsetWidth || this.serialize().width;
    initialX = this.options.data.ratio.independent ? totalWidth / 2 : totalWidth / this.getEl("bars").length;
    this.draggies = (function() {
      var _i, _len, _ref1, _results;
      _ref1 = this.getEl("bars");
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        el = _ref1[_i];
        draggy = new Draggy({
          el: el,
          minX: 0,
          maxX: totalWidth,
          isParent: true,
          barElement: el.querySelector(".ratio-bar"),
          valElement: el.querySelector(".ratio-value-amount")
        });
        this.listenTo(draggy, "drag", this.onDrag);
        this.listenTo(draggy, "drop", this.onDrop);
        draggy.reset({
          x: initialX,
          y: 0
        });
        _results.push(draggy);
      }
      return _results;
    }).call(this);
    return this.snapBars();
  };

  RatioView.prototype.onDrag = function(draggy, isInitial) {
    this.currentDraggy = draggy;
    this.setState("touched");
    this.renderDraggy(draggy, isInitial);
    if (!this.options.data.ratio.independent) {
      return this.updateDraggies(draggy, isInitial);
    }
  };

  RatioView.prototype.onDrop = function(draggy, isReset) {
    if (isReset) {
      return this.renderDraggy(draggy, true);
    } else {
      return this.snapBars();
    }
  };

  RatioView.prototype.getPercent = function(draggy) {
    var percent;
    if (draggy == null) {
      draggy = this.draggies[0];
    }
    percent = Math.max(Math.min((draggy.x / draggy.offset.width) || 0, 1), 0.0001);
    if (this.options.config().direction === "rtl") {
      percent = 1 - percent;
    }
    return percent;
  };

  RatioView.prototype.getLabel = function(draggy) {
    var prefix, suffix, _ref1;
    _ref1 = this.options.data.ratio, prefix = _ref1.prefix, suffix = _ref1.suffix;
    return "" + prefix + (this.getValue(draggy)) + suffix;
  };

  RatioView.prototype.getValue = function(draggy) {
    var increment, percent, total, _ref1;
    _ref1 = this.options.data.ratio, total = _ref1.total, increment = _ref1.increment;
    percent = this.getPercent(draggy);
    return Math.round(total * percent / increment) * increment;
  };

  RatioView.prototype.renderDraggy = function(draggy, transition) {
    this.transform(draggy.options.barElement, {
      scale: "" + (this.getPercent(draggy)) + ", 1",
      transition: transition ? "all 300ms" : ""
    });
    return draggy.options.valElement.innerHTML = this.getLabel(draggy);
  };

  RatioView.prototype.updateDraggies = function(draggy, transition) {
    var current, currentTotal, i, otherDraggies, otherDraggy, percent, remainder, x, _i, _len, _results,
      _this = this;
    remainder = 1 - this.getPercent(draggy);
    otherDraggies = _.filter(this.draggies, function(d) {
      return d !== draggy;
    });
    currentTotal = _.reduce(otherDraggies, (function(m, d) {
      return m + _this.getPercent(d);
    }), 0);
    _results = [];
    for (i = _i = 0, _len = otherDraggies.length; _i < _len; i = ++_i) {
      otherDraggy = otherDraggies[i];
      current = this.getPercent(otherDraggy);
      percent = current / currentTotal * remainder;
      if (this.options.config().direction === "rtl") {
        percent = 1 - percent;
      }
      x = percent * otherDraggy.offset.width;
      otherDraggy.reset({
        x: x
      }, {
        silent: true
      });
      _results.push(this.renderDraggy(otherDraggy, transition));
    }
    return _results;
  };

  RatioView.prototype.snapBars = function() {
    var draggy, i, percent, subtotal, total, value, x, _i, _len, _ref1, _results;
    subtotal = 0;
    total = this.options.data.ratio.total;
    _ref1 = this.draggies;
    _results = [];
    for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
      draggy = _ref1[i];
      value = this.getValue(draggy);
      subtotal += value;
      if (i === this.draggies.length - 1 && !this.options.data.ratio.independent) {
        value -= subtotal - total;
      }
      percent = value / total;
      if (this.options.config().direction === "rtl") {
        percent = 1 - percent;
      }
      x = Math.floor(percent * draggy.offset.width);
      _results.push(draggy.reset({
        x: x
      }));
    }
    return _results;
  };

  RatioView.prototype.isCorrect = function() {
    var _this = this;
    return _.chain(this.options.data.ratio.bars).filter(function(b, i) {
      return b.value !== _this.getValue(_this.draggies[i]);
    }).isEmpty().value();
  };

  RatioView.prototype.showAnswer = function() {
    var bars, draggy, i, isCorrect, percent, total, value, _i, _len, _ref1, _results;
    _ref1 = this.options.data.ratio, bars = _ref1.bars, total = _ref1.total;
    _results = [];
    for (i = _i = 0, _len = bars.length; _i < _len; i = ++_i) {
      value = bars[i].value;
      draggy = this.draggies[i];
      isCorrect = this.getValue(draggy) === value;
      percent = value / total;
      if (this.options.config().direction === "rtl") {
        percent = 1 - percent;
      }
      draggy.el.parentNode.classList.toggle("correct", isCorrect);
      draggy.el.parentNode.classList.toggle("incorrect", !isCorrect);
      _results.push(draggy.reset({
        x: draggy.offset.width * percent
      }));
    }
    return _results;
  };

  RatioView.prototype.answerDetails = function() {
    var answer, correct, correctAnswer, details, q, questionDetails, questions, selectedDraggy, selectedRatioElement, value, _i, _len, _ref1;
    questions = ((_ref1 = this.options.metadata) != null ? _ref1.questions : void 0) || [];
    if (!(questions.length > 0)) {
      return [];
    }
    details = [];
    for (_i = 0, _len = questions.length; _i < _len; _i++) {
      q = questions[_i];
      selectedRatioElement = _.find(this.$(".ratio"), function(r) {
        return this.$(r).data("answer-id") === questions.indexOf(q);
      });
      selectedDraggy = _.find(this.draggies, function(d) {
        return d.el === selectedRatioElement;
      });
      value = this.getValue(selectedDraggy);
      correctAnswer = _.find(q.answers, function(a) {
        return a.correct;
      });
      correct = correctAnswer.content === value;
      answer = _.find(q.answers, function(a) {
        return a.correct === correct;
      });
      questionDetails = {
        question: q.question,
        answer: answer
      };
      questionDetails.answer.content = value;
      details.push(questionDetails);
    }
    return details;
  };

  RatioView.prototype.endGame = function() {
    RatioView.__super__.endGame.apply(this, arguments);
    return this.submit();
  };

  return RatioView;

})(GameView);

module.exports = RatioView;
});

;require.register("engine/reorder/model.yaml", function(exports, require, module) {
module.exports = {"title":"reorder","display":"Reorder","category":"Relationships","features":{"stars":true},"model":{"title":{"default":"Rank these items","types":["text","image","video","audio"]},"list":{"display":"List items","type":[{"type":"html"}],"min":2,"max":6},"answer":{"text":{"type":"html","default":"","display":"Answer Text"},"correct":{"type":"html","default":"That's correct!","display":"Correct Reinforcement"},"incorrect":{"type":"html","default":"Not quite...","display":"Incorrect Reinforcement"},"takeaway":{"type":"html","default":"","display":"Core Message"}},"prompt":{"type":"html","default":"Put the items in the correct order"},"game":{"timer":{"limit":{"type":"number","default":-1,"display":"Time Limit (ms)"}}}},"examples":[{"title":"Rank these cities by population","titleType":"text","list":["Tokyo","New York","Sydney","Paris"],"answer":{"text":"Tokyo has almost nine million inhabitants in the city alone, and 13 million in the Greater Tokyo region. In fact, the number of residents in the Japanese capital is greater then the combined population of the next three largest cities Yokohama, Osaka and Nagoya.\n"}},{"title":"Order these brands by market share","titleType":"text","list":["Nike","Adidas","Reebok"],"answer":{"text":"According to several sources, Nike has more than 30% market share.\n"}}]}
});

;require.register("engine/reorder/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (config, continueBtnText, game, hasNarration, hasPrompt, i18n, isLong, list, prompt, shuffledList, undefined) {
jade_mixins["multi-content"] = jade_interp = function(prop, obj){
var block = (this && this.block), attributes = (this && this.attributes) || {};
obj = obj || locals;
switch (obj[prop + "Type"]){
case "image":
buf.push("<div" + (jade.attr("data-content", obj.image, true, false)) + " class=\"multi-content-wrapper multi-content-wrapper-image block-md block-lt\"><div class=\"block-sm multi-content-media\"><img" + (jade.attr("src", obj[prop], true, false)) + " class=\"multi-content multi-content-image\"/></div></div>");
  break;
case "video":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-video block-md block-lt\"><div class=\"block-sm multi-content-media\"><video" + (jade.attr("src", obj[prop], true, false)) + " webkit-playsinline=\"webkit-playsinline\" playsinline=\"playsinline\" preload=\"auto\" controls=\"controls\"" + (jade.attr("dir", config.direction, true, false)) + " class=\"video-js multi-content multi-content-video block-dk\"></video></div></div>");
  break;
case "audio":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-audio block-md block-lt\"><div class=\"block-sm multi-content-media\"><audio" + (jade.attr("src", obj[prop], true, false)) + " webkit-playsinline=\"webkit-playsinline\" playsinline=\"playsinline\" preload=\"auto\" controls=\"controls\"" + (jade.attr("dir", config.direction, true, false)) + " class=\"multi-content multi-content-audio block-dk\"></audio></div></div>");
  break;
case "iframe":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-iframe block-md block-lt\"><div class=\"block-sm multi-content-iframe\">");
var iframe = obj[prop].match(/<iframe[^<]*<\/iframe>/)
if ( iframe)
{
buf.push(null == (jade_interp = iframe[0].replace(/ (width|height)=["'\d\w]+/g, "")) ? "" : jade_interp);
}
buf.push("</div></div>");
  break;
default:
buf.push("<span class=\"multi-content multi-content-text\">" + (null == (jade_interp = obj[prop]) ? "" : jade_interp) + "</span>");
  break;
}
};
if ( game && game.timer && game.timer.limit > 0)
{
buf.push("<div class=\"full-screen\"><div class=\"game-stepper text-lg text-bold\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div></div>");
}
buf.push("<div class=\"content-fill\"><div class=\"content-fit content-fill block-v-lg\"><div class=\"row content-lg-fill content-sm-ver content-md-ver\"><div class=\"col-lg-6 col-sm-12 content-lg-ver block-v-md\"><h1 class=\"text-lg-right text-md-center text-sm-center fade-in\">");
jade_mixins["multi-content"]("title");
buf.push("</h1></div><div class=\"col-lg-6 col-sm-12 text-center content-lg-ver block-v-md\"><div class=\"draggy-container fade-in block-md block-dk\"><div class=\"draggies\">");
// iterate shuffledList
;(function(){
  var $$obj = shuffledList;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var item = $$obj[$index];

buf.push("<div" + (jade.attr("data-index", list.indexOf(item), true, false)) + (jade.attr("data-content", item, true, false)) + " class=\"draggy block-sm\"><div" + (jade.cls(['btn','btn-solid','btn-block',((isLong ? "btn-long" : "") +
                         (list.length > 4 ? " btn-sm" : ""))], [null,null,null,true])) + ">" + (null == (jade_interp = item) ? "" : jade_interp) + "</div></div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var item = $$obj[$index];

buf.push("<div" + (jade.attr("data-index", list.indexOf(item), true, false)) + (jade.attr("data-content", item, true, false)) + " class=\"draggy block-sm\"><div" + (jade.cls(['btn','btn-solid','btn-block',((isLong ? "btn-long" : "") +
                         (list.length > 4 ? " btn-sm" : ""))], [null,null,null,true])) + ">" + (null == (jade_interp = item) ? "" : jade_interp) + "</div></div>");
    }

  }
}).call(this);

buf.push("</div></div></div></div></div></div><div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"game" in locals_for_with?locals_for_with.game:typeof game!=="undefined"?game:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"isLong" in locals_for_with?locals_for_with.isLong:typeof isLong!=="undefined"?isLong:undefined,"list" in locals_for_with?locals_for_with.list:typeof list!=="undefined"?list:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"shuffledList" in locals_for_with?locals_for_with.shuffledList:typeof shuffledList!=="undefined"?shuffledList:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/reorder/view.coffee", function(exports, require, module) {
var Draggy, GameView, Prefix, ReorderView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

GameView = require("views/base/game");

Prefix = require("lib/prefix");

Draggy = require("views/components/draggy");

ReorderView = (function(_super) {
  __extends(ReorderView, _super);

  function ReorderView() {
    _ref = ReorderView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  ReorderView.prototype.template = require("./template");

  ReorderView.prototype.events = {
    "iostap .btn-done": "endGame"
  };

  ReorderView.prototype.serialize = function() {
    var data, longest;
    data = ReorderView.__super__.serialize.apply(this, arguments);
    longest = _.chain(data.list).sortBy("length").last().value();
    data.isLong = (longest != null ? longest.length : void 0) > Math.min(data.width / 16, 30);
    data.shuffledList = _.shuffle(data.list || []);
    return data;
  };

  ReorderView.prototype.show = function() {
    var draggies, draggy, el, i, _i, _len, _ref1;
    ReorderView.__super__.show.apply(this, arguments);
    this.listenTo(this, "resize", this.onResize);
    if (this.draggies) {
      _ref1 = this.draggies;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        draggy = _ref1[_i];
        draggy.undelegateEvents();
      }
      this.draggies = null;
    }
    draggies = this.findAll(".draggy");
    this.setEl(this.findOne(".draggy-container"), "container");
    this.draggies = (function() {
      var _j, _len1, _results;
      _results = [];
      for (i = _j = 0, _len1 = draggies.length; _j < _len1; i = ++_j) {
        el = draggies[i];
        el.style.position = "absolute";
        draggy = new Draggy({
          el: el,
          lock: "x",
          minY: 0
        });
        this.listenTo(draggy, "drag", this.onDrag);
        this.listenTo(draggy, "drop", this.onDrop);
        _results.push(draggy);
      }
      return _results;
    }).call(this);
    this.resetDraggies(this.draggies);
    this.onResize();
    return this.enterGame();
  };

  ReorderView.prototype.hide = function() {
    this.el.classList.remove("ready");
    return ReorderView.__super__.hide.apply(this, arguments);
  };

  ReorderView.prototype.onDrag = function(draggy, isInitialDrag) {
    var isActive, rank;
    isActive = false;
    rank = this.getRanking(draggy);
    this.resetDraggies(this.draggiesInOrder(this.draggies), draggy);
    return this.transform(draggy.el, {
      y: draggy.y,
      scale: 1.05,
      transition: isInitialDrag ? "all 300ms" : "none"
    });
  };

  ReorderView.prototype.onDrop = function(draggy, isReset) {
    var height, left, rank, top, width, _ref1;
    _ref1 = draggy.offset, left = _ref1.left, top = _ref1.top, width = _ref1.width, height = _ref1.height;
    rank = this.getRanking(draggy);
    if (isReset) {
      return this.transform(draggy.el, {
        y: draggy.y,
        transition: "all 300ms"
      });
    } else {
      this.resetDraggies(this.draggiesInOrder(this.draggies));
      return this.setState("touched");
    }
  };

  ReorderView.prototype.draggiesInOrder = function(draggies) {
    var height, _ref1;
    if (draggies && (height = (_ref1 = draggies[0]) != null ? _ref1.el.parentNode.offsetHeight : void 0)) {
      return _.clone(draggies).sort(function(a, b) {
        return (a.y + a.y / height * a.offset.height) - (b.y + b.y / height * b.offset.height);
      });
    }
  };

  ReorderView.prototype.getRanking = function(draggy) {
    var len, num;
    len = this.options.data.list.length;
    num = Math.floor(draggy.y / draggy.options.maxY * len);
    return _.limit(num, 0, len - 1);
  };

  ReorderView.prototype.getDraggyFromIndex = function(index) {
    var draggy;
    return ((function() {
      var _i, _len, _ref1, _results;
      _ref1 = this.draggies;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        draggy = _ref1[_i];
        if (draggy.el.dataset.index === index) {
          _results.push(draggy);
        }
      }
      return _results;
    }).call(this))[0];
  };

  ReorderView.prototype.getElements = function(selector) {
    var el, _i, _len, _ref1, _results;
    _ref1 = this.findAll(selector);
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      el = _ref1[_i];
      _results.push({
        el: el,
        bounds: el.getBoundingClientRect()
      });
    }
    return _results;
  };

  ReorderView.prototype.resetDraggy = function(draggy) {
    draggy.reset();
    return draggy.el.classList.remove("is-positioned");
  };

  ReorderView.prototype.resetDraggies = function(draggies, draggy) {
    var i, other, y, _i, _len, _ref1, _results;
    y = 0;
    _ref1 = draggies || [];
    _results = [];
    for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
      other = _ref1[i];
      if (other !== draggy) {
        other.reset({
          y: y
        });
      }
      _results.push(y += other.offset.height);
    }
    return _results;
  };

  ReorderView.prototype.isCorrect = function() {
    return _.chain(this.draggiesInOrder(this.draggies)).filter(function(d, i) {
      return +d.el.dataset.index === i;
    }).each(function(d) {
      return d.el.classList.add("correct");
    }).size().value() === this.options.data.list.length;
  };

  ReorderView.prototype.showAnswer = function() {
    return this.resetDraggies(_.sortBy(this.draggies, function(d) {
      return +d.el.dataset.index;
    }));
  };

  ReorderView.prototype.onResize = function() {
    var fontSize, height, reducer, _ref1,
      _this = this;
    if (!(((_ref1 = this.draggies) != null ? _ref1.length : void 0) > 0)) {
      return;
    }
    reducer = function(m, _arg) {
      var el;
      el = _arg.el;
      return m + el.offsetHeight;
    };
    height = _.reduce(this.draggies, reducer, 0);
    fontSize = parseInt(window.getComputedStyle(this.el).fontSize);
    this.getEl("container").firstChild.style.height = "" + (height / fontSize) + "em";
    return this.fitText(function() {
      var draggy, i, _i, _len, _ref2;
      height = _.reduce(_this.draggies, reducer, 0);
      _this.getEl("container").firstChild.style.height = "" + height + "px";
      _ref2 = _this.draggies;
      for (i = _i = 0, _len = _ref2.length; _i < _len; i = ++_i) {
        draggy = _ref2[i];
        draggy.options.maxY = height - draggy.el.offsetHeight;
        draggy.getOffset();
      }
      _this.resetDraggies(_this.draggiesInOrder(_this.draggies));
      return _this.el.classList.add("ready");
    });
  };

  ReorderView.prototype.answerDetails = function() {
    var answer, answerContent, details, isCorrect, question, questions, _ref1;
    questions = ((_ref1 = this.options.metadata) != null ? _ref1.questions : void 0) || [];
    if (!(questions.length > 0)) {
      return [];
    }
    question = questions[0];
    isCorrect = this.isCorrect();
    answer = _.find(question.answers, function(a) {
      return a.correct === isCorrect;
    });
    answerContent = _.map(this.draggiesInOrder(this.draggies), function(d) {
      return d.$el.data("content");
    });
    answer.content = answerContent.join(", ");
    details = {
      question: questions[0].question,
      answer: answer
    };
    return [details];
  };

  ReorderView.prototype.endGame = function() {
    ReorderView.__super__.endGame.apply(this, arguments);
    return this.submit();
  };

  return ReorderView;

})(GameView);

module.exports = ReorderView;
});

;require.register("engine/reveal/model.yaml", function(exports, require, module) {
module.exports = {"title":"reveal","display":"Reveal","category":"Content","description":"Flip cards to reveal more details","features":{"narration":true},"model":{"title":{"type":"html","default":"Explore our range"},"content":{"min":1,"max":4,"type":[{"title":{"type":"html"},"description":{"type":"html"}}]},"focus":{"type":"boolean","default":false,"help":"Only reveal one piece of content at a time.\n"},"prompt":{"type":"html","default":"Select each item to find out more"}},"examples":[{"title":"Learn more about our product range","focus":true,"content":[{"title":"Product X","description":"This is the original product in our line and is a great source of pride for the company.\n"},{"title":"Product Y","description":"Product Y was introduced to appeal to a broader customers base and was a great success.\n"},{"title":"Product Z","description":"Completing our range is Product Z. It appeals to old and new customers alike, making us a company for everyone.\n"}]}]}
});

;require.register("engine/reveal/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (Math, content, continueBtnText, hasNarration, hasPrompt, i18n, prompt, title, undefined, written) {
buf.push("<div class=\"content-md-fill content-sm-ver\"><div class=\"content-md-ver text-center\"><h1 class=\"fade-in delay-3\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"content-pieces row text-center\">");
// iterate content
;(function(){
  var $$obj = content;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var piece = $$obj[i];

var col = Math.floor(12 / content.length);
if ( content.length === 1)
{
var klass = "col-md-8 col-md-offset-2";
}
else
{
var klass = "col-md-" + col * 2 + " col-lg-" + col
}
klass += " delay-" + (i + 3);
buf.push("<div" + (jade.cls(['content-piece','slide-up','col-sm-12','block-v-sm',klass], [null,null,null,null,true])) + "><div" + (jade.attr("data-index", i, true, false)) + " class=\"btn-reveal\"><div class=\"btn-reveal-title btn btn-solid\"><h2 class=\"tight content-ver break-word\">" + (null == (jade_interp = written.hyphenate(piece.title)) ? "" : jade_interp) + "</h2></div><div class=\"btn-reveal-desc block-v-md block-h-lg btn btn-solid\"><div class=\"content-ver\">" + (null == (jade_interp = piece.description || "&nbsp;") ? "" : jade_interp) + "</div></div></div></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var piece = $$obj[i];

var col = Math.floor(12 / content.length);
if ( content.length === 1)
{
var klass = "col-md-8 col-md-offset-2";
}
else
{
var klass = "col-md-" + col * 2 + " col-lg-" + col
}
klass += " delay-" + (i + 3);
buf.push("<div" + (jade.cls(['content-piece','slide-up','col-sm-12','block-v-sm',klass], [null,null,null,null,true])) + "><div" + (jade.attr("data-index", i, true, false)) + " class=\"btn-reveal\"><div class=\"btn-reveal-title btn btn-solid\"><h2 class=\"tight content-ver break-word\">" + (null == (jade_interp = written.hyphenate(piece.title)) ? "" : jade_interp) + "</h2></div><div class=\"btn-reveal-desc block-v-md block-h-lg btn btn-solid\"><div class=\"content-ver\">" + (null == (jade_interp = piece.description || "&nbsp;") ? "" : jade_interp) + "</div></div></div></div>");
    }

  }
}).call(this);

buf.push("</div></div></div><div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"Math" in locals_for_with?locals_for_with.Math:typeof Math!=="undefined"?Math:undefined,"content" in locals_for_with?locals_for_with.content:typeof content!=="undefined"?content:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined,"written" in locals_for_with?locals_for_with.written:typeof written!=="undefined"?written:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/reveal/view.coffee", function(exports, require, module) {
var RevealView, SlideView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SlideView = require("views/slide");

RevealView = (function(_super) {
  __extends(RevealView, _super);

  function RevealView() {
    _ref = RevealView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  RevealView.prototype.template = require("./template");

  RevealView.prototype.events = {
    "iostap .btn-reveal": "toggleContent",
    "iostap .btn-done": "submit"
  };

  RevealView.prototype.serialize = function() {
    var data;
    data = RevealView.__super__.serialize.apply(this, arguments);
    data.hasPrompt = true;
    return data;
  };

  RevealView.prototype.show = function(ms) {
    if (ms == null) {
      ms = 300;
    }
    this.listenTo(this, "resize", this.onResize);
    this.setEl(this.findAll(".btn-reveal"), "buttons");
    this.resizeButtons();
    return this.selectedIndexes = [];
  };

  RevealView.prototype.refresh = function(params) {
    var changed, description, i, _i, _len, _ref1, _ref2;
    _ref1 = params.data.content;
    for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
      description = _ref1[i].description;
      if (((_ref2 = this.options.data.content[i]) != null ? _ref2.description : void 0) !== description) {
        changed = i;
      }
    }
    RevealView.__super__.refresh.apply(this, arguments);
    this.selectedIndexes = [];
    this.resetButtons(changed);
    return this.resizeButtons();
  };

  RevealView.prototype.onResize = function() {
    this.resetButtons();
    return window.setTimeout(_.bind(this.resizeButtons, this), 300);
  };

  RevealView.prototype.resetButtons = function(activeIndex) {
    var el, i, _i, _len, _ref1, _results;
    this.setEl(this.findAll(".btn-reveal"), "buttons");
    if (activeIndex != null) {
      el = this.getEl("buttons").item(activeIndex);
      this.transition(el, "none", true);
      el.classList.add("active");
    }
    _ref1 = this.getEl("buttons");
    _results = [];
    for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
      el = _ref1[i];
      el.style.height = "";
      el.offsetHeight;
      _results.push(this.transition(el, ""));
    }
    return _results;
  };

  RevealView.prototype.resizeButtons = function() {
    var el, height, _i, _len, _ref1, _results;
    height = _.reduce(this.getEl("buttons"), function(m, el) {
      return Math.max(el.offsetHeight, el.firstChild.firstChild.offsetHeight, m);
    }, 0);
    _ref1 = this.getEl("buttons");
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      el = _ref1[_i];
      _results.push(el.style.height = "" + height + "px");
    }
    return _results;
  };

  RevealView.prototype.toggleContent = function(e) {
    var el, index, other, _i, _len, _ref1;
    el = e.currentTarget;
    index = el.dataset.index;
    this.selectedIndexes = _.uniq(this.selectedIndexes.concat(index));
    if (this.selectedIndexes.length === this.serialize().content.length) {
      this.setState("touched");
    }
    if (this.options.data.focus) {
      _ref1 = this.getEl("buttons");
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        other = _ref1[_i];
        if (other !== el) {
          other.classList.remove("active");
        }
      }
    }
    return el.classList.toggle("active");
  };

  return RevealView;

})(SlideView);

module.exports = RevealView;
});

;require.register("engine/scorm/model.yaml", function(exports, require, module) {
module.exports = {"title":"scorm","display":"SCORM","category":"Advanced","description":"Play a SCORM Package","features":{"stars":true},"model":{"package":{"type":"scorm","default":"scorm/scorm.zip","display":"SCORM File","help":"Upload your SCORM package."},"isRequiredForLessonCompletion":{"type":"boolean","display":"Required Content","default":true,"help":"The learner must complete the SCORM content before the lesson is marked as complete.\n"},"button":{"text":{"type":"text"},"position":{"type":"select","enum":["Below","Overlay Bottom","Overlay Top","None"],"default":"Below","help":"Choose the best position based on your content. If you choose not to display the button, your SCORM content must allow the learner to exit, or they will not be able to continue.\n"}},"background":{"type":"html","default":"","display":"Background Color","help":"This color (eg. \"orange\", \"#f90\", \"rgb(255,160,0)\") will be used for the background of the entire screen in lightbox mode.\n"},"allowPopups":{"type":"boolean","default":false,"help":"The learner will be able to open links from the SCORM lesson.\n"}}}
});

;require.register("engine/scorm/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (allowedSandboxedFeatures, button, i18n) {
buf.push("<div class=\"full-screen content-fill hide-overflow\"><iframe type=\"text/html\" frameborder=\"0\"" + (jade.attr("sandbox", allowedSandboxedFeatures, true, false)) + " class=\"scorm-object\"></iframe><div class=\"exit-btn btn\">" + (jade.escape(null == (jade_interp = (button && button.text) || i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");}.call(this,"allowedSandboxedFeatures" in locals_for_with?locals_for_with.allowedSandboxedFeatures:typeof allowedSandboxedFeatures!=="undefined"?allowedSandboxedFeatures:undefined,"button" in locals_for_with?locals_for_with.button:typeof button!=="undefined"?button:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/scorm/view.coffee", function(exports, require, module) {
var Device, Lesson, SCORMView, ScormAttempt, Session, SlideView, _ref, _ref1,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SlideView = require("views/slide");

ScormAttempt = require("models/scormAttempt");

Device = require("lib/device");

_ref = Application.actions(), Session = _ref.Session, Lesson = _ref.Lesson;

SCORMView = (function(_super) {
  __extends(SCORMView, _super);

  function SCORMView() {
    _ref1 = SCORMView.__super__.constructor.apply(this, arguments);
    return _ref1;
  }

  SCORMView.prototype.template = require("./template");

  SCORMView.prototype.events = function() {
    return {
      "iostap .exit-btn": "stopSCORM"
    };
  };

  SCORMView.prototype.initialize = function() {
    SCORMView.__super__.initialize.apply(this, arguments);
    this.scormAttempt = new ScormAttempt("lessonId", false, "Mathieu", this.options.previousAttempt);
    return this.isLastSlide = this.options.isLastSlide;
  };

  SCORMView.prototype.processIframeMessage = function(event) {
    var _ref2;
    if (event != null ? (_ref2 = event.data) != null ? typeof _ref2.match === "function" ? _ref2.match("window.SCORMED") : void 0 : void 0 : void 0) {
      return eval(event.data);
    }
  };

  SCORMView.prototype.beforeShow = function() {
    var position, _ref2, _ref3;
    position = ((_ref2 = this.options.data.button) != null ? (_ref3 = _ref2.position) != null ? _ref3.toLowerCase() : void 0 : void 0) || "none";
    this.setState(written.hyphenCase(position), "exit-btn");
    this.trigger("ui", {
      lightbox: this.options.data.background || true,
      fullscreen: true
    });
    return this.onResize();
  };

  SCORMView.prototype.beforeHide = function() {
    return this.trigger("ui", {
      lightbox: false,
      fullscreen: false
    });
  };

  SCORMView.prototype.show = function() {
    var position, _ref2, _ref3;
    this.stopped = false;
    position = ((_ref2 = this.options.data.button) != null ? (_ref3 = _ref2.position) != null ? _ref3.toLowerCase() : void 0 : void 0) || "none";
    this.setState(written.hyphenCase(position), "exit-btn");
    this.listenTo(this, "resize", this.onResize);
    this.initSCORM();
    return window.addEventListener("message", this.processIframeMessage, false);
  };

  SCORMView.prototype.onRefresh = function() {
    this.beforeShow();
    return SCORMView.__super__.onRefresh.apply(this, arguments);
  };

  SCORMView.prototype.onResize = function() {
    var button, iframe;
    if (this.currentState["exit-btn"] === "below") {
      button = this.findOne(".exit-btn");
      iframe = this.findOne(".scorm-object");
      iframe.style.bottom = "" + button.offsetHeight + "px";
      return iframe.style.height = "" + (iframe.parentNode.offsetHeight - button.offsetHeight) + "px";
    }
  };

  SCORMView.prototype.stopSCORM = function() {
    var attemptData, raw, score, tot, _ref2, _ref3,
      _this = this;
    if (this.stopped) {
      return;
    }
    this.stopped = true;
    window.API.LMSFinish();
    window.removeEventListener("message", this.processIframeMessage, false);
    attemptData = this.scormAttempt.attemptData();
    raw = attemptData != null ? (_ref2 = attemptData["cmi.core.score.raw"]) != null ? _ref2.value : void 0 : void 0;
    tot = attemptData != null ? (_ref3 = attemptData["cmi.core.score.max"]) != null ? _ref3.value : void 0 : void 0;
    score = raw && tot ? parseInt(raw) * 1.0 / parseInt(tot) : (attemptData != null ? attemptData.success : void 0) ? 1 : 0;
    return Session.get(function(err, _arg) {
      var attempt, interaction, _ref4;
      attempt = _arg.attempt;
      interaction = {
        id: _this.options.id,
        name: _this.options.name,
        type: _this.options.type,
        slideData: _this.options.data,
        scormData: attemptData,
        attempt: attempt,
        correct: attemptData != null ? attemptData.success : void 0,
        answerDetails: [],
        metadata: _this.options.metadata,
        isScormAttempt: true,
        score: score,
        isCompleted: attemptData != null ? attemptData.success : void 0,
        isRequiredForLessonCompletion: _this.options.data.isRequiredForLessonCompletion,
        configuration: (_ref4 = _this.options.data) != null ? _ref4.challenge_configuration : void 0
      };
      _this.lesson.processInteraction(interaction);
      if (window.ED_CMS_MODE) {

      } else if (_this.isLastSlide) {
        Lesson.complete();
        return _this.exit();
      } else {
        return _this.next();
      }
    });
  };

  SCORMView.prototype.serialize = function() {
    var data, sandboxedFeatures;
    data = SCORMView.__super__.serialize.apply(this, arguments);
    sandboxedFeatures = ["allow-scripts", "allow-same-origin", "allow-modals"];
    if (data.allowPopups) {
      sandboxedFeatures.push("allow-popups");
      sandboxedFeatures.push("allow-popups-to-escape-sandbox");
    }
    if (!Device.isIE()) {
      data.allowedSandboxedFeatures = sandboxedFeatures.join(" ");
    }
    return data;
  };

  SCORMView.prototype.initSCORMResource = function() {
    var data, resource,
      _this = this;
    data = this.serialize();
    resource = data["package"];
    this.findOne(".scorm-object").src = resource;
    return window.SCORMED = {
      LMSFinish: function(data) {
        _this.scormAttempt.processScormPlayerData(data);
        return _this.stopSCORM();
      }
    };
  };

  SCORMView.prototype.initSCORM = function() {
    var callbacks, scormData,
      _this = this;
    scormData = this.scormAttempt.initialData();
    callbacks = {
      success: function(success) {
        if (success) {
          return _this.initSCORMResource();
        }
      }
    };
    return window.API = new ScormAPI("lesson", "LID", scormData, callbacks);
  };

  return SCORMView;

})(SlideView);

module.exports = SCORMView;
});

;require.register("engine/scratch-to-reveal/model.yaml", function(exports, require, module) {
module.exports = {"title":"scratch-to-reveal","display":"Scratch to Reveal","category":"Content","features":{"narration":true},"model":{"title":{"type":"html"},"before":{"content":{"type":"image"},"label":{"type":"text"}},"after":{"content":{"types":["text","image"]},"label":{"type":"text"}},"prompt":{"type":"html","default":"Scratch to reveal the content"}},"examples":[{"title":"Product X vs. Product Y","before":{"content":"img/examples/product-1.png","contentType":"image","label":"**Product X**\n\nClassic Everyday Sizing\n"},"after":{"content":"img/examples/product-3.png","contentType":"image","label":"**Product Y**\n\nBetter Value With More Packed In\n"}}]}
});

;require.register("engine/scratch-to-reveal/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (after, before, config, continueBtnText, hasNarration, hasPrompt, i18n, prompt, title) {
jade_mixins["multi-content"] = jade_interp = function(prop, obj){
var block = (this && this.block), attributes = (this && this.attributes) || {};
obj = obj || locals;
switch (obj[prop + "Type"]){
case "image":
buf.push("<div" + (jade.attr("data-content", obj.image, true, false)) + " class=\"multi-content-wrapper multi-content-wrapper-image block-md block-lt\"><div class=\"block-sm multi-content-media\"><img" + (jade.attr("src", obj[prop], true, false)) + " class=\"multi-content multi-content-image\"/></div></div>");
  break;
case "video":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-video block-md block-lt\"><div class=\"block-sm multi-content-media\"><video" + (jade.attr("src", obj[prop], true, false)) + " webkit-playsinline=\"webkit-playsinline\" playsinline=\"playsinline\" preload=\"auto\" controls=\"controls\"" + (jade.attr("dir", config.direction, true, false)) + " class=\"video-js multi-content multi-content-video block-dk\"></video></div></div>");
  break;
case "audio":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-audio block-md block-lt\"><div class=\"block-sm multi-content-media\"><audio" + (jade.attr("src", obj[prop], true, false)) + " webkit-playsinline=\"webkit-playsinline\" playsinline=\"playsinline\" preload=\"auto\" controls=\"controls\"" + (jade.attr("dir", config.direction, true, false)) + " class=\"multi-content multi-content-audio block-dk\"></audio></div></div>");
  break;
case "iframe":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-iframe block-md block-lt\"><div class=\"block-sm multi-content-iframe\">");
var iframe = obj[prop].match(/<iframe[^<]*<\/iframe>/)
if ( iframe)
{
buf.push(null == (jade_interp = iframe[0].replace(/ (width|height)=["'\d\w]+/g, "")) ? "" : jade_interp);
}
buf.push("</div></div>");
  break;
default:
buf.push("<span class=\"multi-content multi-content-text\">" + (null == (jade_interp = obj[prop]) ? "" : jade_interp) + "</span>");
  break;
}
};
buf.push("<div class=\"content-fit content-fill\"><div class=\"content-ver text-center block-v-lg\"><div class=\"row\"><div class=\"col-sm-12 col-md-8 col-md-offset-2\"><div class=\"block-v-md\"><h1 class=\"slide-down\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1></div><div class=\"block-v-lg fade-in delay-3\"><div class=\"slider\"><div class=\"slider-items\"><div class=\"slider-item content-fill slider-item-0\"><div class=\"slider-content content-fill\">");
jade_mixins["multi-content"]("content", before);
buf.push("</div></div><div class=\"slider-item content-fill slider-item-1\"><div" + (jade.cls(['slider-content','content-fill',(after.contentType === "text" ? 
                    "multi-content-wrapper block-lt" : ""
                  )], [null,null,true])) + ">");
jade_mixins["multi-content"]("content", after);
buf.push("</div></div></div><div class=\"btn-replay btn btn-muted\"><span class=\"icon icon-replay\"></span></div></div></div><div class=\"slider-labels text-md slide-up\"><div class=\"slider-label slider-label-before\">" + (null == (jade_interp = before.label) ? "" : jade_interp) + "</div><div class=\"slider-label slider-label-after\">" + (null == (jade_interp = after.label) ? "" : jade_interp) + "</div></div></div></div></div></div><div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"after" in locals_for_with?locals_for_with.after:typeof after!=="undefined"?after:undefined,"before" in locals_for_with?locals_for_with.before:typeof before!=="undefined"?before:undefined,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/scratch-to-reveal/view.coffee", function(exports, require, module) {
var DraggyView, Preloader, ScratchToRevealView, SlideView, SmoothLine, dpi, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SlideView = require("views/slide");

DraggyView = require("views/components/draggy");

SmoothLine = require("lib/draw/smooth-line");

Preloader = require("lib/preload");

dpi = require("lib/device").dpi;

ScratchToRevealView = (function(_super) {
  __extends(ScratchToRevealView, _super);

  function ScratchToRevealView() {
    _ref = ScratchToRevealView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  ScratchToRevealView.prototype.template = require("./template");

  ScratchToRevealView.prototype.events = function() {
    return {
      "iostap .btn-done": "submit",
      "iostap .btn-replay": "restart"
    };
  };

  ScratchToRevealView.prototype.serialize = function() {
    var data;
    data = ScratchToRevealView.__super__.serialize.apply(this, arguments);
    data.before.contentType = "image";
    return data;
  };

  ScratchToRevealView.prototype.beforeShow = function() {
    var images,
      _this = this;
    images = this.findAll("img");
    this.setEl(this.findOne(".slider"), "slider");
    this.setEl(this.findOne(".slider-knob"), "knob");
    this.setEl(this.findAll(".slider-item"), "items");
    this.draggy = null;
    delete this.draggy;
    if (images.length > 0) {
      return Preloader.load(_.pluck(images, "src"), function() {
        return _this.sizeContent();
      });
    } else {
      return this.sizeContent();
    }
  };

  ScratchToRevealView.prototype.restart = function() {
    this.points = [];
    this.setState("prompt");
    return this.sizeContent();
  };

  ScratchToRevealView.prototype.show = function() {
    this.createDraggy();
    return this.points = [];
  };

  ScratchToRevealView.prototype.createDraggy = function() {
    var width;
    width = this.getEl("slider").offsetWidth;
    this.draggy = new DraggyView({
      el: this.findOne(".slider-item-0 .multi-content-media"),
      minX: 0,
      maxX: width,
      isParent: true
    });
    this.listenTo(this, "resize", this.onResize);
    this.listenTo(this.draggy, "drag", this.onDrag);
    return this.listenTo(this.draggy, "drop", this.onDrop);
  };

  ScratchToRevealView.prototype.onResize = function() {
    var i, point, set, _i, _len, _ref1, _results;
    this.sizeContent();
    _ref1 = this.points;
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      set = _ref1[_i];
      _results.push((function() {
        var _j, _len1, _results1;
        _results1 = [];
        for (i = _j = 0, _len1 = set.length; _j < _len1; i = ++_j) {
          point = set[i];
          _results1.push(this.draw(set.slice(i, i + 2)));
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  ScratchToRevealView.prototype.onDrag = function(draggy, isInitial) {
    if (isInitial) {
      this.points.push([]);
    }
    _.last(this.points).push({
      x: draggy.x * dpi,
      y: draggy.y * dpi
    });
    return this.draw(_.last(this.points).slice(-2));
  };

  ScratchToRevealView.prototype.onDrop = function() {
    var alphaPixels, data;
    data = this.context.getImageData(0, 0, this.context.canvas.width, this.context.canvas.height).data;
    alphaPixels = _.filter(data, function(e, i) {
      return i % 4 === 0;
    });
    if (_.average(alphaPixels) / 255 < 0.2) {
      return this.setState("touched");
    }
  };

  ScratchToRevealView.prototype.draw = function(_arg) {
    var d, diffM, diffX, diffY, i, p1, p2, radius, x, y, _i;
    p1 = _arg[0], p2 = _arg[1];
    radius = 30 * dpi;
    if (p2 == null) {
      p2 = p1;
    }
    diffX = p2.x - p1.x;
    diffY = p2.y - p1.y;
    diffM = Math.max(Math.abs(diffX), Math.abs(diffY), 1);
    this.context.fillStyle = "#000";
    this.context.beginPath();
    for (i = _i = 0; 0 <= diffM ? _i <= diffM : _i >= diffM; i = 0 <= diffM ? ++_i : --_i) {
      d = i / diffM;
      x = p1.x + diffX * d;
      y = p1.y + diffY * d;
      this.context.arc(x, y, radius, 0, Math.PI * 2);
    }
    this.context.fill();
    if (_.chain(this.points).pluck("length").sum().value() > 120) {
      return this.setState("touched");
    }
  };

  ScratchToRevealView.prototype.sizeContent = function() {
    var cHeight, cWidth, canvas, els, height, iHeight, iWidth, img, labels, padding, size;
    this.setState(false, "sized");
    els = this.findAll(".multi-content-wrapper");
    labels = this.findOne(".slider-labels");
    img = this.findOne(".slider-item-0 img");
    canvas = this.findOne("canvas");
    height = _.reduce(labels.children, function(m, el) {
      return Math.max(m, el.offsetHeight);
    }, 0);
    labels.style.height = "" + height + "px";
    size = _.reduce(els, function(m, el) {
      return {
        h: Math.max(m.h, el.offsetHeight),
        w: Math.max(m.w, el.offsetWidth)
      };
    }, {
      h: 80,
      w: 0
    });
    if (!canvas) {
      canvas = document.createElement("canvas");
      canvas.style.position = "absolute";
      canvas.style.top = "0";
      canvas.style.left = "0";
      img.insertAdjacentElement("afterEnd", canvas);
    }
    padding = parseFloat(window.getComputedStyle(img.parentNode).paddingLeft);
    cWidth = img.parentNode.offsetWidth;
    cHeight = Math.max(img.parentNode.offsetHeight, size.h - padding * 2);
    iWidth = img.offsetWidth;
    iHeight = img.offsetHeight;
    canvas.style.width = "" + cWidth + "px";
    canvas.style.height = "" + cHeight + "px";
    canvas.width = cWidth * dpi;
    canvas.height = cHeight * dpi;
    this.context = canvas.getContext("2d");
    this.context.fillStyle = "#fff";
    this.context.rect(0, 0, canvas.width, canvas.height);
    this.context.fill();
    this.context.drawImage(img, (cWidth - iWidth) / 2 * dpi, (cHeight - iHeight) / 2 * dpi, iWidth * dpi, iHeight * dpi);
    this.context.globalCompositeOperation = "destination-out";
    this.getEl("slider").style.height = "";
    this.getEl("slider").style.width = "";
    this.getEl("slider").style.height = "" + size.h + "px";
    this.getEl("slider").style.width = "" + size.w + "px";
    this.setState(true, "sized");
    if (this.draggy != null) {
      this.draggy.options.maxX = size.w;
      return this.draggy.getOffset();
    }
  };

  ScratchToRevealView.prototype.onRefresh = function() {
    this.beforeShow();
    return ScratchToRevealView.__super__.onRefresh.apply(this, arguments);
  };

  ScratchToRevealView.prototype.refresh = function(params) {
    var isAfter;
    isAfter = !_.isEqual(params.data.after, this.options.data.after);
    ScratchToRevealView.__super__.refresh.apply(this, arguments);
    if (isAfter) {
      return this.setState("touched");
    }
  };

  return ScratchToRevealView;

})(SlideView);

module.exports = ScratchToRevealView;
});

;require.register("engine/scrollable/model.yaml", function(exports, require, module) {
module.exports = {"title":"scrollable","display":"Scrollable","category":"Content","features":{"narration":true},"description":"Display a long amount of content","model":{"title":{"type":"html","default":""},"content":{"type":"html","default":""},"prompt":{"type":"html","default":"Scroll to see more"}},"examples":[{"title":"Scrolling Content","content":"\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus\nquis lectus metus, at posuere neque. Sed pharetra nibh eget orci\nconvallis at posuere leo convallis. Sed blandit augue vitae augue\nscelerisque bibendum. Vivamus sit amet libero turpis, non venenatis\nurna. In blandit, odio convallis suscipit venenatis, ante ipsum cursus\naugue.\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus\nquis lectus metus, at posuere neque. Sed pharetra nibh eget orci\nconvallis at posuere leo convallis. Sed blandit augue vitae augue\nscelerisque bibendum. Vivamus sit amet libero turpis, non venenatis\nurna. In blandit, odio convallis suscipit venenatis, ante ipsum cursus\naugue.\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus\nquis lectus metus, at posuere neque. Sed pharetra nibh eget orci\nconvallis at posuere leo convallis. Sed blandit augue vitae augue\nscelerisque bibendum. Vivamus sit amet libero turpis, non venenatis\nurna. In blandit, odio convallis suscipit venenatis, ante ipsum cursus\naugue.\n"}]}
});

;require.register("engine/scrollable/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (content, continueBtnText, hasNarration, hasPrompt, i18n, prompt, title) {
buf.push("<div class=\"content-md content-fill\"><div class=\"content-scroll content-sm-scroll content-md-scroll block-v-lg fade-in\"><div class=\"content-scroll-inner hide-overflow\"><div class=\"row\"><div class=\"col-sm-12 col-lg-10 col-lg-offset-1\"><h1 class=\"text-center slide-down\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"text-md\">" + (null == (jade_interp = content) ? "" : jade_interp) + "</div></div></div></div></div></div><div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"content" in locals_for_with?locals_for_with.content:typeof content!=="undefined"?content:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/scrollable/view.coffee", function(exports, require, module) {
var ScrollableView, SlideView, device, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SlideView = require("views/slide");

device = require("lib/device");

ScrollableView = (function(_super) {
  __extends(ScrollableView, _super);

  function ScrollableView() {
    _ref = ScrollableView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  ScrollableView.prototype.template = require("./template");

  ScrollableView.prototype.ignoreStateOnRefresh = true;

  ScrollableView.prototype.buffer = 40;

  ScrollableView.prototype.events = function() {
    return {
      "iostap .btn-done": "submit"
    };
  };

  ScrollableView.prototype.serialize = function() {
    var data;
    data = ScrollableView.__super__.serialize.apply(this, arguments);
    data.hasPrompt = true;
    return data;
  };

  ScrollableView.prototype.beforeShow = function() {
    return this.trigger("ui", {
      flexibleHeight: true
    });
  };

  ScrollableView.prototype.beforeHide = function() {
    return this.trigger("ui", {
      flexibleHeight: false
    });
  };

  ScrollableView.prototype.show = function() {
    this.setHeight();
    return this.listenTo(this, "resize", this.onResize);
  };

  ScrollableView.prototype.onScroll = function(e) {
    ScrollableView.__super__.onScroll.apply(this, arguments);
    if (e.currentTarget.scrollTop >= this.scrollLimit) {
      return this.setState("touched");
    }
  };

  ScrollableView.prototype.onResize = function() {
    return this.setHeight();
  };

  ScrollableView.prototype.setHeight = function(narrationIsComplete, y) {
    var el, hasNarration, innerHeight, outerHeight, _ref1, _ref2;
    el = this.findOne(".content-scroll");
    if (y != null) {
      el.scrollTop = y;
    }
    outerHeight = this.el.offsetHeight;
    innerHeight = el.firstChild.offsetHeight;
    this.scrollLimit = innerHeight - outerHeight - this.buffer;
    hasNarration = !narrationIsComplete && ((_ref1 = this.options.data.narration) != null ? _ref1.audio_file : void 0) && ((_ref2 = this.options.data.narration) != null ? _ref2.can_not_be_skipped : void 0);
    if (innerHeight - this.buffer <= outerHeight) {
      if (!hasNarration) {
        this.setState("touched");
      }
      this.transform(el.firstChild, {
        y: (outerHeight - innerHeight) / 2
      });
    } else {
      this.transform(el.firstChild, {
        y: 0,
        transition: "all 300ms"
      });
      if (!hasNarration) {
        this.setState("prompt");
      }
    }
    if (el.scrollTop >= this.scrollLimit) {
      this.setState("touched");
    }
    if (el.offsetHeight < el.scrollHeight && device.platform === "iOS") {
      el.style.paddingBottom = "2px";
      el.scrollTop = 1;
      return window.setTimeout(function() {
        el.offsetTop;
        el.scrollTop = 0;
        return el.style.paddingBottom = "";
      }, 10);
    }
  };

  ScrollableView.prototype.refresh = function() {
    var scrollTop, scroller;
    scroller = this.findOne(".content-scroll");
    scrollTop = scroller.scrollTop;
    ScrollableView.__super__.refresh.apply(this, arguments);
    return this.setHeight(false, scrollTop);
  };

  ScrollableView.prototype.onNarrationPause = function() {
    return this.setHeight();
  };

  ScrollableView.prototype.onNarrationComplete = function() {
    return this.setHeight(true);
  };

  return ScrollableView;

})(SlideView);

module.exports = ScrollableView;
});

;require.register("engine/scrolling-media/model.yaml", function(exports, require, module) {
module.exports = {"title":"scrolling-media","display":"Scrolling Media","category":"Content","description":"Display long form content of any type","features":{"narration":true},"model":{"title":{"type":"html"},"content":{"min":1,"max":10,"type":[{"content":{"types":["text","image","video","audio"]}}]},"prompt":{"type":"html","default":"Scroll to see more"},"preventFocus":{"type":"boolean","default":false,"display":"Prevent Image Zoom","help":"Disable the ability to explore images by tapping on them to view the image in more detail.\n"}},"examples":[{"title":"About Product Z","content":[{"contentType":"text","content":"Product Z is our third product in the Product line. It is three times as good as product X, but only takes up one third of the space. Don't believe us? See below:\n"},{"contentType":"image","content":"img/examples/product-3.png"},{"content":"Review the following interactive slides to learn more about Product Z.\n"}]}]}
});

;require.register("engine/scrolling-media/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (config, content, continueBtnText, hasNarration, hasPrompt, i18n, prompt, title, undefined) {
jade_mixins["multi-content"] = jade_interp = function(prop, obj){
var block = (this && this.block), attributes = (this && this.attributes) || {};
obj = obj || locals;
switch (obj[prop + "Type"]){
case "image":
buf.push("<div" + (jade.attr("data-content", obj.image, true, false)) + " class=\"multi-content-wrapper multi-content-wrapper-image block-md block-lt\"><div class=\"block-sm multi-content-media\"><img" + (jade.attr("src", obj[prop], true, false)) + " class=\"multi-content multi-content-image\"/></div></div>");
  break;
case "video":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-video block-md block-lt\"><div class=\"block-sm multi-content-media\"><video" + (jade.attr("src", obj[prop], true, false)) + " webkit-playsinline=\"webkit-playsinline\" playsinline=\"playsinline\" preload=\"auto\" controls=\"controls\"" + (jade.attr("dir", config.direction, true, false)) + " class=\"video-js multi-content multi-content-video block-dk\"></video></div></div>");
  break;
case "audio":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-audio block-md block-lt\"><div class=\"block-sm multi-content-media\"><audio" + (jade.attr("src", obj[prop], true, false)) + " webkit-playsinline=\"webkit-playsinline\" playsinline=\"playsinline\" preload=\"auto\" controls=\"controls\"" + (jade.attr("dir", config.direction, true, false)) + " class=\"multi-content multi-content-audio block-dk\"></audio></div></div>");
  break;
case "iframe":
buf.push("<div class=\"multi-content-wrapper multi-content-wrapper-iframe block-md block-lt\"><div class=\"block-sm multi-content-iframe\">");
var iframe = obj[prop].match(/<iframe[^<]*<\/iframe>/)
if ( iframe)
{
buf.push(null == (jade_interp = iframe[0].replace(/ (width|height)=["'\d\w]+/g, "")) ? "" : jade_interp);
}
buf.push("</div></div>");
  break;
default:
buf.push("<span class=\"multi-content multi-content-text\">" + (null == (jade_interp = obj[prop]) ? "" : jade_interp) + "</span>");
  break;
}
};
buf.push("<div class=\"content-scroll fade-in\"><div class=\"content-scroll-inner hide-overflow block-v-lg block-box-sizing\"><div class=\"row\"><div class=\"col-sm-12 col-lg-8 col-lg-offset-2\"><h1 class=\"text-center slide-down\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"slide-content text-md\">");
// iterate content
;(function(){
  var $$obj = content;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var item = $$obj[i];

buf.push("<div" + (jade.cls(['block-v-md','fade-in',"delay-" + (i + 1) + ""], [null,null,true])) + ">");
jade_mixins["multi-content"]("content", item);
buf.push("</div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var item = $$obj[i];

buf.push("<div" + (jade.cls(['block-v-md','fade-in',"delay-" + (i + 1) + ""], [null,null,true])) + ">");
jade_mixins["multi-content"]("content", item);
buf.push("</div>");
    }

  }
}).call(this);

buf.push("</div></div></div></div></div><div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined,"content" in locals_for_with?locals_for_with.content:typeof content!=="undefined"?content:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/scrolling-media/view.coffee", function(exports, require, module) {
var Preloader, ScrollableView, ScrollingMediaView, dpi, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

ScrollableView = require("../scrollable/view");

Preloader = require("lib/preload");

dpi = require("lib/device").dpi;

ScrollingMediaView = (function(_super) {
  __extends(ScrollingMediaView, _super);

  function ScrollingMediaView() {
    _ref = ScrollingMediaView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  ScrollingMediaView.prototype.template = require("./template");

  ScrollingMediaView.prototype.ignoreStateOnRefresh = true;

  ScrollingMediaView.prototype.events = function() {
    return _.extend(ScrollingMediaView.__super__.events.apply(this, arguments), {
      "iostap .multi-content-wrapper-image": "showZoom"
    });
  };

  ScrollingMediaView.prototype.setHeight = function(narrationIsComplete, y) {
    var images, scroller,
      _this = this;
    scroller = this.findOne(".content-scroll");
    images = _.pluck(this.findAll("img"), "src");
    return Preloader.load(images, function(e) {
      return ScrollingMediaView.__super__.setHeight.call(_this, narrationIsComplete, y);
    });
  };

  ScrollingMediaView.prototype.show = function() {
    ScrollingMediaView.__super__.show.apply(this, arguments);
    return this.setState(!this.options.data.preventFocus, "image-focus");
  };

  ScrollingMediaView.prototype.onRefresh = function() {
    var _ref1;
    if ((_ref1 = this.photoswipe) != null) {
      _ref1.close();
    }
    return this.show();
  };

  ScrollingMediaView.prototype.hide = function() {
    var _ref1;
    ScrollingMediaView.__super__.hide.apply(this, arguments);
    return (_ref1 = this.photoswipe) != null ? _ref1.close() : void 0;
  };

  ScrollingMediaView.prototype.showZoom = function(e, showAnimationDuration) {
    var i, images, img, index, left, pad, thumbBounds, top, width, _ref1,
      _this = this;
    if (showAnimationDuration == null) {
      showAnimationDuration = 300;
    }
    if (this.options.data.preventFocus) {
      return;
    }
    this.setState("touched");
    this.setState(true, "focus");
    img = e.currentTarget.querySelector("img");
    pad = this.options.data.compose ? 12 : 0;
    _ref1 = img.getBoundingClientRect(), top = _ref1.top, left = _ref1.left, width = _ref1.width;
    thumbBounds = {
      x: left + pad,
      y: top + pad,
      w: width - pad * 2
    };
    images = (function() {
      var _i, _len, _ref2, _results;
      _ref2 = this.findAll(".multi-content-image");
      _results = [];
      for (i = _i = 0, _len = _ref2.length; _i < _len; i = ++_i) {
        img = _ref2[i];
        if (img === e.target) {
          index = i;
        }
        _results.push({
          img: img,
          msrc: img.src,
          src: img.src,
          w: (img.naturalWidth || img.width) / Math.min(dpi, 1.66),
          h: (img.naturalHeight || img.height) / Math.min(dpi, 1.66)
        });
      }
      return _results;
    }).call(this);
    this.photoswipe = new PhotoSwipe(document.querySelector("#photoswipe"), PhotoSwipeUI_Default, images, {
      index: index,
      showAnimationDuration: showAnimationDuration,
      focus: false,
      history: false,
      barsSize: {
        top: 0,
        bottom: 0
      },
      indexIndicatorSep: " of ",
      getThumbBoundsFn: function() {
        return thumbBounds;
      }
    });
    this.photoswipe.listen("close", function() {
      return _this.setState(false, "focus");
    });
    return this.photoswipe.init();
  };

  return ScrollingMediaView;

})(ScrollableView);

module.exports = ScrollingMediaView;
});

;require.register("engine/slider-survey/model.yaml", function(exports, require, module) {
module.exports = {"title":"slider-survey","display":"Slider","category":"Survey","description":"Gather numerical feedback","model":{"question":{"id":{"type":"uuid","hidden":true},"content":{"type":"html","default":"Ask a question"}},"slider":{"min":{"type":"number","default":0,"display":"Min. Value"},"max":{"type":"number","default":10,"display":"Max. Value"},"prefix":{"type":"html","default":""},"suffix":{"type":"html","default":""},"increment":{"type":"number","default":1},"labels":{"type":"int","min":2,"max":10,"default":3},"minLabel":{"type":"text","default":"","display":"Minimum Label"},"maxLabel":{"type":"text","default":"","display":"Maximum Label"},"decimals":{"type":"int","min":0,"max":8,"default":0}},"prompt":{"type":"html","default":"Drag to select a response"}},"examples":[{"question":{"content":"I feel more confident in my understanding of _______ after completing this lesson.","id":"#GENUUID#"},"slider":{"min":0,"max":5,"suffix":"","labels":5,"minLabel":"Strongly Disagree","maxLabel":"Strongly Agree"}}]}
});

;require.register("engine/slider-survey/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (Array, config, continueBtnText, hasNarration, hasPrompt, i18n, labelValues, labels, notches, prompt, question, slider, undefined) {
buf.push("<div class=\"content-fill\"><div class=\"content-fit content-md-fill content-sm-ver\"><div class=\"content-md-ver text-center block-v-lg\"><h1>" + (null == (jade_interp = question.content) ? "" : jade_interp) + "</h1><div class=\"slider scale-up\"><div class=\"slider-bar\"></div><div class=\"slider-knob slider-knob-input\"><div class=\"slider-knob-value text-md text-nowrap\">Touch to slide</div></div><div class=\"slider-knob slider-knob-answer\"><div class=\"slider-knob-value text-md text-nowrap\">" + (null == (jade_interp = slider.prefix) ? "" : jade_interp) + (null == (jade_interp = "") ? "" : jade_interp) + (null == (jade_interp = slider.suffix) ? "" : jade_interp) + "</div></div><div class=\"slider-notches\">");
// iterate (new Array(notches + 1))
;(function(){
  var $$obj = (new Array(notches + 1));
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var notch = $$obj[i];

buf.push("<div" + (jade.attr("style", "left: " + (i / notches * 100) + "%;", true, false)) + " class=\"slider-notch\"></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var notch = $$obj[i];

buf.push("<div" + (jade.attr("style", "left: " + (i / notches * 100) + "%;", true, false)) + " class=\"slider-notch\"></div>");
    }

  }
}).call(this);

buf.push("</div>");
if ( slider.labels)
{
buf.push("<div class=\"slider-labels\">");
var attr = config.direction === "rtl" ? "right" : "left";
// iterate labelValues
;(function(){
  var $$obj = labelValues;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var label = $$obj[i];

buf.push("<div" + (jade.attr("style", "" + (attr) + ": " + (i / (labels - 1) * 100) + "%;", true, false)) + " class=\"slider-label\">" + (null == (jade_interp = slider.prefix) ? "" : jade_interp) + (null == (jade_interp = slider.decimals ? label.toFixed(slider.decimals) : label) ? "" : jade_interp) + (null == (jade_interp = slider.suffix) ? "" : jade_interp) + "</div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var label = $$obj[i];

buf.push("<div" + (jade.attr("style", "" + (attr) + ": " + (i / (labels - 1) * 100) + "%;", true, false)) + " class=\"slider-label\">" + (null == (jade_interp = slider.prefix) ? "" : jade_interp) + (null == (jade_interp = slider.decimals ? label.toFixed(slider.decimals) : label) ? "" : jade_interp) + (null == (jade_interp = slider.suffix) ? "" : jade_interp) + "</div>");
    }

  }
}).call(this);

buf.push("</div>");
}
buf.push("<div class=\"slider-label-text\">");
if ( slider.minLabel)
{
buf.push("<div class=\"slider-label-min pull-left\">" + (null == (jade_interp = slider.minLabel) ? "" : jade_interp) + "</div>");
}
if ( slider.maxLabel)
{
buf.push("<div class=\"slider-label-max pull-right\">" + (null == (jade_interp = slider.maxLabel) ? "" : jade_interp) + "</div>");
}
buf.push("</div></div></div></div></div><div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"Array" in locals_for_with?locals_for_with.Array:typeof Array!=="undefined"?Array:undefined,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"labelValues" in locals_for_with?locals_for_with.labelValues:typeof labelValues!=="undefined"?labelValues:undefined,"labels" in locals_for_with?locals_for_with.labels:typeof labels!=="undefined"?labels:undefined,"notches" in locals_for_with?locals_for_with.notches:typeof notches!=="undefined"?notches:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"question" in locals_for_with?locals_for_with.question:typeof question!=="undefined"?question:undefined,"slider" in locals_for_with?locals_for_with.slider:typeof slider!=="undefined"?slider:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/slider-survey/view.coffee", function(exports, require, module) {
var InputView, SliderSurveyView, SliderView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

InputView = require("views/input");

SliderView = require("engine/slider/view");

SliderSurveyView = (function(_super) {
  __extends(SliderSurveyView, _super);

  function SliderSurveyView() {
    _ref = SliderSurveyView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  SliderSurveyView.prototype.template = require("./template");

  SliderSurveyView.prototype.events = function() {
    return {
      "iostap .btn-done": "nextSlide"
    };
  };

  SliderSurveyView.prototype.show = function() {
    this.setEl(this.findOne(".slider-label-min"), "min-label");
    this.setEl(this.findOne(".slider-label-max"), "max-label");
    return SliderSurveyView.__super__.show.apply(this, arguments);
  };

  SliderSurveyView.prototype.userInput = function() {
    return {
      question: {
        id: this.options.data.question.id,
        content: this.options.data.question.content
      },
      answer: {
        value: parseFloat(this.currentValue)
      }
    };
  };

  SliderSurveyView.prototype.nextSlide = function() {
    return InputView.prototype.nextSlide.call(this);
  };

  SliderSurveyView.prototype.onDrag = function(draggy) {
    SliderSurveyView.__super__.onDrag.apply(this, arguments);
    return this.styleLabels(draggy);
  };

  SliderSurveyView.prototype.onDrop = function(draggy) {
    SliderSurveyView.__super__.onDrop.apply(this, arguments);
    return this.styleLabels(draggy);
  };

  SliderSurveyView.prototype.styleLabels = function(draggy) {
    var min, opacity, _ref1, _ref2;
    opacity = draggy.x / draggy.offset.width;
    min = 0.1;
    opacity = (opacity * (1 - min)) + min;
    if ((_ref1 = this.getEl("min-label")) != null) {
      _ref1.style.opacity = (1 + min) - opacity;
    }
    return (_ref2 = this.getEl("max-label")) != null ? _ref2.style.opacity = opacity : void 0;
  };

  return SliderSurveyView;

})(SliderView);

module.exports = SliderSurveyView;
});

;require.register("engine/slider/model.yaml", function(exports, require, module) {
module.exports = {"title":"slider","display":"Slider","category":"Numbers","features":{"stars":true},"model":{"title":{"type":"html","default":"Ask a question"},"slider":{"min":{"type":"number","default":0,"display":"Min. Value"},"max":{"type":"number","default":10,"display":"Max. Value"},"prefix":{"type":"html","default":""},"suffix":{"type":"html","default":""},"increment":{"type":"number","default":1},"labels":{"type":"int","min":2,"max":10,"default":3},"decimals":{"type":"int","min":0,"max":8,"default":0}},"answer":{"text":{"type":"html","default":"","display":"Answer Text"},"value":{"type":"number","display":"Correct Value"},"correct":{"type":"html","default":"That's correct!","display":"Correct Reinforcement"},"incorrect":{"type":"html","default":"Not quite...","display":"Incorrect Reinforcement"},"takeaway":{"type":"html","default":"","display":"Core Message"}},"prompt":{"type":"html","default":"Slide to the correct value"},"game":{"timer":{"limit":{"type":"number","default":-1,"display":"Time Limit (ms)"}}}},"examples":[{"title":"What percent of customers responded in the survey?","slider":{"min":85,"max":100,"suffix":"%","labels":4},"answer":{"text":"A huge amount of responses were contributed to the survey.","value":98}},{"title":"What is the new price of the product?","slider":{"min":6.5,"increment":0.25,"max":11.5,"prefix":"$","labels":8,"decimals":2},"answer":{"value":7.75,"text":"At $7.75, the product is now a lot cheaper!\n"}},{"title":"In which year was the product introduced?","slider":{"min":1984,"max":1990,"prefix":"","labels":3},"answer":{"text":"The product is a true original from 1984!","value":1984}}]}
});

;require.register("engine/slider/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (Array, answer, config, continueBtnText, game, hasNarration, hasPrompt, i18n, labelValues, labels, notches, prompt, slider, title, undefined) {
if ( game && game.timer && game.timer.limit > 0)
{
buf.push("<div class=\"full-screen\"><div class=\"game-stepper text-lg text-bold\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div></div>");
}
buf.push("<div class=\"content-fill\"><div class=\"content-fit content-md-fill content-sm-ver\"><div class=\"content-md-ver text-center block-v-lg\"><h1>" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"slider scale-up\"><div class=\"slider-bar\"></div><div class=\"slider-knob slider-knob-input\"><div class=\"slider-knob-value text-md text-nowrap\">" + (jade.escape((jade_interp = i18n("slider.touch-to-slide")) == null ? '' : jade_interp)) + "</div></div><div class=\"slider-knob slider-knob-answer\"><div class=\"slider-knob-value text-md text-nowrap\">" + (null == (jade_interp = slider.prefix) ? "" : jade_interp) + (null == (jade_interp = answer.value) ? "" : jade_interp) + (null == (jade_interp = slider.suffix) ? "" : jade_interp) + "</div></div><div class=\"slider-notches\">");
// iterate (new Array(notches + 1))
;(function(){
  var $$obj = (new Array(notches + 1));
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var notch = $$obj[i];

buf.push("<div" + (jade.attr("style", "left: " + (i / notches * 100) + "%;", true, false)) + " class=\"slider-notch\"></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var notch = $$obj[i];

buf.push("<div" + (jade.attr("style", "left: " + (i / notches * 100) + "%;", true, false)) + " class=\"slider-notch\"></div>");
    }

  }
}).call(this);

buf.push("</div>");
if ( slider.labels)
{
buf.push("<div class=\"slider-labels\">");
var attr = config.direction === "rtl" ? "right" : "left";
// iterate labelValues
;(function(){
  var $$obj = labelValues;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var label = $$obj[i];

buf.push("<div" + (jade.attr("style", "" + (attr) + ": " + (i / (labels - 1) * 100) + "%;", true, false)) + " class=\"slider-label\">" + (null == (jade_interp = slider.prefix) ? "" : jade_interp) + (null == (jade_interp = slider.decimals ? label.toFixed(slider.decimals) : label) ? "" : jade_interp) + (null == (jade_interp = slider.suffix) ? "" : jade_interp) + "</div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var label = $$obj[i];

buf.push("<div" + (jade.attr("style", "" + (attr) + ": " + (i / (labels - 1) * 100) + "%;", true, false)) + " class=\"slider-label\">" + (null == (jade_interp = slider.prefix) ? "" : jade_interp) + (null == (jade_interp = slider.decimals ? label.toFixed(slider.decimals) : label) ? "" : jade_interp) + (null == (jade_interp = slider.suffix) ? "" : jade_interp) + "</div>");
    }

  }
}).call(this);

buf.push("</div>");
}
buf.push("</div></div></div></div><div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"Array" in locals_for_with?locals_for_with.Array:typeof Array!=="undefined"?Array:undefined,"answer" in locals_for_with?locals_for_with.answer:typeof answer!=="undefined"?answer:undefined,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"game" in locals_for_with?locals_for_with.game:typeof game!=="undefined"?game:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"labelValues" in locals_for_with?locals_for_with.labelValues:typeof labelValues!=="undefined"?labelValues:undefined,"labels" in locals_for_with?locals_for_with.labels:typeof labels!=="undefined"?labels:undefined,"notches" in locals_for_with?locals_for_with.notches:typeof notches!=="undefined"?notches:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"slider" in locals_for_with?locals_for_with.slider:typeof slider!=="undefined"?slider:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/slider/view.coffee", function(exports, require, module) {
var Draggy, GameView, SliderView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

GameView = require("views/base/game");

Draggy = require("views/components/draggy");

SliderView = (function(_super) {
  __extends(SliderView, _super);

  function SliderView() {
    _ref = SliderView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  SliderView.prototype.template = require("./template");

  SliderView.prototype.events = {
    "iostap .btn-done": "endGame"
  };

  SliderView.prototype.serialize = function() {
    var d, _i, _ref1, _results;
    d = SliderView.__super__.serialize.apply(this, arguments);
    d.slider.increment = parseFloat(d.slider.increment, 10) || 1;
    d.slider.min = parseFloat(d.slider.min, 10);
    d.slider.max = parseFloat(d.slider.max, 10);
    d.range = d.slider.max - d.slider.min;
    d.notches = Math.round(d.range / d.slider.increment);
    d.labels = _.nearest(_.factors(d.notches).map(function(m) {
      return m + 1;
    }), d.slider.labels);
    d.labelValues = (function() {
      _results = [];
      for (var _i = 0, _ref1 = d.labels; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; 0 <= _ref1 ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this).map(function(i) {
      var value;
      value = new Big(Math.round(i * d.notches / (d.labels - 1)));
      value = value.mul(d.slider.increment).add(d.slider.min);
      return value;
    });
    return d;
  };

  SliderView.prototype.beforeShow = function() {
    return this.trigger("ui", {
      flexibleHeight: true
    });
  };

  SliderView.prototype.beforeHide = function() {
    return this.trigger("ui", {
      flexibleHeight: false
    });
  };

  SliderView.prototype.show = function() {
    SliderView.__super__.show.apply(this, arguments);
    delete this.currentValue;
    this.setEl(this.findOne(".slider"), "slider");
    this.setEl(this.findOne(".slider-knob-input"), "knob-input");
    this.setEl(this.findOne(".slider-knob-value"), "knob-value");
    this.setEl(this.findOne(".slider-knob-answer"), "knob-answer");
    this.createDraggy();
    this.draggy.reset({
      x: this.draggy.offset.width / 2
    });
    return this.enterGame();
  };

  SliderView.prototype.createDraggy = function() {
    var width;
    width = this.getEl("slider").offsetWidth;
    this.draggy = new Draggy({
      el: this.getEl("slider"),
      minX: 0,
      maxX: width,
      lock: "y",
      isParent: true
    });
    if (this.options.config().direction === "rtl") {
      this.draggy.reset({
        x: width
      });
      this.transform(this.getEl("knob-input"), {
        x: width
      });
      this.getEl("knob-input").offsetWidth;
    }
    this.listenTo(this.draggy, "drag", this.onDrag);
    this.listenTo(this.draggy, "drop", this.onDrop);
    return this.listenTo(this, "resize", this.onResize);
  };

  SliderView.prototype.onDrag = function(draggy, isInitialDrag) {
    this.currentValue = this.roundValue(draggy);
    this.labelEl(this.getEl("knob-value"), this.currentValue);
    return this.transform(this.getEl("knob-input"), {
      x: draggy.x,
      scale: 1.25,
      transition: isInitialDrag ? "all 300ms" : "none"
    });
  };

  SliderView.prototype.onDrop = function(draggy, isReset) {
    var x;
    x = this.roundPos(draggy);
    if (draggy.x !== x && !isReset) {
      return draggy.reset({
        x: x
      });
    } else {
      this.transform(this.getEl("knob-input"), {
        x: draggy.x,
        transition: "all 300ms"
      });
      if (this.currentValue != null) {
        this.labelEl(this.getEl("knob-value"), this.currentValue);
        return this.setState("touched");
      }
    }
  };

  SliderView.prototype.roundValue = function(draggy) {
    var increment, max, min, _ref1;
    _ref1 = this.options.data.slider, increment = _ref1.increment, min = _ref1.min, max = _ref1.max;
    return Big(max - min).mul(this.roundPercent(draggy)).div(increment).round().mul(increment).plus(min);
  };

  SliderView.prototype.roundPos = function(draggy) {
    var percent;
    percent = this.roundPercent(draggy);
    if (this.options.config().direction === "rtl") {
      percent = 1 - percent;
    }
    return percent * draggy.offset.width;
  };

  SliderView.prototype.roundPercent = function(draggy) {
    var increment, max, min, percent, steps, _ref1;
    _ref1 = this.options.data.slider, increment = _ref1.increment, min = _ref1.min, max = _ref1.max;
    max = Big(max).sub(min).div(increment).round().mul(increment).plus(min);
    percent = _.limit(draggy.x / draggy.offset.width, 0, 1) || 0;
    steps = Big(max).sub(min).div(increment).valueOf();
    percent = Big(steps).mul(percent).round().div(steps);
    if (this.options.config().direction === "rtl") {
      percent = 1 - percent;
    }
    return percent;
  };

  SliderView.prototype.onResize = function(e, data) {
    var max, min, percent, _ref1;
    _ref1 = this.options.data.slider, min = _ref1.min, max = _ref1.max;
    percent = (this.currentValue - min) / (max - min) || 0.5;
    this.draggy.options.maxX = this.draggy.el.offsetWidth;
    this.draggy.reset({
      x: percent * this.draggy.el.offsetWidth
    });
    return this.animateAnswerKnob(this.getEl("knob-answer"));
  };

  SliderView.prototype.labelEl = function(el, value) {
    var decimals, prefix, suffix, _ref1;
    _ref1 = this.options.data.slider, prefix = _ref1.prefix, suffix = _ref1.suffix, decimals = _ref1.decimals;
    decimals = parseFloat(decimals, 10) || 0;
    if (decimals > 0) {
      value = parseFloat(value, 10).toFixed(decimals);
    }
    return el.innerHTML = "" + prefix + value + suffix;
  };

  SliderView.prototype.isCorrect = function() {
    var _ref1, _ref2;
    return (((_ref1 = this.options.data) != null ? (_ref2 = _ref1.answer) != null ? _ref2.value : void 0 : void 0) != null) && (this.currentValue != null) && this.currentValue.eq(this.options.data.answer.value);
  };

  SliderView.prototype.showAnswer = function() {
    this.transform(this.getEl("knob-answer"), {
      x: this.draggy.x
    });
    this.animateAnswerKnob(this.getEl("knob-answer"));
    return this.draggy.lock();
  };

  SliderView.prototype.animateAnswerKnob = function(el) {
    var answer, increment, max, min, percent, slider, _ref1;
    _ref1 = this.options.data, answer = _ref1.answer, slider = _ref1.slider;
    increment = slider.increment, min = slider.min, max = slider.max;
    max = Big(max).sub(min).div(increment).round().mul(increment).plus(min);
    percent = (answer.value - min) / (max - min);
    if (this.options.config().direction === "rtl") {
      percent = 1 - percent;
    }
    el.offsetLeft;
    return this.transform(el, {
      x: percent * this.draggy.offset.width,
      transition: this.draggy.locked ? "none" : "all 600ms"
    });
  };

  SliderView.prototype.answerDetails = function() {
    var answer, correct, details, question, questions, value, _ref1;
    questions = ((_ref1 = this.options.metadata) != null ? _ref1.questions : void 0) || [];
    if (!(questions.length > 0)) {
      return [];
    }
    question = questions[0];
    correct = this.isCorrect();
    value = Number(this.currentValue);
    answer = _.find(question.answers, function(a) {
      return a.correct === correct;
    });
    answer.content = value;
    details = {
      question: question.question,
      answer: answer
    };
    return [details];
  };

  SliderView.prototype.endGame = function() {
    SliderView.__super__.endGame.apply(this, arguments);
    return this.submit();
  };

  return SliderView;

})(GameView);

module.exports = SliderView;
});

;require.register("engine/strikeout/model.yaml", function(exports, require, module) {
module.exports = {"title":"strikeout","display":"Strike-out","category":"Concepts","features":{"stars":true},"model":{"title":{"type":"html"},"subtitle":{"type":"html"},"words":{"min":1,"max":8,"type":[{"incorrect":{"type":"html","display":"Incorrect word(s) to go in your sentence"},"replaces":{"type":"html","display":"The word(s) from your sentence to be replaced"}}]},"answer":{"text":{"type":"html","default":"","display":"Answer Text"},"correct":{"type":"html","default":"That's correct!","display":"Correct Reinforcement"},"incorrect":{"type":"html","default":"Not quite...","display":"Incorrect Reinforcement"},"takeaway":{"type":"html","default":"","display":"Core Message"}},"prompt":{"type":"html","default":"Cross out the incorrect words"},"game":{"timer":{"limit":{"type":"number","default":-1,"display":"Time Limit (ms)"}}}},"examples":[{"title":"This sentence about Product X is correct","prompt":"Cross out the incorrect words","words":[{"incorrect":"incorrect","replaces":"correct"},{"incorrect":"Product Y","replaces":"Product X"}],"answer":{"text":"You can use strike-out to get people thinking about your message."}}]}
});

;require.register("engine/strikeout/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (components, continueBtnText, game, hasNarration, hasPrompt, i18n, prompt, subtitle, undefined) {
if ( game && game.timer && game.timer.limit > 0)
{
buf.push("<div class=\"full-screen\"><div class=\"game-stepper text-lg text-bold\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div></div>");
}
buf.push("<div class=\"full-screen strikeout-canvas-container\"><canvas class=\"strikeout-canvas\"></canvas></div><div class=\"content-fill text-center\"><div class=\"content-fit block-v-lg content-md-fill content-sm-ver strikeout-words\"><div class=\"content-md-ver col-md-10 col-md-offset-1\"><h1 class=\"fade-in\">");
// iterate components
;(function(){
  var $$obj = components;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var word = $$obj[i];

buf.push("<div" + (jade.attr("data-replaces", word.incorrect && word.replaces, true, false)) + (jade.cls(['word',word.incorrect && "word-incorrect"], [null,true])) + "><div" + (jade.cls([word.klass], [true])) + ">" + (null == (jade_interp = word.incorrect || word.replaces) ? "" : jade_interp) + "</div></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var word = $$obj[i];

buf.push("<div" + (jade.attr("data-replaces", word.incorrect && word.replaces, true, false)) + (jade.cls(['word',word.incorrect && "word-incorrect"], [null,true])) + "><div" + (jade.cls([word.klass], [true])) + ">" + (null == (jade_interp = word.incorrect || word.replaces) ? "" : jade_interp) + "</div></div>");
    }

  }
}).call(this);

buf.push("</h1><h3>" + (null == (jade_interp = subtitle) ? "" : jade_interp) + "</h3></div></div></div><div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"components" in locals_for_with?locals_for_with.components:typeof components!=="undefined"?components:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"game" in locals_for_with?locals_for_with.game:typeof game!=="undefined"?game:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"subtitle" in locals_for_with?locals_for_with.subtitle:typeof subtitle!=="undefined"?subtitle:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/strikeout/view.coffee", function(exports, require, module) {
var DraggyView, GameView, SmoothLine, StrikeoutView, convert, dpi, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

GameView = require("views/base/game");

DraggyView = require("views/components/draggy");

SmoothLine = require("lib/draw/smooth-line");

convert = require("lib/convert");

dpi = require("lib/device").dpi;

StrikeoutView = (function(_super) {
  __extends(StrikeoutView, _super);

  function StrikeoutView() {
    _ref = StrikeoutView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  StrikeoutView.prototype.template = require("./template");

  StrikeoutView.prototype.events = function() {
    return {
      "iostap .btn-done": "endGame"
    };
  };

  StrikeoutView.prototype.serialize = function() {
    var component, data, i, incorrect, index, replaces, title, words, _i, _len;
    data = StrikeoutView.__super__.serialize.apply(this, arguments);
    title = data.title, words = data.words;
    if (title == null) {
      title = "";
    }
    title = convert.toText(title);
    words = (function() {
      var _i, _len, _ref1, _results;
      _results = [];
      for (_i = 0, _len = words.length; _i < _len; _i++) {
        _ref1 = words[_i], replaces = _ref1.replaces, incorrect = _ref1.incorrect;
        if (replaces && incorrect) {
          _results.push({
            replaces: convert.toText(replaces),
            incorrect: convert.toText(incorrect)
          });
        }
      }
      return _results;
    })();
    for (i = _i = 0, _len = words.length; _i < _len; i = ++_i) {
      replaces = words[i].replaces;
      title = title.replace(replaces, "{{" + i + "}}");
    }
    data.components = (function() {
      var _j, _len1, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _results;
      _ref1 = title.split(/\s+/);
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        component = _ref1[_j];
        index = +((_ref2 = component.match(/\{\{(\d+)\}\}/)) != null ? _ref2[1] : void 0);
        replaces = ((_ref3 = words[index]) != null ? _ref3.replaces : void 0) ? component.replace(/\{\{\d+\}\}/, (_ref4 = words[index]) != null ? _ref4.replaces : void 0) : component;
        incorrect = ((_ref5 = words[index]) != null ? _ref5.incorrect : void 0) ? component.replace(/\{\{\d+\}\}/, (_ref6 = words[index]) != null ? _ref6.incorrect : void 0) : null;
        _results.push({
          klass: "delay-" + (_.random(3)) + " scale-" + (_.sample(["down", "up"])),
          incorrect: incorrect,
          replaces: replaces
        });
      }
      return _results;
    })();
    return data;
  };

  StrikeoutView.prototype.beforeShow = function() {
    return this.trigger("ui", {
      flexibleHeight: true
    });
  };

  StrikeoutView.prototype.beforeHide = function() {
    return this.trigger("ui", {
      flexibleHeight: false
    });
  };

  StrikeoutView.prototype.show = function() {
    var canvas, el, _base, _base1, _i, _len, _ref1;
    StrikeoutView.__super__.show.apply(this, arguments);
    canvas = this.findOne("canvas");
    this.draggy = new DraggyView({
      el: canvas,
      isParent: true
    });
    this.onResize();
    this.context = (typeof (_base = this.draggy.el).getContext === "function" ? _base.getContext("2d") : void 0) || {};
    this.setEl(this.findAll(".word"), "words");
    this.listenTo(this.draggy, "drag", this.onDrag);
    this.listenTo(this.draggy, "drop", this.onDrop);
    this.listenTo(this, "resize", this.onResize);
    if (typeof (_base1 = this.context).clearRect === "function") {
      _base1.clearRect(0, 0, this.draggy.el.width, this.draggy.el.height);
    }
    _ref1 = this.getEl("words");
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      el = _ref1[_i];
      el.classList.remove("active", "complete");
    }
    this.enterGame();
    return this.guesses = [];
  };

  StrikeoutView.prototype.onResize = function() {
    this.draggy.el.width = this.el.firstChild.offsetWidth * dpi;
    return this.draggy.el.height = this.el.firstChild.offsetHeight * dpi;
  };

  StrikeoutView.prototype.onDrag = function(draggy, isInitial) {
    var _ref1, _ref2;
    if (isInitial) {
      if ((_ref1 = this.line) != null) {
        if ((_ref2 = _ref1.animation) != null) {
          _ref2.cancel();
        }
      }
      this.context.lineCap = "round";
      this.context.globalAlpha = 1;
      this.line = new SmoothLine([], window.getComputedStyle(this.el).color, 4 * dpi);
    }
    return this.addPoint(draggy);
  };

  StrikeoutView.prototype.onDrop = function(draggy, isReset) {
    var avgX, avgY, bounds, buffer, el, isWithin, left, maxX, minX, pts, replaces, selectedWords, top, _fn, _i, _j, _len, _len1, _ref1, _ref2,
      _this = this;
    pts = this.line.getPoints();
    selectedWords = [];
    _ref1 = this.el.firstChild.getBoundingClientRect(), left = _ref1.left, top = _ref1.top;
    avgX = pts.reduce((function(m, n) {
      return m + n.x;
    }), 0) / pts.length / dpi;
    avgY = pts.reduce((function(m, n) {
      return m + n.y;
    }), 0) / pts.length / dpi;
    minX = pts.reduce((function(m, n) {
      if (m > n.x) {
        return n.x;
      } else {
        return m;
      }
    }), Infinity) / dpi;
    maxX = pts.reduce((function(m, n) {
      if (m < n.x) {
        return n.x;
      } else {
        return m;
      }
    }), 0) / dpi;
    _ref2 = this.getEl("words");
    for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
      el = _ref2[_i];
      if (!(!el.classList.contains("active"))) {
        continue;
      }
      bounds = this.getBounds(el, {
        x: -left,
        y: -top
      });
      buffer = 20;
      isWithin = ((minX - buffer < bounds.left && maxX + buffer > bounds.right) || (avgX > bounds.left && avgX < bounds.right)) && avgY > bounds.top && avgY < bounds.bottom;
      el.classList.toggle("active", isWithin);
      if (isWithin) {
        selectedWords.push(el);
      }
      if (isWithin && el.dataset.replaces) {
        this.transform(el, {
          opacity: 0,
          scale: 0.8
        });
      }
    }
    this.line.erase(this.context, function() {
      return _this.context.clearRect(0, 0, _this.draggy.el.width, _this.draggy.el.height);
    });
    _fn = function(el, replaces) {
      return window.setTimeout((function() {
        el.classList.remove("active", "word-incorrect");
        if (replaces != null) {
          el.innerHTML = replaces;
          return _this.transform(el, {
            y: 0,
            opacity: 1
          });
        }
      }), 600);
    };
    for (_j = 0, _len1 = selectedWords.length; _j < _len1; _j++) {
      el = selectedWords[_j];
      this.guesses.push($(el).text());
      replaces = el.dataset.replaces;
      delete el.dataset.replaces;
      _fn(el, replaces);
    }
    return this.setState("touched");
  };

  StrikeoutView.prototype.addPoint = function(_arg) {
    var x, y;
    x = _arg.x, y = _arg.y;
    this.line.add({
      x: x * dpi,
      y: y * dpi
    });
    this.context.clearRect(0, 0, this.draggy.el.width, this.draggy.el.height);
    return this.line.draw(this.context);
  };

  StrikeoutView.prototype.isCorrect = function() {
    var el;
    return ((function() {
      var _i, _len, _ref1, _results;
      _ref1 = this.getEl("words");
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        el = _ref1[_i];
        if (el.dataset.replaces) {
          _results.push(el);
        }
      }
      return _results;
    }).call(this)).length === 0;
  };

  StrikeoutView.prototype.answerDetails = function() {
    var answer, details, idx, isCorrect, q, questionDetails, questions, _i, _len, _ref1;
    questions = ((_ref1 = this.options.metadata) != null ? _ref1.questions : void 0) || [];
    if (!(questions.length > 0)) {
      return [];
    }
    details = [];
    for (_i = 0, _len = questions.length; _i < _len; _i++) {
      q = questions[_i];
      idx = questions.indexOf(q);
      isCorrect = this.isCorrect();
      answer = _.find(q.answers, function(a) {
        return a.correct === isCorrect;
      });
      answer.content = this.guesses[idx];
      answer.type = "text";
      questionDetails = {
        question: q.question,
        answer: answer
      };
      details.push(questionDetails);
    }
    return details;
  };

  StrikeoutView.prototype.endGame = function() {
    var el, _fn, _i, _len, _ref1,
      _this = this;
    StrikeoutView.__super__.endGame.apply(this, arguments);
    _ref1 = this.getEl("words");
    _fn = function(el) {
      return window.setTimeout(function() {
        var replaces;
        replaces = el.dataset.replaces;
        delete el.dataset.replaces;
        el.innerHTML = replaces;
        el.classList.remove("active", "word-incorrect");
        return _this.transform(el, {
          scale: 1,
          opacity: 1
        });
      }, 600);
    };
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      el = _ref1[_i];
      if (!el.dataset.replaces) {
        continue;
      }
      el.classList.add("active");
      this.transform(el, {
        scale: 0.8,
        opacity: 0
      });
      _fn(el);
    }
    return this.submit();
  };

  return StrikeoutView;

})(GameView);

module.exports = StrikeoutView;
});

;require.register("engine/table/model.yaml", function(exports, require, module) {
module.exports = {"title":"table","display":"Table","category":"Content","description":"Display tabular information","features":{"narration":true},"model":{"title":{"type":"html","default":""},"caption":{"type":"html"},"rows":{"min":1,"max":10,"type":[{"help":"To include an empty cell in any row, insert a space (\" \") in that position.\n","cells":{"min":1,"max":5,"type":[{"type":"html"}]}}]},"style":{"header":{"display":"Header Row","type":"boolean","default":true,"help":"Make the first row in the table a header."},"condensed":{"type":"boolean","default":false,"help":"Present more information by condensing the content."},"full-width":{"type":"boolean","default":true,"help":"Stretch the table to the width of the device."}}},"examples":[{"title":"Product Information","style":{"header":true,"condensed":false,"full-width":true},"rows":[{"cells":["Name","Format","Price"]},{"cells":["Product X","Classic","$6.50"]},{"cells":["Product Y","Value Pack","$8.50"]},{"cells":["Product Z","Ultra Slim","$12.00"]}],"caption":"All information is up to date as of March 2016."}]}
});

;require.register("engine/table/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (caption, classes, continueBtnText, hasNarration, hasPrompt, i18n, isNumber, longestRow, prompt, rows, style, title, undefined) {
buf.push("<div class=\"content-fit content-scroll content-ver text-center block-v-md\"><div class=\"content-scroll-inner block-v-md\"><h1 class=\"text-center fade-in\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"table-container\"><div class=\"table-wrapper\"><table" + (jade.cls(['table','slide-up',classes], [null,null,true])) + "><tbody>");
// iterate rows
;(function(){
  var $$obj = rows;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var row = $$obj[i];

buf.push("<tr class=\"table-row\">");
// iterate longestRow.cells
;(function(){
  var $$obj = longestRow.cells;
  if ('number' == typeof $$obj.length) {

    for (var col = 0, $$l = $$obj.length; col < $$l; col++) {
      var n = $$obj[col];

var el = row.cells[col] || ""
if ( style.header && i === 0)
{
buf.push("<th class=\"table-cell\">" + (null == (jade_interp = el) ? "" : jade_interp) + "</th>");
}
else
{
buf.push("<td" + (jade.attr("align", isNumber(el) && "right", true, false)) + " class=\"table-cell\"><div" + (jade.cls(['slide-up',"delay-" + (i) + ""], [null,true])) + ">" + (null == (jade_interp = el) ? "" : jade_interp) + "</div></td>");
}
    }

  } else {
    var $$l = 0;
    for (var col in $$obj) {
      $$l++;      var n = $$obj[col];

var el = row.cells[col] || ""
if ( style.header && i === 0)
{
buf.push("<th class=\"table-cell\">" + (null == (jade_interp = el) ? "" : jade_interp) + "</th>");
}
else
{
buf.push("<td" + (jade.attr("align", isNumber(el) && "right", true, false)) + " class=\"table-cell\"><div" + (jade.cls(['slide-up',"delay-" + (i) + ""], [null,true])) + ">" + (null == (jade_interp = el) ? "" : jade_interp) + "</div></td>");
}
    }

  }
}).call(this);

buf.push("</tr>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var row = $$obj[i];

buf.push("<tr class=\"table-row\">");
// iterate longestRow.cells
;(function(){
  var $$obj = longestRow.cells;
  if ('number' == typeof $$obj.length) {

    for (var col = 0, $$l = $$obj.length; col < $$l; col++) {
      var n = $$obj[col];

var el = row.cells[col] || ""
if ( style.header && i === 0)
{
buf.push("<th class=\"table-cell\">" + (null == (jade_interp = el) ? "" : jade_interp) + "</th>");
}
else
{
buf.push("<td" + (jade.attr("align", isNumber(el) && "right", true, false)) + " class=\"table-cell\"><div" + (jade.cls(['slide-up',"delay-" + (i) + ""], [null,true])) + ">" + (null == (jade_interp = el) ? "" : jade_interp) + "</div></td>");
}
    }

  } else {
    var $$l = 0;
    for (var col in $$obj) {
      $$l++;      var n = $$obj[col];

var el = row.cells[col] || ""
if ( style.header && i === 0)
{
buf.push("<th class=\"table-cell\">" + (null == (jade_interp = el) ? "" : jade_interp) + "</th>");
}
else
{
buf.push("<td" + (jade.attr("align", isNumber(el) && "right", true, false)) + " class=\"table-cell\"><div" + (jade.cls(['slide-up',"delay-" + (i) + ""], [null,true])) + ">" + (null == (jade_interp = el) ? "" : jade_interp) + "</div></td>");
}
    }

  }
}).call(this);

buf.push("</tr>");
    }

  }
}).call(this);

if ( caption)
{
buf.push("<tr class=\"table-row\"><td" + (jade.attr("colspan", longestRow.cells.length, true, false)) + " align=\"center\" class=\"table-cell\"><small>" + (null == (jade_interp = caption) ? "" : jade_interp) + "</small></td></tr>");
}
buf.push("</tbody></table></div></div></div></div><div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"caption" in locals_for_with?locals_for_with.caption:typeof caption!=="undefined"?caption:undefined,"classes" in locals_for_with?locals_for_with.classes:typeof classes!=="undefined"?classes:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"isNumber" in locals_for_with?locals_for_with.isNumber:typeof isNumber!=="undefined"?isNumber:undefined,"longestRow" in locals_for_with?locals_for_with.longestRow:typeof longestRow!=="undefined"?longestRow:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"rows" in locals_for_with?locals_for_with.rows:typeof rows!=="undefined"?rows:undefined,"style" in locals_for_with?locals_for_with.style:typeof style!=="undefined"?style:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/table/view.coffee", function(exports, require, module) {
var SlideView, TableView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SlideView = require("views/slide");

TableView = (function(_super) {
  __extends(TableView, _super);

  function TableView() {
    _ref = TableView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  TableView.prototype.template = require("./template");

  TableView.prototype.events = function() {
    return {
      "iostap .btn-done": "submit"
    };
  };

  TableView.prototype.serialize = function() {
    var data;
    data = TableView.__super__.serialize.apply(this, arguments);
    data.isNumber = function(el) {
      return /^[\.\,\d\$£€\%\-\s]+$/.test(el);
    };
    data.longestRow = _.max(data.rows, function(r) {
      return r.cells.length;
    });
    data.classes = _.chain(data.style).omit("scrollable", "header").reduce((function(str, v, k) {
      if (v) {
        return str + (" table-" + k);
      } else {
        return str;
      }
    }), "").value();
    return data;
  };

  TableView.prototype.beforeShow = function() {
    var parent, table;
    this.trigger("ui", {
      flexibleHeight: true
    });
    table = this.findOne(".table");
    parent = table.parentNode;
    if (table.offsetWidth > parent.offsetWidth) {
      this.setState(true, "scroll");
      parent.addEventListener("scroll", _.bind(this.onScroll, this));
      return this.onScroll({
        target: parent
      });
    } else {
      return this.setState(false, "scroll");
    }
  };

  TableView.prototype.beforeHide = function() {
    return this.trigger("ui", {
      flexibleHeight: false
    });
  };

  TableView.prototype.onRefresh = function() {
    return this.beforeShow();
  };

  TableView.prototype.onScroll = function(e) {
    var el;
    el = e.target;
    if (el.scrollLeft <= 0) {
      return this.setState("left", "scroll-pos");
    } else if (el.scrollLeft >= el.scrollWidth - el.offsetWidth) {
      return this.setState("right", "scroll-pos");
    } else {
      return this.setState("between", "scroll-pos");
    }
  };

  return TableView;

})(SlideView);

module.exports = TableView;
});

;require.register("engine/tap-in-order/model.yaml", function(exports, require, module) {
module.exports = {"title":"tap-in-order","display":"Select in Order","category":"Relationships","features":{"stars":true},"model":{"title":{"type":"html","default":""},"list":{"display":"List items","type":[{"type":"image"}],"min":2,"max":6},"reject":{"type":"boolean","default":false,"display":"Reject Answers","help":"Rejects answers tapped out of order.\n"},"answer":{"text":{"type":"html","default":"","display":"Answer Text"},"correct":{"type":"html","default":"That's correct!","display":"Correct Reinforcement"},"incorrect":{"type":"html","default":"Not quite...","display":"Incorrect Reinforcement"},"takeaway":{"type":"html","default":"","display":"Core Message"}},"prompt":{"type":"html","default":"Select each item in order"},"game":{"timer":{"limit":{"type":"number","default":-1,"display":"Time Limit (ms)"}}}},"examples":[{"title":"Select in order","reject":false,"list":["img/examples/product-1.png","img/examples/product-2.png","img/examples/product-3.png"],"answer":{"incorrect":"Not quite...","correct":"That's correct!","text":"X, Y, then Z is the correct order.\n"}}]}
});

;require.register("engine/tap-in-order/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (continueBtnText, dimensions, game, hasNarration, hasPrompt, i18n, prompt, tappies, title, undefined) {
if ( game && game.timer && game.timer.limit > 0)
{
buf.push("<div class=\"full-screen\"><div class=\"game-stepper text-lg text-bold\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div></div>");
}
buf.push("<div class=\"slide-parent content-fill text-center block-v-md\"><div class=\"tappies-parent content-fill\"><div class=\"content-sm-ver content-md-ver content-lg-fill row\"><div class=\"title col-sm-12 col-lg-5 content-lg-ver block-v-md\"><h1 class=\"fade-in delay-3\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1></div><div class=\"col-sm-12 col-lg-7 content-lg-ver tappies\"><div class=\"row content-fill\">");
// iterate tappies
;(function(){
  var $$obj = tappies;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var tappy = $$obj[i];

buf.push("<div" + (jade.attr("data-true-index", tappy.trueIndex, true, false)) + (jade.attr("data-original-index", i, true, false)) + (jade.attr("data-content", tappy.image, true, false)) + (jade.attr("style", "height: " + (dimensions.height) + "; width: " + (dimensions.width) + "", true, false)) + (jade.cls(['tappy','block-md','delay-4','col-lg-12','col-sm-12','block-box-sizing',(i % 2 === 0 ? "slide-right" : "slide-left")], [null,null,null,null,null,null,true])) + "><div class=\"block-dk tappy-child content-fill\"><div class=\"content-fill block-v-md\">");
if ( tappy.image)
{
buf.push("<img" + (jade.attr("src", tappy.image, true, false)) + " class=\"img content-ver\"/>");
}
buf.push("</div><div class=\"number-container text-lg\"><div" + (jade.attr("data-true-index", tappy.trueIndex, true, false)) + (jade.attr("data-original-index", i, true, false)) + " class=\"number block-dk text-bold\"></div></div></div></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var tappy = $$obj[i];

buf.push("<div" + (jade.attr("data-true-index", tappy.trueIndex, true, false)) + (jade.attr("data-original-index", i, true, false)) + (jade.attr("data-content", tappy.image, true, false)) + (jade.attr("style", "height: " + (dimensions.height) + "; width: " + (dimensions.width) + "", true, false)) + (jade.cls(['tappy','block-md','delay-4','col-lg-12','col-sm-12','block-box-sizing',(i % 2 === 0 ? "slide-right" : "slide-left")], [null,null,null,null,null,null,true])) + "><div class=\"block-dk tappy-child content-fill\"><div class=\"content-fill block-v-md\">");
if ( tappy.image)
{
buf.push("<img" + (jade.attr("src", tappy.image, true, false)) + " class=\"img content-ver\"/>");
}
buf.push("</div><div class=\"number-container text-lg\"><div" + (jade.attr("data-true-index", tappy.trueIndex, true, false)) + (jade.attr("data-original-index", i, true, false)) + " class=\"number block-dk text-bold\"></div></div></div></div>");
    }

  }
}).call(this);

buf.push("</div></div></div></div></div><div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"dimensions" in locals_for_with?locals_for_with.dimensions:typeof dimensions!=="undefined"?dimensions:undefined,"game" in locals_for_with?locals_for_with.game:typeof game!=="undefined"?game:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"tappies" in locals_for_with?locals_for_with.tappies:typeof tappies!=="undefined"?tappies:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/tap-in-order/view.coffee", function(exports, require, module) {
var Device, GameView, TapInOrderView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

GameView = require("views/base/game");

Device = require("lib/device");

TapInOrderView = (function(_super) {
  __extends(TapInOrderView, _super);

  function TapInOrderView() {
    _ref = TapInOrderView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  TapInOrderView.prototype.template = require("./template");

  TapInOrderView.prototype.events = function() {
    return {
      "iostap .tappy": "tappyTouch",
      "iostap .btn-done": "endGame"
    };
  };

  TapInOrderView.prototype.serialize = function() {
    var data, length, useGrid;
    data = TapInOrderView.__super__.serialize.apply(this, arguments);
    data.tappies = _.chain(data.list).filter(function(el) {
      return el;
    }).map(function(el, i) {
      return {
        image: el,
        trueIndex: i
      };
    }).shuffle().value();
    length = data.tappies.length;
    useGrid = length >= 4;
    data.dimensions = {
      width: "" + (useGrid ? 50 : 100) + "%",
      height: "" + (100 / (useGrid ? (length + length % 2) / 2 : length)) + "%"
    };
    return data;
  };

  TapInOrderView.prototype.show = function() {
    TapInOrderView.__super__.show.apply(this, arguments);
    this.rejectIncorrectAnswer();
    this.initTapState();
    this.setEl(this.findOne(".tappies-parent"), "tappiesParent");
    this.setEl(this.findAll(".tappy"), "tappies");
    this.setEl(this.findOne(".title"), "title");
    this.setEl(this.findAll(".number"), "numbers");
    this.refreshTappy();
    return this.enterGame();
  };

  TapInOrderView.prototype.onResize = function() {
    return this.setTappyHeight();
  };

  TapInOrderView.prototype.refreshTappy = function() {
    var el, i, _i, _len, _ref1;
    _ref1 = this.getEl("tappies");
    for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
      el = _ref1[i];
      el.classList.add("no-delay");
    }
    this.listenTo(this, "resize", this.onResize);
    return this.setTappyHeight();
  };

  TapInOrderView.prototype.onRefresh = function() {
    TapInOrderView.__super__.onRefresh.apply(this, arguments);
    return this.fillTaps();
  };

  TapInOrderView.prototype.rejectIncorrectAnswer = function() {
    return this.reject = this.options.data.reject;
  };

  TapInOrderView.prototype.setTappyHeight = function() {
    var height, parent;
    parent = this.getEl("tappiesParent");
    height = parent.offsetHeight;
    if (Device.breakpoint(["xs", "sm"])) {
      height -= this.getEl("title").offsetHeight;
    }
    return this.getEl("tappies").item(0).parentNode.style.height = "" + height + "px";
  };

  TapInOrderView.prototype.initTapState = function() {
    return this.tapsSoFar = [];
  };

  TapInOrderView.prototype.isCorrectSoFar = function() {
    var orderReducer;
    orderReducer = function(order, tap, i) {
      return order && tap === i.toString();
    };
    return this.tapsSoFar.reduce(orderReducer, true);
  };

  TapInOrderView.prototype.isCorrect = function() {
    if (this.tapsSoFar == null) {
      this.initTapState();
    }
    return this.isCorrectSoFar() && this.tapsSoFar.length === this.options.data.list.length;
  };

  TapInOrderView.prototype.fillTap = function(num) {
    var arrayPos, parent;
    parent = num.parentNode.parentNode.parentNode;
    arrayPos = this.tapsSoFar.indexOf(num.dataset.trueIndex);
    if (arrayPos > -1) {
      num.innerHTML = arrayPos + 1;
      parent.classList.add("active");
      return parent.dataset.filledIndex = arrayPos;
    } else {
      num.innerHTML = "";
      parent.classList.remove("active");
      return parent.dataset.filledIndex = "";
    }
  };

  TapInOrderView.prototype.fillTaps = function() {
    var i, num, _i, _len, _ref1, _results;
    _ref1 = this.getEl("numbers");
    _results = [];
    for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
      num = _ref1[i];
      _results.push(this.fillTap(num));
    }
    return _results;
  };

  TapInOrderView.prototype.showAnswer = function() {
    var el, i, _i, _len, _ref1, _results;
    if (this.isCorrect()) {
      this.el.classList.add("correct-" + (this.isCorrect()));
      return this.el.classList.remove("correct-" + (!this.isCorrect()));
    } else {
      _ref1 = this.getEl("tappies");
      _results = [];
      for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
        el = _ref1[i];
        if (el.dataset.filledIndex !== el.dataset.trueIndex) {
          _results.push(el.classList.add("incorrect"));
        } else {
          _results.push(el.classList.remove("incorrect"));
        }
      }
      return _results;
    }
  };

  TapInOrderView.prototype.keepTapsBefore = function(index) {
    var indexOfTap;
    indexOfTap = this.tapsSoFar.indexOf(index);
    if (indexOfTap > 0) {
      if (indexOfTap > -1) {
        return this.tapsSoFar = this.tapsSoFar.slice(0, indexOfTap);
      }
    } else if (indexOfTap === 0) {
      return this.tapsSoFar = [];
    }
  };

  TapInOrderView.prototype.onRejected = function(e) {
    var _this = this;
    this.currentTappy.classList.add("incorrect");
    return window.setTimeout((function() {
      return _this.currentTappy.classList.remove("incorrect");
    }), 400);
  };

  TapInOrderView.prototype.tappyTouch = function(e) {
    var alreadyTapped, touchedIndex, touchedOrigIndex;
    this.currentTappy = e.currentTarget;
    touchedIndex = e.currentTarget.dataset.trueIndex;
    touchedOrigIndex = e.currentTarget.dataset.originalIndex;
    alreadyTapped = this.tapsSoFar.indexOf(touchedIndex) !== -1;
    if (alreadyTapped) {
      this.keepTapsBefore(touchedIndex);
    } else {
      this.tapsSoFar.push(touchedIndex);
    }
    if (this.isCorrectSoFar() || !this.reject) {
      this.fillTaps(this.getEl("numbers")[e.currentTarget.dataset.originalIndex]);
    } else {
      this.keepTapsBefore(touchedIndex);
      if (this.reject) {
        this.onRejected();
      }
    }
    return this.setState("touched");
  };

  TapInOrderView.prototype.answerDetails = function() {
    var answer, answerContent, answerElements, details, isCorrect, question, questions, _ref1,
      _this = this;
    questions = ((_ref1 = this.options.metadata) != null ? _ref1.questions : void 0) || [];
    if (!(questions.length > 0)) {
      return [];
    }
    question = questions[0];
    isCorrect = this.isCorrect();
    answer = _.find(question.answers, function(a) {
      return a.correct === isCorrect;
    });
    answerElements = _.map(this.tapsSoFar, function(idx) {
      return _.find(_this.getEl("tappies"), function(tappy) {
        return this.$(tappy).data("true-index") === Number(idx);
      });
    });
    answerContent = _.map(answerElements, function(el) {
      return this.$(el).data("content");
    });
    answer.content = answerContent.join(", ");
    details = {
      question: questions[0].question,
      answer: answer
    };
    return [details];
  };

  TapInOrderView.prototype.endGame = function() {
    TapInOrderView.__super__.endGame.apply(this, arguments);
    return this.submit();
  };

  return TapInOrderView;

})(GameView);

module.exports = TapInOrderView;
});

;require.register("engine/text-and-images/model.yaml", function(exports, require, module) {
module.exports = {"title":"text-and-images","display":"Text And Images","category":"Content","description":"Display rich content and images.","visible":false,"features":{"narration":true},"model":{"title":{"type":"html"},"content":{"min":1,"max":10,"type":[{"text":{"type":"html"},"image":{"type":"image","display":"Image"}}]},"prompt":{"type":"html","default":"Scroll to see more"}},"examples":[{"title":"About Product Z","content":[{"text":"Product Z is our third product in the Product line. It is three times as good as product X, but only takes up one third of the space. Don't believe us? See below:\n","image":"img/examples/product-3.png"},{"text":"Review the following interactive slides to learn more about Product Z.\n"}]}]}
});

;require.register("engine/text-and-images/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (content, continueBtnText, hasNarration, hasPrompt, i18n, prompt, title, undefined) {
buf.push("<div class=\"content-md content-fill\"><div class=\"content-scroll content-sm-scroll content-md-scroll block-v-lg fade-in\"><div class=\"content-scroll-inner hide-overflow block-h-xl\"><div class=\"row\"><div class=\"col-sm-12 col-lg-10 col-lg-offset-1\"><h1 class=\"text-center slide-down\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1>");
// iterate content
;(function(){
  var $$obj = content;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var item = $$obj[i];

buf.push("<div" + (jade.cls(['fade-in',"delay-" + (i + 1) + ""], [null,true])) + ">");
if ( item.text)
{
buf.push("<div class=\"text-md\">" + (null == (jade_interp = item.text) ? "" : jade_interp) + "</div>");
}
if ( item.image)
{
buf.push("<p class=\"text-center block-v-md\"><img" + (jade.attr("src", item.image, true, false)) + " class=\"scrollable-image\"/></p>");
}
buf.push("</div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var item = $$obj[i];

buf.push("<div" + (jade.cls(['fade-in',"delay-" + (i + 1) + ""], [null,true])) + ">");
if ( item.text)
{
buf.push("<div class=\"text-md\">" + (null == (jade_interp = item.text) ? "" : jade_interp) + "</div>");
}
if ( item.image)
{
buf.push("<p class=\"text-center block-v-md\"><img" + (jade.attr("src", item.image, true, false)) + " class=\"scrollable-image\"/></p>");
}
buf.push("</div>");
    }

  }
}).call(this);

buf.push("</div></div></div></div></div><div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"content" in locals_for_with?locals_for_with.content:typeof content!=="undefined"?content:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/text-and-images/view.coffee", function(exports, require, module) {
var ScrollingMediaView, TextAndImagesView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

ScrollingMediaView = require("../scrolling-media/view");

TextAndImagesView = (function(_super) {
  __extends(TextAndImagesView, _super);

  function TextAndImagesView() {
    _ref = TextAndImagesView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  TextAndImagesView.prototype.serialize = function() {
    var content, data, image, text, _i, _len, _ref1, _ref2;
    data = TextAndImagesView.__super__.serialize.apply(this, arguments);
    content = [];
    _ref1 = data.content;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      _ref2 = _ref1[_i], text = _ref2.text, image = _ref2.image;
      if (text) {
        if (!/^<p>/.test(text)) {
          text = written.wrapInTag(text, "p");
        }
        content.push({
          content: text,
          contentType: "text"
        });
      }
      if (image) {
        content.push({
          content: image,
          contentType: "image"
        });
      }
    }
    data.content = content;
    return data;
  };

  return TextAndImagesView;

})(ScrollingMediaView);

module.exports = TextAndImagesView;
});

;require.register("engine/text-sequence/model.yaml", function(exports, require, module) {
module.exports = {"title":"text-sequence","display":"Text Sequence","category":"Content","links":{"academy":"https://academy.edapp.com/how-to-text-sequence-template/"},"features":{"narration":true},"description":"Display a sequence of text","model":{"title":{"type":"html","default":""},"content":{"min":1,"max":32,"type":[{"type":"html","default":""}]},"prompt":{"type":"html","default":"Read more"},"label":{"type":"html","default":"Step","help":"The label of each step in the sequence. eg. “Step 1 of 4”"},"canGoBack":{"type":"boolean","default":false,"display":"Allow Free Navigation","help":"Let users return to previous steps by tapping or clicking on them.\n"}},"examples":[{"title":"About Product Y","stepTitle":"Step","canGoBack":true,"content":["Product Y builds on everything our customers loved about Product X","It is the focus of the upcoming sales cycle","You should mention Product Y to existing customers who enjoy Product X","Product Y will have a discounted price at launch"]}]}
});

;require.register("engine/text-sequence/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (canGoBack, content, continueBtnText, hasNarration, hasPrompt, i18n, prompt, title, undefined) {
buf.push("<div class=\"steps-container content-fill\"><div class=\"steps text-center\">");
if ( title)
{
buf.push("<h1 data-step='0' class=\"tight block-v-md fade-in delay-3\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1>");
}
// iterate content
;(function(){
  var $$obj = content;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var item = $$obj[i];

buf.push("<h2" + (jade.attr("data-step", i + 1, true, false)) + " class=\"step fade-in tight block-v-md\">" + (null == (jade_interp = item) ? "" : jade_interp) + "</h2>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var item = $$obj[i];

buf.push("<h2" + (jade.attr("data-step", i + 1, true, false)) + " class=\"step fade-in tight block-v-md\">" + (null == (jade_interp = item) ? "" : jade_interp) + "</h2>");
    }

  }
}).call(this);

buf.push("</div>");
if ( content.length > 1)
{
if ( canGoBack)
{
buf.push("<div class=\"btn btn-muted btn-circular btn-up\"><span class=\"icon icon-chevron-up text-xl\"></span></div>");
}
buf.push("<div class=\"btn btn-muted btn-circular btn-down\"><span class=\"icon icon-chevron-down text-xl\"></span></div>");
}
buf.push("</div><div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"canGoBack" in locals_for_with?locals_for_with.canGoBack:typeof canGoBack!=="undefined"?canGoBack:undefined,"content" in locals_for_with?locals_for_with.content:typeof content!=="undefined"?content:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/text-sequence/view.coffee", function(exports, require, module) {
var SlideView, TextSequenceView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SlideView = require("views/slide");

TextSequenceView = (function(_super) {
  __extends(TextSequenceView, _super);

  function TextSequenceView() {
    _ref = TextSequenceView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  TextSequenceView.prototype.template = require("./template");

  TextSequenceView.prototype.events = function() {
    return {
      "iostap": "onTap",
      "iostap .btn-done": "submit"
    };
  };

  TextSequenceView.prototype.serialize = function() {
    var data;
    data = TextSequenceView.__super__.serialize.apply(this, arguments);
    data.content = _.compact(data.content);
    data.hasPrompt = true;
    return data;
  };

  TextSequenceView.prototype.beforeHide = function() {
    return this.trigger("ui", {
      flexibleHeight: false
    });
  };

  TextSequenceView.prototype.beforeShow = function(preventTransition) {
    var child, i, _i, _len, _ref1;
    this.trigger("ui", {
      flexibleHeight: true
    });
    this.setEl(this.findOne(".steps"), "steps");
    this.setEl(this.findOne(".slide-footer-prompt"), "prompt");
    this.setEl(this.findOne(".btn-up"), "btn-up");
    this.setEl(this.findOne(".btn-down"), "btn-down");
    _ref1 = this.getEl("steps").children;
    for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
      child = _ref1[i];
      child.classList.remove("active");
      this.transform(child, {
        opacity: "",
        transition: ""
      });
    }
    if (!this.getEl("steps")) {
      return;
    }
    this.transition(this.getEl("steps"), preventTransition ? "none" : "all 300ms");
    this.currentIndex = 0;
    this.totalLength = this.getEl("steps").children.length;
    return this.showNextStep(true);
  };

  TextSequenceView.prototype.onTap = function(e) {
    var _ref1;
    if (((_ref1 = e.detail) != null ? _ref1.clientY : void 0) < this.el.offsetHeight / 2 && this.currentIndex > 0 && this.options.data.canGoBack) {
      this.currentIndex--;
      return this.showNextStep();
    } else if (this.currentIndex < this.totalLength - 1) {
      this.currentIndex++;
      this.showNextStep();
      if (this.currentIndex === this.totalLength - 1) {
        return this.setState("touched");
      }
    }
  };

  TextSequenceView.prototype.showNextStep = function(withoutPrompt) {
    this.transformSteps();
    if (!withoutPrompt) {
      return this.setPrompt();
    }
  };

  TextSequenceView.prototype.transformSteps = function() {
    var child, i, step, steps, y, _i, _len;
    steps = this.getEl("steps").children;
    step = steps[this.currentIndex];
    step.classList.add("active");
    y = this.el.offsetHeight / 2 - (step.offsetTop + step.offsetHeight / 2);
    this.getEl("btn-up").style.opacity = this.currentIndex / (this.totalLength - 1);
    this.getEl("btn-down").style.opacity = 1 - this.currentIndex / (this.totalLength - 1);
    if (y < -this.getEl("steps").firstChild.offsetHeight / 2) {
      this.trigger("scroll", null, "middle");
    } else {
      this.trigger("scroll", null, "top");
    }
    for (i = _i = 0, _len = steps.length; _i < _len; i = ++_i) {
      child = steps[i];
      this.transform(child, {
        transition: "all 900ms",
        opacity: i <= this.currentIndex ? 1 - (this.currentIndex - i) / this.totalLength : 0
      });
    }
    return this.transform(this.getEl("steps"), {
      y: y
    });
  };

  TextSequenceView.prototype.setPrompt = function() {
    var index;
    index = this.currentIndex;
    if (!this.options.data.title) {
      index += 1;
    }
    return this.getEl("prompt").innerHTML = index > 0 || !this.options.data.title ? "" + this.options.data.label + " " + index + " of " + this.totalLength : this.options.data.prompt;
  };

  TextSequenceView.prototype.refresh = function(params) {
    var changed, i, item, _i, _len, _ref1,
      _this = this;
    _ref1 = params.data.content;
    for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
      item = _ref1[i];
      if (content && this.options.data.content[i] !== item) {
        changed = i;
      }
    }
    if (params.data.title !== this.options.data.title) {
      changed = -1;
    }
    TextSequenceView.__super__.refresh.apply(this, arguments);
    if (changed != null) {
      this.beforeShow(true);
      this.el.classList.add("no-transition");
      while (this.currentIndex <= changed) {
        this.onTap();
      }
      return window.setTimeout((function() {
        _this.transition(_this.getEl("steps"), "all 300ms");
        return _this.el.classList.remove("no-transition");
      }), 1);
    } else {
      return this.beforeShow();
    }
  };

  return TextSequenceView;

})(SlideView);

module.exports = TextSequenceView;
});

;require.register("engine/title/model.yaml", function(exports, require, module) {
module.exports = {"title":"title","display":"Title Slide","category":"Content","features":{"narration":true},"description":"Introduce your lesson","model":{"title":{"type":"html","default":"A title slide"},"subtitle":{"type":"html","default":"An optional subtitle","required":false},"buttonText":{"type":"html","display":"Button text","default":"OK, let's go!"},"exitButton":{"type":"boolean","default":true,"display":"Exit Button","help":"Give users the option to leave the lesson from this slide."}}}
});

;require.register("engine/title/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (buttonText, config, continueBtnText, hasNarration, hasPrompt, i18n, prompt, subtitle, title) {
buf.push("<div class=\"content-scroll content-fit content-ver text-center block-v-md\"><div class=\"content-scroll-inner\"><div class=\"block-v-md\"><h1 class=\"slide-up\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1>");
if ( subtitle)
{
buf.push("<div class=\"slide-up delay-1 text-md\">" + (null == (jade_interp = subtitle) ? "" : jade_interp) + "</div>");
}
buf.push("</div><div class=\"block-v-md\"><div class=\"btn btn-solid btn-next slide-up delay-2\">" + (null == (jade_interp = buttonText) ? "" : jade_interp) + "</div></div></div></div>");
if ( !config.webAccess)
{
buf.push("<div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");
}}.call(this,"buttonText" in locals_for_with?locals_for_with.buttonText:typeof buttonText!=="undefined"?buttonText:undefined,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"subtitle" in locals_for_with?locals_for_with.subtitle:typeof subtitle!=="undefined"?subtitle:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/title/view.coffee", function(exports, require, module) {
var SlideView, TitleView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SlideView = require("views/slide");

TitleView = (function(_super) {
  __extends(TitleView, _super);

  function TitleView() {
    _ref = TitleView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  TitleView.prototype.template = require("./template");

  TitleView.prototype.serialize = function() {
    var data;
    data = TitleView.__super__.serialize.apply(this, arguments);
    data.continueBtnText = i18n("buttons.close-lesson");
    data.hasPrompt = this.options.scorm || !data.exitButton;
    return data;
  };

  TitleView.prototype.events = function() {
    return {
      "iostap .btn-next": "next",
      "iostap .btn-done": "exit"
    };
  };

  TitleView.prototype.beforeShow = function() {
    return this.trigger("ui", {
      flexibleHeight: true
    });
  };

  TitleView.prototype.beforeHide = function() {
    return this.trigger("ui", {
      flexibleHeight: false
    });
  };

  return TitleView;

})(SlideView);

module.exports = TitleView;
});

;require.register("engine/url/model.yaml", function(exports, require, module) {
module.exports = {"title":"url","display":"External URL","category":"Advanced","description":"Display a webpage within your lesson","model":{"url":{"type":"text","display":"URL","transform":false,"help":"Include the full URL that points to your content. eg. https://edapp.com/\n"},"button":{"text":{"type":"text"},"position":{"type":"select","enum":["Below","Overlay Bottom","Overlay Top"],"default":"Below","help":"Choose the best position based on your content.\n"}},"background":{"type":"html","default":"","display":"Background Color","help":"This color (eg. \"orange\", \"#f90\", \"rgb(255,160,0)\") will be used for the background of the entire screen in lightbox mode.\n"}}}
});

;require.register("engine/url/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (button, i18n, url) {
buf.push("<div class=\"full-screen content-fill hide-overflow\"><iframe" + (jade.attr("src", url, true, false)) + " type=\"text/html\" frameborder=\"0\" sandbox=\"allow-scripts allow-same-origin\" class=\"url-object\"></iframe><div class=\"exit-btn btn\">" + (jade.escape(null == (jade_interp = (button && button.text) || i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");}.call(this,"button" in locals_for_with?locals_for_with.button:typeof button!=="undefined"?button:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"url" in locals_for_with?locals_for_with.url:typeof url!=="undefined"?url:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/url/view.coffee", function(exports, require, module) {
var Lesson, ScormAttempt, Session, SlideView, URLView, _ref, _ref1,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SlideView = require("views/slide");

ScormAttempt = require("models/scormAttempt");

_ref = Application.actions(), Session = _ref.Session, Lesson = _ref.Lesson;

URLView = (function(_super) {
  __extends(URLView, _super);

  function URLView() {
    _ref1 = URLView.__super__.constructor.apply(this, arguments);
    return _ref1;
  }

  URLView.prototype.template = require("./template");

  URLView.prototype.events = function() {
    return {
      "iostap .exit-btn": "submit"
    };
  };

  URLView.prototype.beforeShow = function() {
    var position, _ref2, _ref3;
    position = ((_ref2 = this.options.data.button) != null ? (_ref3 = _ref2.position) != null ? _ref3.toLowerCase() : void 0 : void 0) || "below";
    this.setState(written.hyphenCase(position), "exit-btn");
    this.trigger("ui", {
      lightbox: this.options.data.background || true,
      flexible: true,
      fullscreen: true
    });
    return this.onResize();
  };

  URLView.prototype.beforeHide = function() {
    return this.trigger("ui", {
      lightbox: false,
      flexible: false,
      fullscreen: false
    });
  };

  URLView.prototype.show = function() {
    return this.listenTo(this, "resize", this.onResize);
  };

  URLView.prototype.onRefresh = function() {
    this.beforeShow();
    return URLView.__super__.onRefresh.apply(this, arguments);
  };

  URLView.prototype.onResize = function() {
    var button, iframe;
    if (this.currentState["exit-btn"] === "below") {
      button = this.findOne(".exit-btn");
      iframe = this.findOne(".url-object");
      iframe.style.bottom = "" + button.offsetHeight + "px";
      return iframe.style.height = "" + (iframe.parentNode.offsetHeight - button.offsetHeight) + "px";
    }
  };

  return URLView;

})(SlideView);

module.exports = URLView;
});

;require.register("engine/video-collection/model.yaml", function(exports, require, module) {
module.exports = {"title":"video-collection","display":"Video Collection","category":"Content","description":"Tap to view video","model":{"title":{"type":"html"},"videos":{"type":[{"url":{"type":"video","display":"Video"},"thumbnail":{"type":"image","help":"Recommended size • 600 × 200px"},"title":{"type":"html"}}],"min":2,"max":6},"prompt":{"type":"text","default":"Tap to view each video"},"stream":{"type":"boolean","default":true,"display":"Play on Demand","help":"Play this video on demand instead of downloading all at once. This is recommended for longer videos.\n"}},"examples":[{"title":"Video Collection","videos":[{"url":"video/example.mp4","thumbnail":"img/examples/product-1.png","title":"Product X"},{"url":"video/example.mp4","thumbnail":"img/examples/product-2.png","title":"Product Y"}]}]}
});

;require.register("engine/video-collection/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (config, continueBtnText, hasNarration, hasPrompt, i18n, prompt, title, undefined, videos) {
buf.push("<div class=\"tappies-parent block-v-lg content-fill text-center\"><div class=\"thumbnail-collection content-fill clearfix\"><div class=\"content\"><h1 class=\"title slide-down delay-3 tight block-v-md\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"tappies row\">");
// iterate videos
;(function(){
  var $$obj = videos;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var video = $$obj[i];

var double = "col-sm-6";
var single = "col-md-8 col-md-offset-2 col-sm-12";
buf.push("<div" + (jade.attr("data-index", i, true, false)) + (jade.cls(['tappy','slide-up','block-v-sm','block-box-sizing',"delay-" + (i + 1) + " " + (videos.length >= 4 ? double : single) + ""], [null,null,null,null,true])) + "><div" + (jade.attr("style", (
                video.thumbnail && "background-image:url(" + (video.thumbnail) + ")"
              ), true, false)) + (jade.cls(['tappy-child','block-dk',(video.thumbnail && video.title) ? "dark" : ""], [null,null,true])) + ">");
if ( video.title)
{
buf.push("<div class=\"thumb-content text-lg text-bold block-md block-box-sizing\">" + (null == (jade_interp = video.title) ? "" : jade_interp) + "</div>");
}
buf.push("</div></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var video = $$obj[i];

var double = "col-sm-6";
var single = "col-md-8 col-md-offset-2 col-sm-12";
buf.push("<div" + (jade.attr("data-index", i, true, false)) + (jade.cls(['tappy','slide-up','block-v-sm','block-box-sizing',"delay-" + (i + 1) + " " + (videos.length >= 4 ? double : single) + ""], [null,null,null,null,true])) + "><div" + (jade.attr("style", (
                video.thumbnail && "background-image:url(" + (video.thumbnail) + ")"
              ), true, false)) + (jade.cls(['tappy-child','block-dk',(video.thumbnail && video.title) ? "dark" : ""], [null,null,true])) + ">");
if ( video.title)
{
buf.push("<div class=\"thumb-content text-lg text-bold block-md block-box-sizing\">" + (null == (jade_interp = video.title) ? "" : jade_interp) + "</div>");
}
buf.push("</div></div>");
    }

  }
}).call(this);

buf.push("</div></div></div></div>");
// iterate videos
;(function(){
  var $$obj = videos;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var video = $$obj[i];

buf.push("<div class=\"video-details content-fill\"><div class=\"full-screen\"><span class=\"exit-video block-md icon icon-close text-xl\"></span></div><div class=\"full-screen video-container\"><video webkit-playsinline=\"webkit-playsinline\"" + (jade.attr("src", video.url, true, false)) + " controls=\"controls\" preload=\"auto\"" + (jade.attr("dir", config.direction, true, false)) + " class=\"video video-js vjs-fluid\"></video></div></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var video = $$obj[i];

buf.push("<div class=\"video-details content-fill\"><div class=\"full-screen\"><span class=\"exit-video block-md icon icon-close text-xl\"></span></div><div class=\"full-screen video-container\"><video webkit-playsinline=\"webkit-playsinline\"" + (jade.attr("src", video.url, true, false)) + " controls=\"controls\" preload=\"auto\"" + (jade.attr("dir", config.direction, true, false)) + " class=\"video video-js vjs-fluid\"></video></div></div>");
    }

  }
}).call(this);

buf.push("<div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined,"videos" in locals_for_with?locals_for_with.videos:typeof videos!=="undefined"?videos:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/video-collection/view.coffee", function(exports, require, module) {
var Preloader, SlideView, VideoCollectionView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Preloader = require("lib/preload");

SlideView = require("views/slide");

VideoCollectionView = (function(_super) {
  __extends(VideoCollectionView, _super);

  function VideoCollectionView() {
    _ref = VideoCollectionView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  VideoCollectionView.prototype.template = require("./template");

  VideoCollectionView.prototype.events = function() {
    return {
      "iostap .btn-done": "submit",
      "iostap .exit-video": "exitVideo",
      "iostap .tappy": "onTapThumbnail"
    };
  };

  VideoCollectionView.prototype.serialize = function() {
    var data;
    data = VideoCollectionView.__super__.serialize.apply(this, arguments);
    data.isShort = _.chain(data.videos).pluck("title").sortBy("length").last().value().length < 20;
    data.videos = _.filter(data.videos || [], function(d) {
      return d.url;
    });
    data.hasPrompt = true;
    return data;
  };

  VideoCollectionView.prototype.onResize = function() {
    var el, height, i, length, tappyHeight, _i, _len, _ref1, _results;
    length = this.getEl("tappies").children.length;
    height = this.getEl("parent").firstChild.offsetHeight - this.getEl("title").offsetHeight;
    if (length >= 4) {
      tappyHeight = (height * (1 + length / 10)) / length;
    } else {
      tappyHeight = height / length;
    }
    _ref1 = this.getEl("tappies").children;
    _results = [];
    for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
      el = _ref1[i];
      _results.push(el.style.height = "" + tappyHeight + "px");
    }
    return _results;
  };

  VideoCollectionView.prototype.onRefresh = function() {
    this.beforeShow();
    return this.show();
  };

  VideoCollectionView.prototype.beforeShow = function() {
    var onExit, player, video;
    this.setEl(this.findOne(".tappies-parent"), "parent");
    this.setEl(this.findOne(".tappies"), "tappies");
    this.setEl(this.findOne(".title"), "title");
    this.setEl(this.findAll(".video-details"), "videoDetails");
    this.videos = (function() {
      var _i, _len, _ref1, _results,
        _this = this;
      _ref1 = this.findAll("video");
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        video = _ref1[_i];
        player = window.videojs(video, {
          fluid: true
        });
        onExit = function() {
          return window.setTimeout((function() {
            return _this.exitVideo();
          }), 300);
        };
        _results.push((function(player) {
          return player.on("fullscreenchange", function() {
            if (!player.isFullscreen()) {
              return onExit();
            }
          });
        })(player));
      }
      return _results;
    }).call(this);
    return this.onResize();
  };

  VideoCollectionView.prototype.show = function() {
    var _i, _ref1, _results;
    this.listenTo(this, "resize", this.onResize);
    return this.toVisit = (function() {
      _results = [];
      for (var _i = 0, _ref1 = this.serialize().videos.length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; 0 <= _ref1 ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this);
  };

  VideoCollectionView.prototype.onTapThumbnail = function(e) {
    return this.openVideo(e.currentTarget, true);
  };

  VideoCollectionView.prototype.openVideo = function(el, animate) {
    var vidDetails;
    this.currentIndex = parseInt(el.dataset.index, 10);
    vidDetails = this.getEl("videoDetails").item(this.currentIndex);
    this.toVisit = _.without(this.toVisit, this.currentIndex);
    if (_.isEmpty(this.toVisit)) {
      this.setState("touched");
    }
    this.setState(true, "video");
    this.trigger("ui", {
      lightbox: true
    });
    this.videos[this.currentIndex].currentTime(0);
    this.videos[this.currentIndex].play();
    el.classList.add("visited");
    vidDetails.classList.toggle("no-transition", !animate);
    return vidDetails.classList.add("active");
  };

  VideoCollectionView.prototype.exitVideo = function() {
    var vidDetails;
    vidDetails = this.getEl("videoDetails").item(this.currentIndex);
    vidDetails.classList.remove("no-transition");
    vidDetails.classList.remove("active");
    this.trigger("ui", {
      lightbox: false
    });
    this.setState(false, "video");
    return this.videos[this.currentIndex].pause();
  };

  VideoCollectionView.prototype.refresh = function(params) {
    var changed, el, i, _i, _len, _ref1;
    if (params.data.videos.length === this.options.data.videos.length) {
      _ref1 = params.data.videos;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        i = _ref1[_i];
        if (this.options.data.videos[i] != null) {
          changed = i;
        }
      }
    }
    VideoCollectionView.__super__.refresh.apply(this, arguments);
    if ((changed != null) && (el = this.getEl("tappies").children[changed])) {
      return this.openVideo(el, false);
    }
  };

  return VideoCollectionView;

})(SlideView);

module.exports = VideoCollectionView;
});

;require.register("engine/video-contribution/model.yaml", function(exports, require, module) {
module.exports = {"title":"video-contribution","display":"Video","category":"Peer Learning","description":"Video Upload","model":{"question":{"id":{"type":"uuid","hidden":true},"content":{"type":"html"}},"prompt":{"type":"html","default":"Choose a video to upload"}},"examples":[{"question":{"id":"#GENUUID#","content":"Contribute to peer learning by uploading a video"}}]}
});

;require.register("engine/video-contribution/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (continueBtnText, hasNarration, hasPrompt, i18n, prompt, title) {
buf.push("<div class=\"block-v-xl content-fill\"><div class=\"content text-center\"><h1 class=\"fade-in\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"block-frame block-v-md slide-up delay-1\"><div class=\"upload-video btn btn-solid\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div><div class=\"upload-progress block-dk\"><div class=\"upload-progress-bar\"></div></div><div class=\"upload-success text-md block-v-md\">Your upload is complete.</div><div class=\"upload-error text-md block-v-md\">There was an error uploading your video.\nPlease ensure your video is the correct format and try again.</div></div></div></div><div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/video-contribution/view.coffee", function(exports, require, module) {
var InputView, VideoContributionView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

InputView = require("views/input");

VideoContributionView = (function(_super) {
  __extends(VideoContributionView, _super);

  function VideoContributionView() {
    _ref = VideoContributionView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  VideoContributionView.prototype.template = require("./template");

  VideoContributionView.prototype.generateUUID = function() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
      var r, v;
      r = Math.random() * 16 | 0;
      v = c === 'x' ? r : r & 0x3 | 0x8;
      return v.toString(16);
    });
  };

  VideoContributionView.prototype.initialize = function(options) {
    this.uploadConfiguration = options.lessonConfiguration.upload;
    this.uploadUUID = this.generateUUID();
    return VideoContributionView.__super__.initialize.apply(this, arguments);
  };

  VideoContributionView.prototype.events = function() {
    return {
      "iostap .btn-done": "nextSlide"
    };
  };

  VideoContributionView.prototype.serialize = function() {
    var data;
    data = VideoContributionView.__super__.serialize.apply(this, arguments);
    data.title = this.options.data.question.content;
    return data;
  };

  VideoContributionView.prototype.show = function() {
    this.setEl(this.findOne(".upload-video"), "button");
    this.setEl(this.findOne(".upload-progress-bar"), "progress-bar");
    return this.createUploader();
  };

  VideoContributionView.prototype.createUploader = function() {
    var configuration, uploader, _ref1,
      _this = this;
    configuration = ((_ref1 = window.__) != null ? _ref1.uploadConfiguration : void 0) || this.uploadConfiguration;
    this.setState("prompt", "upload");
    return uploader = new qq.s3.FineUploaderBasic(_.extend({
      debug: true,
      chunking: {
        enabled: true,
        concurrent: {
          enabled: true
        }
      },
      resume: {
        enabled: true
      },
      retry: {
        enableAuto: true
      },
      camera: {
        ios: true
      },
      validation: {
        acceptFiles: "video/*"
      },
      button: this.getEl("button"),
      objectProperties: {
        key: function(id) {
          var ext, extension, name;
          name = uploader.getName(id);
          extension = (ext = name.match(/[^\.]+$/)) ? ext[0] : "mp4";
          return "contributions/" + _this.uploadUUID + "." + extension;
        }
      },
      callbacks: {
        onUpload: _.bind(this.onUpload, this),
        onStatusChange: _.bind(this.onStatusChange, this),
        onError: _.bind(this.onError, this),
        onComplete: _.bind(this.onComplete, this),
        onProgress: _.bind(this.onProgress, this)
      }
    }, configuration));
  };

  VideoContributionView.prototype.onUpload = function() {
    this.setState("in-progress", "upload");
    return this.transform(this.getEl("progress-bar"), {
      scale: "0, 1",
      transition: "none"
    });
  };

  VideoContributionView.prototype.onStatusChange = console.log;

  VideoContributionView.prototype.onError = function(id, name, reason) {
    this.setState("prompt");
    return this.setState("error", "upload");
  };

  VideoContributionView.prototype.onComplete = function(id, name, response) {
    this.uploadedFileKey = response.uploadKey;
    this.setState("touched");
    this.setState("complete", "upload");
    return this.transform(this.getEl("progress-bar"), {
      scale: "1, 1"
    });
  };

  VideoContributionView.prototype.onProgress = function(id, name, uploadedBytes, totalBytes) {
    return this.transform(this.getEl("progress-bar"), {
      scale: "" + (uploadedBytes / totalBytes * 0.7) + ", 1",
      transition: "all 300ms"
    });
  };

  VideoContributionView.prototype.userInput = function() {
    return {
      contribution: {
        video: this.uploadedFileKey,
        question: {
          content: this.options.data.question.content,
          id: this.options.data.question.id
        }
      }
    };
  };

  return VideoContributionView;

})(InputView);

module.exports = VideoContributionView;
});

;require.register("engine/video/model.yaml", function(exports, require, module) {
module.exports = {"title":"video","display":"Video Slide","category":"Content","description":"Play a video","links":{"academy":"https://academy.edapp.com/how-to-video/"},"model":{"title":{"type":"html","default":"Video"},"url":{"type":"video","default":"video/example.mp4","display":"Video"},"streamUrl":{"type":"string","hidden":true},"prompt":{"default":"Watch the video to continue","type":"text"},"showSkipButton":{"type":"boolean","default":true,"display":"Always Show Skip Button","help":"Allow the learner to progress without watching the entire video. Learners can always skip the video after watching it once.\n"},"stream":{"type":"boolean","default":true,"display":"Play on Demand","help":"Play this video on demand instead of downloading all at once. This is recommended for longer videos.\n"},"autoplay":{"type":"boolean","display":"Auto Play","default":false,"help":"Start playing the video automatically when the learner views this slide.\n"},"autoprogress":{"type":"boolean","display":"Auto Progress","default":false,"help":"Continue to the next slide once this video is over.\n"}}}
});

;require.register("engine/video/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (config, continueBtnText, fullscreen, hasNarration, hasPrompt, i18n, prompt, stream, streamUrl, url) {
buf.push("<div class=\"slide-loader content\"></div><div class=\"content-fill full-screen\"><video" + (jade.attr("webkit-playsinline", !fullscreen, true, false)) + " controls=\"controls\" preload=\"auto\"" + (jade.attr("dir", config.direction, true, false)) + " class=\"video video-js vjs-fluid\"><source" + (jade.attr("src", url, true, false)) + "/>");
if ( stream && streamUrl)
{
buf.push("<source" + (jade.attr("src", streamUrl, true, false)) + "/>");
}
buf.push("</video></div><div class=\"content-fill\"><h2 class=\"video-error-msg content\">" + (null == (jade_interp = i18n("video.not-available")) ? "" : jade_interp) + "</h2><div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div></div>");}.call(this,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"fullscreen" in locals_for_with?locals_for_with.fullscreen:typeof fullscreen!=="undefined"?fullscreen:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"stream" in locals_for_with?locals_for_with.stream:typeof stream!=="undefined"?stream:undefined,"streamUrl" in locals_for_with?locals_for_with.streamUrl:typeof streamUrl!=="undefined"?streamUrl:undefined,"url" in locals_for_with?locals_for_with.url:typeof url!=="undefined"?url:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/video/view.coffee", function(exports, require, module) {
var SlideView, VideoView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SlideView = require("views/slide");

VideoView = (function(_super) {
  __extends(VideoView, _super);

  function VideoView() {
    _ref = VideoView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  VideoView.prototype.template = require("./template");

  VideoView.prototype.events = function() {
    return {
      "iostap .btn-done": "next"
    };
  };

  VideoView.prototype.initialize = function() {
    var _base;
    VideoView.__super__.initialize.apply(this, arguments);
    if ((_base = this.options.data).showSkipButton == null) {
      _base.showSkipButton = true;
    }
    if (this.options.data.prompt === "") {
      return this.options.data.prompt = require("./model").model.prompt["default"];
    }
  };

  VideoView.prototype.serialize = function() {
    var data;
    data = VideoView.__super__.serialize.apply(this, arguments);
    data.continueBtnText = i18n("video.skip-video");
    data.hasPrompt = !data.showSkipButton;
    return data;
  };

  VideoView.prototype.show = function() {
    var video,
      _this = this;
    video = this.findOne("video");
    window.player = this.player = window.videojs(video, {
      fluid: true
    });
    this.player.on("error", function(err) {
      console.error("Error playing video, retrying", err);
      _this.disposePlayer();
      _this.reset();
      return _this.show();
    });
    this.player.ready(function() {
      _this.setState("success", "video");
      if (_this.options.data.autoplay && window.location.href.split("thumbnail=true").length !== 2) {
        _this.player.play();
      }
      _this.player.on("play", function() {
        return _this.trigger("video-play");
      });
      _this.player.on("pause", function() {
        return _this.trigger("video-pause");
      });
      if (!_this.options.data.showSkipButton) {
        _this.player.on("timeupdate", _.bind(_this.onTimeUpdate, _this));
        return _this.player.on("seeking", _.bind(_this.onSeeking, _this));
      }
    });
    return this.player.on("ended", _.bind(this.onVideoEnd, this));
  };

  VideoView.prototype.beforeShow = function() {
    return this.trigger("ui", {
      lightbox: true,
      flexibleHeight: true
    });
  };

  VideoView.prototype.beforeHide = function() {
    this.trigger("ui", {
      lightbox: false,
      flexibleHeight: false
    });
    return this.disposePlayer();
  };

  VideoView.prototype.onRefresh = function() {
    this.beforeShow();
    return VideoView.__super__.onRefresh.apply(this, arguments);
  };

  VideoView.prototype.disposePlayer = function() {
    var _ref1;
    if (((_ref1 = this.player) != null ? _ref1.dispose : void 0) != null) {
      this.player.dispose();
      return delete this.player;
    }
  };

  VideoView.prototype.onVideoEnd = function() {
    this.findOne(".btn-done").innerHTML = i18n("buttons.continue");
    if (!this.options.data.showSkipButton) {
      this.setState("touched");
    }
    this.lesson.processInteraction({
      type: "video",
      event: {
        name: "video-watched"
      },
      metadata: this.options.metadata
    });
    if (this.options.data.autoprogress) {
      return this.submit();
    }
  };

  VideoView.prototype.onTimeUpdate = function() {
    if (!this.player.scrubbing()) {
      return this.timeBeforeChange = this.player.currentTime();
    }
  };

  VideoView.prototype.onSeeking = function() {
    if (this.currentState.state !== "touched" && this.player.currentTime() > this.timeBeforeChange) {
      return this.player.currentTime(this.timeBeforeChange);
    }
  };

  return VideoView;

})(SlideView);

module.exports = VideoView;
});

;require.register("engine/vimeo-video-embed/model.yaml", function(exports, require, module) {
module.exports = {"title":"vimeo-video-embed","display":"Vimeo Video","category":"Content","description":"Display a video hosted on Vimeo","model":{"title":{"type":"html"},"videoId":{"type":"html","display":"Video ID","help":"The ID of your video can be found by selecting the \"share\" option on Vimeo. eg. https://vimeo.com/87701971 is \"87701971\"\n"},"autoplay":{"type":"boolean","display":"Auto Play","default":false,"help":"Start playing the video automatically when the user views this slide.\n"}},"examples":[{"videoId":"87701971"}]}
});

;require.register("engine/vimeo-video-embed/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (continueBtnText, hasNarration, hasPrompt, i18n, prompt) {
buf.push("<div class=\"vimeo-content content-fill full-screen\"><div class=\"slide-loader content\"></div><div class=\"vimeo-player text-center content-fill\"></div><img class=\"vimeo-thumb content-ver block\"/><div class=\"video-controls content\"><div class=\"video-play\"></div></div></div><div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/vimeo-video-embed/view.coffee", function(exports, require, module) {
var SlideView, VimeoAPI, VimeoVideoEmbedView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SlideView = require("views/slide");

VimeoAPI = require("lib/vimeo-api");

VimeoVideoEmbedView = (function(_super) {
  __extends(VimeoVideoEmbedView, _super);

  function VimeoVideoEmbedView() {
    _ref = VimeoVideoEmbedView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  VimeoVideoEmbedView.prototype.template = require("./template");

  VimeoVideoEmbedView.prototype.events = {
    "iostap .btn-done": "submit",
    "iostap": "playVideo"
  };

  VimeoVideoEmbedView.prototype.serialize = function() {
    var data, _ref1, _ref2;
    data = VimeoVideoEmbedView.__super__.serialize.apply(this, arguments);
    data.continueBtnText = i18n("video.skip-video");
    data.videoId = data != null ? (_ref1 = data.videoId.toString().match(/\d+$/)) != null ? _ref1[0] : void 0 : void 0;
    data.thumbnail = (_ref2 = this.videoData) != null ? _ref2.thumbnail_large : void 0;
    return data;
  };

  VimeoVideoEmbedView.prototype.render = function() {
    var onLoad,
      _this = this;
    VimeoVideoEmbedView.__super__.render.apply(this, arguments);
    this.createPlayer();
    onLoad = function(e) {
      _this.getEl("vimeo-thumb").removeEventListener("load", onLoad);
      _this.getEl("vimeo-thumb").removeEventListener("error", onLoad);
      _this.getEl("vimeo-thumb").classList.add("show");
      return _this.setState("paused", "video");
    };
    this.setEl(this.findOne(".vimeo-thumb"), "vimeo-thumb");
    this.getEl("vimeo-thumb").addEventListener("load", onLoad);
    return this.getEl("vimeo-thumb").addEventListener("error", onLoad);
  };

  VimeoVideoEmbedView.prototype.beforeShow = function() {
    return this.trigger("ui", {
      lightbox: true,
      flexibleHeight: true
    });
  };

  VimeoVideoEmbedView.prototype.beforeHide = function() {
    var _ref1;
    window.clearTimeout(this.ensureTimeout);
    window.clearTimeout(this.autoplayTimeout);
    if ((_ref1 = this.player) != null) {
      if (typeof _ref1.pause === "function") {
        _ref1.pause();
      }
    }
    return this.trigger("ui", {
      lightbox: false,
      flexibleHeight: false
    });
  };

  VimeoVideoEmbedView.prototype.playVideo = function() {
    var err, video, _ref1,
      _this = this;
    if (this.player != null) {
      try {
        video = this.player.element.contentWindow.document.querySelector("video");
      } catch (_error) {
        err = _error;
        if (typeof console !== "undefined" && console !== null) {
          console.log(err);
        }
      }
      if ((video != null) && ((_ref1 = __.slidedeck) != null ? _ref1.platform : void 0) === "iOS") {
        if (video.paused) {
          return video.play();
        } else {
          return video.pause();
        }
      } else {
        return this.player.getPaused().then(function(paused) {
          if (paused) {
            return _this.player.play();
          } else {
            return _this.player.pause();
          }
        });
      }
    } else {
      return this.ensure((function() {
        var _ref2, _ref3;
        return (_ref2 = _this.player) != null ? (_ref3 = _ref2.element) != null ? _ref3.contentWindow : void 0 : void 0;
      }), function() {
        return _this.playVideo();
      });
    }
  };

  VimeoVideoEmbedView.prototype.createPlayer = function() {
    var _this = this;
    return this.ensure((function() {
      var _ref1;
      return ((_ref1 = window.Vimeo) != null ? _ref1.Player : void 0) != null;
    }), function() {
      var el;
      el = _this.findOne(".vimeo-player");
      if (!el) {
        return;
      }
      _this.player = new Vimeo.Player(el, {
        id: _this.serialize().videoId,
        width: el.offsetWidth,
        height: el.offsetHeight,
        title: false,
        portrait: false,
        byline: false,
        color: "ffffff"
      });
      _this.player.on("ended", function() {
        return _this.submit();
      });
      _this.player.on("play", function() {
        return _this.setState("playing", "video");
      });
      _this.player.on("pause", function() {
        return _this.setState("paused", "video");
      });
      _this.player.on("loaded", function() {
        return _this.setState("paused", "video");
      });
      return _this.loadThumbnail(function() {
        if (_this.options.data.autoplay && window.location.href.split("thumbnail=true").length !== 2) {
          return _this.autoplayTimeout = window.setTimeout((function() {
            return _this.playVideo();
          }), 400);
        }
      });
    });
  };

  VimeoVideoEmbedView.prototype.onRefresh = function() {
    window.clearTimeout(this.autoplayTimeout);
    window.clearTimeout(this.ensureTimeout);
    if (this.player != null) {
      this.player.loadVideo(this.serialize().videoId);
    } else {
      this.createPlayer();
    }
    this.setState("loading", "video");
    this.getEl("vimeo-thumb").classList.remove("show");
    return this.beforeShow();
  };

  VimeoVideoEmbedView.prototype.submit = function(e) {
    this.player.off("play ended pause loaded");
    this.$(this.player.element).remove();
    if (e != null) {
      e.stopImmediatePropagation();
    }
    return VimeoVideoEmbedView.__super__.submit.apply(this, arguments);
  };

  VimeoVideoEmbedView.prototype.ensure = function(cond, done) {
    var repeat,
      _this = this;
    return (repeat = function() {
      if (cond()) {
        return done();
      } else {
        return _this.ensureTimeout = window.setTimeout(repeat, 100);
      }
    })();
  };

  VimeoVideoEmbedView.prototype.loadThumbnail = function(done) {
    var onError, _ref1,
      _this = this;
    onError = function() {
      var _ref1;
      if ((_ref1 = _this.getEl("vimeo-thumb")) != null) {
        _ref1.src = "img/video/empty.png";
      }
      _this.setState("false", "thumb");
      return done();
    };
    if ((_ref1 = this.request) != null) {
      _ref1.abort();
    }
    return this.request = $.ajax({
      type: "GET",
      url: "https://vimeo.com/api/v2/video/" + (this.serialize().videoId) + ".json",
      dataType: "json",
      error: onError,
      success: function(_arg) {
        var resp, _ref2;
        resp = (_arg != null ? _arg : [])[0];
        if (resp) {
          _this.videoData = resp;
          if ((_ref2 = _this.getEl("vimeo-thumb")) != null) {
            _ref2.src = resp.thumbnail_large;
          }
          return done();
        } else {
          return onError();
        }
      }
    });
  };

  return VimeoVideoEmbedView;

})(SlideView);

module.exports = VimeoVideoEmbedView;
});

;require.register("engine/youtube-video-embed/model.yaml", function(exports, require, module) {
module.exports = {"title":"youtube-video-embed","display":"YouTube Video","category":"Content","description":"Display a video hosted on YouTube","model":{"title":{"type":"html"},"videoId":{"type":"html","display":"YouTube Video ID","help":"The ID of your video can be found in the video's URL after the equals sign. eg. The ID for https://www.youtube.com/watch?v=ZczmRIzr8r4 is ZczmRIzr8r4\n"},"autoplay":{"type":"boolean","display":"Auto Play","default":false,"help":"Start playing the video automatically when the user views this slide.\n"},"startTime":{"type":"int","display":"Start Time","default":0,"help":"When playing the video, jump ahead to the time specified (in seconds).\n"},"endTime":{"type":"int","display":"End Time","help":"When playing the video, finish at the time specified (in seconds).\n"}},"examples":[{"videoId":"ZczmRIzr8r4"}]}
});

;require.register("engine/youtube-video-embed/template.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (continueBtnText, hasNarration, hasPrompt, i18n, prompt, videoId) {
buf.push("<div class=\"yt-content content-fill full-screen\"><div class=\"slide-loader content\"></div><div class=\"yt-player text-center content-fill\"></div><img" + (jade.attr("src", "https://img.youtube.com/vi/" + (videoId) + "/maxresdefault.jpg", true, false)) + " class=\"yt-thumb content-ver block\"/><div class=\"video-controls content\"><div class=\"video-play\"></div></div></div><div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined,"videoId" in locals_for_with?locals_for_with.videoId:typeof videoId!=="undefined"?videoId:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("engine/youtube-video-embed/view.coffee", function(exports, require, module) {
var SlideView, YouTubeAPI, YoutubeVideoEmbedView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SlideView = require("views/slide");

YouTubeAPI = require("lib/youtube-api");

YoutubeVideoEmbedView = (function(_super) {
  __extends(YoutubeVideoEmbedView, _super);

  function YoutubeVideoEmbedView() {
    _ref = YoutubeVideoEmbedView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  YoutubeVideoEmbedView.prototype.template = require("./template");

  YoutubeVideoEmbedView.prototype.events = {
    "iostap .btn-done": "submit",
    "iostap": "playVideo"
  };

  YoutubeVideoEmbedView.prototype.serialize = function() {
    var data;
    data = YoutubeVideoEmbedView.__super__.serialize.apply(this, arguments);
    data.continueBtnText = i18n("video.skip-video");
    return data;
  };

  YoutubeVideoEmbedView.prototype.render = function() {
    YoutubeVideoEmbedView.__super__.render.apply(this, arguments);
    this.player = null;
    return this.waitForAPI();
  };

  YoutubeVideoEmbedView.prototype.beforeShow = function() {
    this.trigger("ui", {
      lightbox: true,
      flexibleHeight: true
    });
    this.setState("loading", "video");
    if (this.options.data.autoplay && window.location.href.split("thumbnail=true").length !== 2) {
      return this.playVideo();
    }
  };

  YoutubeVideoEmbedView.prototype.beforeHide = function() {
    var _ref1;
    window.clearTimeout(this.waitForAPITimeout);
    window.clearTimeout(this.checkForPlayerTimeout);
    if ((_ref1 = this.player) != null) {
      if (typeof _ref1.stopVideo === "function") {
        _ref1.stopVideo();
      }
    }
    return this.trigger("ui", {
      lightbox: false,
      flexibleHeight: false
    });
  };

  YoutubeVideoEmbedView.prototype.waitForAPI = function() {
    var repeat,
      _this = this;
    window.clearTimeout(this.waitForAPITimeout);
    return (repeat = function() {
      var _ref1;
      if (((_ref1 = window.YT) != null ? _ref1.Player : void 0) != null) {
        return _this.createPlayer();
      } else {
        return _this.waitForAPITimeout = window.setTimeout(repeat, 100);
      }
    })();
  };

  YoutubeVideoEmbedView.prototype.playVideo = function() {
    var repeat,
      _this = this;
    window.clearTimeout(this.checkForPlayerTimeout);
    return (repeat = function() {
      var _ref1, _ref2;
      if (((_ref1 = _this.player) != null ? _ref1.playVideo : void 0) != null) {
        return (_ref2 = _this.player) != null ? typeof _ref2.playVideo === "function" ? _ref2.playVideo() : void 0 : void 0;
      } else {
        return _this.checkForPlayerTimeout = window.setTimeout(repeat, 100);
      }
    })();
  };

  YoutubeVideoEmbedView.prototype.createPlayer = function() {
    var el,
      _this = this;
    el = this.findOne(".yt-player");
    return this.player = new YT.Player(el, {
      videoId: this.options.data.videoId,
      playerVars: {
        autoplay: 0,
        controls: 0,
        modestbranding: 0,
        showinfo: 0,
        rel: 0,
        start: parseInt(this.options.data.startTime, 10) || 0,
        end: parseInt(this.options.data.endTime, 10) || void 0
      },
      events: {
        onReady: function() {
          return _this.setState("paused", "video");
        },
        onStateChange: function(e) {
          switch (e.data) {
            case YT.PlayerState.PLAYING:
              return _this.setState("playing", "video");
            case YT.PlayerState.PAUSED:
              return _this.setState("paused", "video");
            case YT.PlayerState.ENDED:
              return _this.submit();
          }
        }
      }
    });
  };

  YoutubeVideoEmbedView.prototype.onRefresh = function() {
    return this.beforeShow();
  };

  YoutubeVideoEmbedView.prototype.submit = function(e) {
    if (e != null) {
      e.stopImmediatePropagation();
    }
    return YoutubeVideoEmbedView.__super__.submit.apply(this, arguments);
  };

  return YoutubeVideoEmbedView;

})(SlideView);

module.exports = YoutubeVideoEmbedView;
});

;require.register("lib/animate.coffee", function(exports, require, module) {
var rAF;

rAF = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) {
  return window.setTimeout(callback, 1000 / 60);
};

module.exports = function(func, duration) {
  var isActive, repeat, timestamp;
  if (duration == null) {
    duration = 300;
  }
  timestamp = Date.now();
  isActive = true;
  (repeat = function() {
    var diff;
    if (!isActive) {
      return;
    }
    diff = Math.min(Date.now() - timestamp, duration);
    if (diff < duration) {
      func(diff / duration);
      return rAF(repeat);
    } else {
      return func(1, true);
    }
  })();
  return {
    cancel: function() {
      return isActive = false;
    }
  };
};
});

;require.register("lib/convert.coffee", function(exports, require, module) {
var div;

div = document.createElement("div");

module.exports = {
  toText: function(content) {
    div.innerHTML = content;
    return div.textContent.replace(/\s+/g, " ");
  },
  toHTML: function(content) {
    div.textContent = content;
    return div.innerHTML;
  }
};
});

;require.register("lib/cookies.coffee", function(exports, require, module) {
var read;

read = function() {
  var cookie_details, cookies, name, value, _i, _len, _ref;
  cookie_details = document.cookie.split(';').map(function(c) {
    var details;
    c = c.trim();
    details = c.split(/\=/);
    return {
      name: details[0],
      value: decodeURIComponent(details[1])
    };
  });
  cookies = {};
  for (_i = 0, _len = cookie_details.length; _i < _len; _i++) {
    _ref = cookie_details[_i], name = _ref.name, value = _ref.value;
    if (name.match(/^webed/)) {
      cookies[name.replace("webed_", "")] = value;
    }
  }
  return cookies;
};

module.exports = {
  read: read
};
});

;require.register("lib/data-processer.coffee", function(exports, require, module) {
var deepClone, formatContent, isURL, markdown, options, processMetadata, processSlide, processSlides, processSlidesMetadata, recur, shouldTransform, transform, transformTypes, _processedSlides;

options = {
  renderer: new window.marked.Renderer(),
  gfm: true,
  tables: true,
  breaks: false,
  pedantic: false,
  sanitize: false,
  smartLists: true,
  smartypants: true
};

recur = function(obj, def, method) {
  var key, m, result, t, val, _ref;
  if (!(obj != null) || !(def != null) || typeof obj !== "object") {
    return method(obj, def);
  } else if ((Array.isArray || _.isArray)(obj)) {
    return obj.map(function(t, i) {
      return recur(t, def.type[0], method);
    });
  } else {
    result = {};
    for (key in obj) {
      val = obj[key];
      t = obj["" + key + "Type"];
      m = def[key];
      if (t) {
        m.type = t;
      }
      if (t === "" && (((_ref = def[key]) != null ? _ref.types : void 0) != null)) {
        m.type = def[key].types[0];
      }
      result[key] = recur(val, m, method);
    }
    return result;
  }
};

markdown = function(content) {
  var err, nbLines, result;
  try {
    nbLines = typeof content.split === "function" ? content.split(/\n|\<p[^\>]*\>/).length : void 0;
    result = window.marked(content.toString(), options);
    result = result.replace(/(^\s+|\s+$)/g, "");
    if (nbLines <= 1) {
      result = result.replace(/\<\/?p[^\>]*\>/g, "");
    }
    return result;
  } catch (_error) {
    err = _error;
    return content;
  }
};

transformTypes = ["text", "html"];

shouldTransform = function(def) {
  if (def != null ? def.type : void 0) {
    return _.includes(transformTypes, def.type);
  } else {
    return false;
  }
};

transform = function(value, def) {
  if (shouldTransform(def) && !(def.transform === false)) {
    return markdown(value);
  } else {
    return value;
  }
};

_processedSlides = {};

processSlide = function(data, type) {
  var key, model, result, _ref;
  key = sha1(JSON.stringify({
    data: data,
    type: type
  }));
  if (_processedSlides[key] != null) {
    return _processedSlides[key];
  }
  model = (_ref = require("engine/" + type + "/model")) != null ? _ref.model : void 0;
  result = _.extend(data, recur(data, model, transform));
  _processedSlides[key] = result;
  return result;
};

processSlides = function(data) {
  var slide, _i, _len, _ref;
  _ref = data.slides;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    slide = _ref[_i];
    slide.data = processSlide(slide.data, slide.type);
  }
  return data;
};

isURL = function(c) {
  return (c != null ? c.indexOf('http') : void 0) === 0 || (c != null ? c.indexOf("fit_content_assets") : void 0) !== -1;
};

formatContent = function(f) {
  return function(c) {
    if (!isNaN(c)) {
      return parseFloat(c);
    } else if (isURL(c)) {
      return c;
    } else {
      return f(c);
    }
  };
};

processMetadata = function(func) {
  return function(metadata) {
    var answer, i, j, q, _i, _j, _len, _len1, _ref, _ref1, _ref2;
    _ref = metadata.questions || [];
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      q = _ref[i];
      if (!(q != null ? (_ref1 = q.question) != null ? _ref1.content : void 0 : void 0)) {
        continue;
      }
      metadata.questions[i].question.content = formatContent(func)(q.question.content.toString());
      _ref2 = q.answers;
      for (j = _j = 0, _len1 = _ref2.length; _j < _len1; j = ++_j) {
        answer = _ref2[j];
        if (answer != null ? answer.content : void 0) {
          metadata.questions[i].answers[j].content = formatContent(func)(answer.content.toString());
        }
      }
    }
    return metadata;
  };
};

deepClone = _.compose(JSON.parse, JSON.stringify);

processSlidesMetadata = function(data) {
  var slide, _i, _len, _ref;
  _ref = data.slides;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    slide = _ref[_i];
    if (!((slide != null ? slide.metadata : void 0) != null)) {
      continue;
    }
    slide.metadata = processMetadata(markdown)(deepClone(slide.metadata));
    slide.strippedMetadata = processMetadata(removeMarkdown)(deepClone(slide.metadata));
  }
  return data;
};

module.exports = {
  one: processSlide,
  oneMD: processMetadata(markdown),
  oneSMD: processMetadata(removeMarkdown),
  all: processSlides,
  allMD: processSlidesMetadata
};
});

;require.register("lib/device.coffee", function(exports, require, module) {
var android, deviceType, ios, pointerEventConf, _ref, _ref1;

pointerEventConf = {
  pointer: {
    isTouch: false,
    start: "pointerdown",
    move: "pointermove",
    end: "pointerup"
  },
  touch: {
    isTouch: true,
    start: "touchstart",
    move: "touchmove",
    end: "touchend"
  },
  mouse: {
    isTouch: false,
    start: "mousedown",
    move: "mousemove",
    end: "mouseup"
  }
};

deviceType = "onpointerdown" in window ? "pointer" : "ontouchstart" in window ? "touch" : "mouse";

ios = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;

android = /android/i.test(typeof navigator !== "undefined" && navigator !== null ? navigator.userAgent : void 0);

module.exports = {
  dpi: window.devicePixelRatio || 1,
  isIE: function() {
    return document.documentMode || /Edge/.test((typeof navigator !== "undefined" && navigator !== null ? navigator.userAgent : void 0) || "");
  },
  platform: ((_ref = window.__) != null ? (_ref1 = _ref.slidedeck) != null ? _ref1.platform : void 0 : void 0) || (ios && "iOS") || (android && "Android") || "browser",
  events: {
    pointer: pointerEventConf[deviceType],
    resize: "onorientationchange" in window ? "orientationchange" : "resize"
  },
  breakpoint: function(sizes) {
    var point;
    if (typeof sizes === "string") {
      sizes = [sizes];
    }
    point = window.innerWidth <= 600 ? "xs" : window.innerWidth <= 768 ? "sm" : window.innerWidth <= 1024 ? "md" : "lg";
    if (sizes) {
      return _.include(sizes, point);
    } else {
      return point;
    }
  }
};
});

;require.register("lib/draw/catmull-rom-spline.coffee", function(exports, require, module) {
/*
  lektiondestages.blogspot.se/2013/01/calculate-catmull-rom-splines-using.html
*/

module.exports = function(points, divisions) {
  var d1x, d1y, d2x, d2y, d3x, d3y, j, p1x, p1y, p2x, p2y, px, py, spline, st1, st2, st3, _i;
  if (divisions == null) {
    divisions = 32;
  }
  points = [].concat(points);
  spline = points.slice(0, 1);
  while (points.length > 3) {
    p1x = 1 * points[3].x - 3 * points[2].x + 3 * points[1].x - points[0].x;
    p1y = 1 * points[3].y - 3 * points[2].y + 3 * points[1].y - points[0].y;
    p2x = 2 * points[0].x - 5 * points[1].x + 4 * points[2].x - points[3].x;
    p2y = 2 * points[0].y - 5 * points[1].y + 4 * points[2].y - points[3].y;
    st1 = 1.0 / divisions;
    st2 = st1 * st1;
    st3 = st1 * st2;
    d1x = 0.5 * (st3 * p1x + st2 * p2x + st1 * (points[2].x - points[0].x));
    d1y = 0.5 * (st3 * p1y + st2 * p2y + st1 * (points[2].y - points[0].y));
    d2x = 3.0 * st3 * p1x + st2 * p2x;
    d2y = 3.0 * st3 * p1y + st2 * p2y;
    d3x = 3.0 * st3 * p1x;
    d3y = 3.0 * st3 * p1y;
    px = points[1].x;
    py = points[1].y;
    for (j = _i = 0; 0 <= divisions ? _i < divisions : _i > divisions; j = 0 <= divisions ? ++_i : --_i) {
      px += d1x;
      py += d1y;
      d1x += d2x;
      d1y += d2y;
      d2x += d3x;
      d2y += d3y;
      spline.push({
        x: px,
        y: py
      });
    }
    points.shift();
  }
  return spline;
};
});

;require.register("lib/draw/simplify.coffee", function(exports, require, module) {
/*
 (c) 2013, Vladimir Agafonkin
 Simplify.js, a high-performance JS polyline simplification library
 mourner.github.io/simplify-js/
*/

var getSqDist, getSqSegDist, simplify, simplifyDPStep, simplifyDouglasPeucker, simplifyRadialDist;

getSqDist = function(p1, p2) {
  var dx, dy;
  dx = p1.x - p2.x;
  dy = p1.y - p2.y;
  return dx * dx + dy * dy;
};

getSqSegDist = function(p, p1, p2) {
  var dx, dy, t, x, y;
  x = p1.x;
  y = p1.y;
  dx = p2.x - x;
  dy = p2.y - y;
  if (dx !== 0 || dy !== 0) {
    t = ((p.x - x) * dx + (p.y - y) * dy) / (dx * dx + dy * dy);
    if (t > 1) {
      x = p2.x;
      y = p2.y;
    } else if (t > 0) {
      x += dx * t;
      y += dy * t;
    }
  }
  dx = p.x - x;
  dy = p.y - y;
  return dx * dx + dy * dy;
};

simplifyRadialDist = function(points, sqTolerance) {
  var newPoints, point, prevPoint, _i, _len, _ref;
  prevPoint = points[0];
  newPoints = [prevPoint];
  _ref = points.slice(1);
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    point = _ref[_i];
    if (getSqDist(point, prevPoint) > sqTolerance) {
      newPoints.push(point);
      prevPoint = point;
    }
  }
  if (prevPoint !== point) {
    newPoints.push(point);
  }
  return newPoints;
};

simplifyDPStep = function(points, first, last, sqTolerance, simplified) {
  var i, index, maxSqDist, sqDist, _i, _ref;
  maxSqDist = sqTolerance;
  for (i = _i = _ref = first + 1; _ref <= last ? _i < last : _i > last; i = _ref <= last ? ++_i : --_i) {
    sqDist = getSqSegDist(points[i], points[first], points[last]);
    if (sqDist > maxSqDist) {
      index = i;
      maxSqDist = sqDist;
    }
  }
  if (maxSqDist > sqTolerance) {
    if (index - first > 1) {
      simplifyDPStep(points, first, index, sqTolerance, simplified);
    }
    simplified.push(points[index]);
    if (last - index > 1) {
      return simplifyDPStep(points, index, last, sqTolerance, simplified);
    }
  }
};

simplifyDouglasPeucker = function(points, sqTolerance) {
  var last, simp;
  last = points.length - 1;
  simp = points.slice(0, 1);
  simplifyDPStep(points, 0, last, sqTolerance, simp);
  simp.push(points[last]);
  return simp;
};

simplify = function(points, tolerance, highQuality) {
  var sqTol;
  if (tolerance == null) {
    tolerance = 1;
  }
  if (points.length <= 2) {
    return points;
  } else {
    sqTol = Math.pow(tolerance, 2);
    points = highQuality ? points : simplifyRadialDist(points, sqTol);
    return simplifyDouglasPeucker(points, sqTol);
  }
};

module.exports = simplify;
});

;require.register("lib/draw/smooth-line.coffee", function(exports, require, module) {
var Simplify, SmoothLine, Spline, animate;

Spline = require("lib/draw/catmull-rom-spline");

Simplify = require("lib/draw/simplify");

animate = require("lib/animate");

SmoothLine = (function() {
  function SmoothLine(points, __color, __width) {
    this.points = points != null ? points : [];
    this.__color = __color;
    this.__width = __width;
    this.timestamp = Date.now();
  }

  SmoothLine.prototype.add = function(p) {
    var first, last, recent, rest, simple;
    this.points.push(p);
    recent = this.points.slice(-50, -1);
    rest = this.points.slice(1, -recent.length - 1);
    first = this.points.slice(0, 1);
    last = this.points.slice(-1);
    simple = Simplify(recent, Math.pow(recent.length, 0.3), true);
    this.points = first.concat(rest, simple, last);
    return this;
  };

  SmoothLine.prototype.remove = function(fromStart) {
    if (fromStart) {
      return this.points.shift();
    } else {
      return this.points.pop();
    }
  };

  SmoothLine.prototype.length = function() {
    return this.points.length;
  };

  SmoothLine.prototype.getSpline = function() {
    return Spline(this.points);
  };

  SmoothLine.prototype.getPoints = function() {
    return [].concat(this.points);
  };

  SmoothLine.prototype.erase = function(context, frame) {
    var draw, duration, length, spline, width,
      _this = this;
    spline = _.clone(this.getSpline()).reverse();
    length = spline.length - 1;
    width = this.__width;
    draw = function(dist) {
      var diff, diffX, diffY, index, p1, p2, points, _ref;
      if (typeof frame === "function") {
        frame(dist);
      }
      context.globalAlpha = 1 - dist;
      if (!(spline.length > 1)) {
        return;
      }
      index = Math.ceil(dist * length);
      points = spline.slice(0, Math.max(length - index + 1, 2));
      _ref = points.slice(-2), p1 = _ref[0], p2 = _ref[1];
      diff = (index / length - dist) * length;
      diffX = diff * (p1.x - p2.x);
      diffY = diff * (p1.y - p2.y);
      points[points.length - 1] = {
        x: p1.x - diffX,
        y: p1.y - diffY
      };
      _this.__width = width + Math.sin(dist * Math.PI) * width * 1.2;
      _this.points = points;
      _this.draw(context, false);
      if (dist === 1) {
        return _this.__width = width;
      }
    };
    duration = Math.max(Math.min(Date.now() - this.timestamp, 3000), 600);
    return this.animation = animate(draw, duration);
  };

  SmoothLine.prototype.draw = function(ctx, smooth) {
    var i, line, x, y, _i, _len, _ref;
    if (smooth == null) {
      smooth = true;
    }
    line = smooth ? this.getSpline() : this.points;
    if (this.__color) {
      ctx.strokeStyle = this.__color;
    }
    if (this.__width) {
      ctx.lineWidth = this.__width;
    }
    if (line.length > 1) {
      ctx.beginPath();
      for (i = _i = 0, _len = line.length; _i < _len; i = ++_i) {
        _ref = line[i], x = _ref.x, y = _ref.y;
        ctx[i === 0 ? "moveTo" : "lineTo"](x, y);
      }
      return ctx.stroke();
    }
  };

  return SmoothLine;

})();

module.exports = SmoothLine;
});

;require.register("lib/easie.coffee", function(exports, require, module) {
/*
  Easie.coffee (https://github.com/jimjeffers/Easie)
  Project created by J. Jeffers

  Robert Penner's Easing Equations in CoffeeScript
  http://robertpenner.com/easing/
*/

var Easie;

Easie = {
  backIn: function(time, begin, change, duration, overshoot) {
    if (overshoot == null) {
      overshoot = 1.70158;
    }
    return change * (time /= duration) * time * ((overshoot + 1) * time - overshoot) + begin;
  },
  backOut: function(time, begin, change, duration, overshoot) {
    if (overshoot == null) {
      overshoot = 1.70158;
    }
    return change * ((time = time / duration - 1) * time * ((overshoot + 1) * time + overshoot) + 1) + begin;
  },
  backInOut: function(time, begin, change, duration, overshoot) {
    if (overshoot == null) {
      overshoot = 1.70158;
    }
    if ((time = time / (duration / 2)) < 1) {
      return change / 2 * (time * time * (((overshoot *= 1.525) + 1) * time - overshoot)) + begin;
    } else {
      return change / 2 * ((time -= 2) * time * (((overshoot *= 1.525) + 1) * time + overshoot) + 2) + begin;
    }
  },
  bounceOut: function(time, begin, change, duration) {
    if ((time /= duration) < 1 / 2.75) {
      return change * (7.5625 * time * time) + begin;
    } else if (time < 2 / 2.75) {
      return change * (7.5625 * (time -= 1.5 / 2.75) * time + 0.75) + begin;
    } else if (time < 2.5 / 2.75) {
      return change * (7.5625 * (time -= 2.25 / 2.75) * time + 0.9375) + begin;
    } else {
      return change * (7.5625 * (time -= 2.625 / 2.75) * time + 0.984375) + begin;
    }
  },
  bounceIn: function(time, begin, change, duration) {
    return change - Easie.bounceOut(duration - time, 0, change, duration) + begin;
  },
  bounceInOut: function(time, begin, change, duration) {
    if (time < duration / 2) {
      return Easie.bounceIn(time * 2, 0, change, duration) * 0.5 + begin;
    } else {
      return Easie.bounceOut(time * 2 - duration, 0, change, duration) * 0.5 + change * 0.5 + begin;
    }
  },
  circIn: function(time, begin, change, duration) {
    return -change * (Math.sqrt(1 - (time = time / duration) * time) - 1) + begin;
  },
  circOut: function(time, begin, change, duration) {
    return change * Math.sqrt(1 - (time = time / duration - 1) * time) + begin;
  },
  circInOut: function(time, begin, change, duration) {
    if ((time = time / (duration / 2)) < 1) {
      return -change / 2 * (Math.sqrt(1 - time * time) - 1) + begin;
    } else {
      return change / 2 * (Math.sqrt(1 - (time -= 2) * time) + 1) + begin;
    }
  },
  cubicIn: function(time, begin, change, duration) {
    return change * (time /= duration) * time * time + begin;
  },
  cubicOut: function(time, begin, change, duration) {
    return change * ((time = time / duration - 1) * time * time + 1) + begin;
  },
  cubicInOut: function(time, begin, change, duration) {
    if ((time = time / (duration / 2)) < 1) {
      return change / 2 * time * time * time + begin;
    } else {
      return change / 2 * ((time -= 2) * time * time + 2) + begin;
    }
  },
  elasticOut: function(time, begin, change, duration, amplitude, period) {
    var overshoot;
    if (amplitude == null) {
      amplitude = null;
    }
    if (period == null) {
      period = null;
    }
    if (time === 0) {
      return begin;
    } else if ((time = time / duration) === 1) {
      return begin + change;
    } else {
      if (period == null) {
        period = duration * 0.3;
      }
      if ((amplitude == null) || amplitude < Math.abs(change)) {
        amplitude = change;
        overshoot = period / 4;
      } else {
        overshoot = period / (2 * Math.PI) * Math.asin(change / amplitude);
      }
      return (amplitude * Math.pow(2, -10 * time)) * Math.sin((time * duration - overshoot) * (2 * Math.PI) / period) + change + begin;
    }
  },
  elasticIn: function(time, begin, change, duration, amplitude, period) {
    var overshoot;
    if (amplitude == null) {
      amplitude = null;
    }
    if (period == null) {
      period = null;
    }
    if (time === 0) {
      return begin;
    } else if ((time = time / duration) === 1) {
      return begin + change;
    } else {
      if (period == null) {
        period = duration * 0.3;
      }
      if ((amplitude == null) || amplitude < Math.abs(change)) {
        amplitude = change;
        overshoot = period / 4;
      } else {
        overshoot = period / (2 * Math.PI) * Math.asin(change / amplitude);
      }
      time -= 1;
      return -(amplitude * Math.pow(2, 10 * time)) * Math.sin((time * duration - overshoot) * (2 * Math.PI) / period) + begin;
    }
  },
  elasticInOut: function(time, begin, change, duration, amplitude, period) {
    var overshoot;
    if (amplitude == null) {
      amplitude = null;
    }
    if (period == null) {
      period = null;
    }
    if (time === 0) {
      return begin;
    } else if ((time = time / (duration / 2)) === 2) {
      return begin + change;
    } else {
      if (period == null) {
        period = duration * (0.3 * 1.5);
      }
      if ((amplitude == null) || amplitude < Math.abs(change)) {
        amplitude = change;
        overshoot = period / 4;
      } else {
        overshoot = period / (2 * Math.PI) * Math.asin(change / amplitude);
      }
      if (time < 1) {
        return -0.5 * (amplitude * Math.pow(2, 10 * (time -= 1))) * Math.sin((time * duration - overshoot) * ((2 * Math.PI) / period)) + begin;
      } else {
        return amplitude * Math.pow(2, -10 * (time -= 1)) * Math.sin((time * duration - overshoot) * (2 * Math.PI) / period) + change + begin;
      }
    }
  },
  expoIn: function(time, begin, change, duration) {
    if (time === 0) {
      return begin;
    }
    return change * Math.pow(2, 10 * (time / duration - 1)) + begin;
  },
  expoOut: function(time, begin, change, duration) {
    if (time === duration) {
      return begin + change;
    }
    return change * (-Math.pow(2, -10 * time / duration) + 1) + begin;
  },
  expoInOut: function(time, begin, change, duration) {
    if (time === 0) {
      return begin;
    } else if (time === duration) {
      return begin + change;
    } else if ((time = time / (duration / 2)) < 1) {
      return change / 2 * Math.pow(2, 10 * (time - 1)) + begin;
    } else {
      return change / 2 * (-Math.pow(2, -10 * (time - 1)) + 2) + begin;
    }
  },
  linearNone: function(time, begin, change, duration) {
    return change * time / duration + begin;
  },
  linearIn: function(time, begin, change, duration) {
    return Easie.linearNone(time, begin, change, duration);
  },
  linearOut: function(time, begin, change, duration) {
    return Easie.linearNone(time, begin, change, duration);
  },
  linearInOut: function(time, begin, change, duration) {
    return Easie.linearNone(time, begin, change, duration);
  },
  quadIn: function(time, begin, change, duration) {
    return change * (time = time / duration) * time + begin;
  },
  quadOut: function(time, begin, change, duration) {
    return -change * (time = time / duration) * (time - 2) + begin;
  },
  quadInOut: function(time, begin, change, duration) {
    if ((time = time / (duration / 2)) < 1) {
      return change / 2 * time * time + begin;
    } else {
      return -change / 2 * ((time -= 1) * (time - 2) - 1) + begin;
    }
  },
  quartIn: function(time, begin, change, duration) {
    return change * (time = time / duration) * time * time * time + begin;
  },
  quartOut: function(time, begin, change, duration) {
    return -change * ((time = time / duration - 1) * time * time * time - 1) + begin;
  },
  quartInOut: function(time, begin, change, duration) {
    if ((time = time / (duration / 2)) < 1) {
      return change / 2 * time * time * time * time + begin;
    } else {
      return -change / 2 * ((time -= 2) * time * time * time - 2) + begin;
    }
  },
  quintIn: function(time, begin, change, duration) {
    return change * (time = time / duration) * time * time * time * time + begin;
  },
  quintOut: function(time, begin, change, duration) {
    return change * ((time = time / duration - 1) * time * time * time * time + 1) + begin;
  },
  quintInOut: function(time, begin, change, duration) {
    if ((time = time / (duration / 2)) < 1) {
      return change / 2 * time * time * time * time * time + begin;
    } else {
      return change / 2 * ((time -= 2) * time * time * time * time + 2) + begin;
    }
  },
  sineIn: function(time, begin, change, duration) {
    return -change * Math.cos(time / duration * (Math.PI / 2)) + change + begin;
  },
  sineOut: function(time, begin, change, duration) {
    return change * Math.sin(time / duration * (Math.PI / 2)) + begin;
  },
  sineInOut: function(time, begin, change, duration) {
    return -change / 2 * (Math.cos(Math.PI * time / duration) - 1) + begin;
  }
};

module.exports = Easie;
});

;require.register("lib/element.coffee", function(exports, require, module) {
var Prefix, getBounds, transform, transition;

Prefix = require("lib/prefix");

getBounds = function(el, offset) {
  var bottom, height, left, right, top, width, _ref;
  if (offset == null) {
    offset = {
      x: 0,
      y: 0
    };
  }
  _ref = el.getBoundingClientRect(), top = _ref.top, left = _ref.left, right = _ref.right, bottom = _ref.bottom, width = _ref.width, height = _ref.height;
  return {
    top: top + offset.y,
    left: left + offset.x,
    right: right + offset.x,
    bottom: bottom + offset.y,
    width: width,
    height: height
  };
};

transform = function(el, transform) {
  var opacity, rotate, scale, skew, x, y, z;
  if (el == null) {
    return console.error("No element to style");
  }
  if (_.isObject(transform)) {
    x = transform.x, y = transform.y, z = transform.z, scale = transform.scale, skew = transform.skew, rotate = transform.rotate, opacity = transform.opacity;
    if (x == null) {
      x = 0;
    }
    if (y == null) {
      y = 0;
    }
    if (z == null) {
      z = 0;
    }
    if (skew == null) {
      skew = 0;
    }
    if (scale == null) {
      scale = 1;
    }
    if (rotate == null) {
      rotate = 0;
    }
    if (typeof x === "number") {
      x += "px";
    }
    if (typeof y === "number") {
      y += "px";
    }
    if (typeof skew === "number") {
      skew += "deg";
    }
    if (typeof rotate === "number") {
      rotate += "deg";
    }
    el.style[Prefix("transform")] = "translate3d(" + x + ", " + y + ", 0)\nskew(" + skew + ")\nscale(" + scale + ")\nrotate(" + rotate + ")";
    if (opacity != null) {
      el.style.opacity = opacity;
    }
    if (transform.transition != null) {
      return transition(el, transform.transition);
    }
  } else if (_.isString(transform)) {
    return el.style[Prefix("transform")] = transform;
  }
};

transition = function(el, transition, triggerRefresh) {
  if (el == null) {
    return console.error("No element to style");
  }
  el.style[Prefix("transition")] = transition;
  if (triggerRefresh) {
    return el.offsetLeft;
  }
};

module.exports = {
  getBounds: getBounds,
  transform: transform,
  transition: transition
};
});

;require.register("lib/fit-text.coffee", function(exports, require, module) {
var DEFAULT_CLONE_STYLE, FONT_SIZE_DECREMENT, MINIMUM_FONT_SIZE_SCROLL, MINIMUM_FONT_SIZE_STATIC, makeClone, makeSpacer;

MINIMUM_FONT_SIZE_STATIC = 9;

MINIMUM_FONT_SIZE_SCROLL = 12;

FONT_SIZE_DECREMENT = 0.5;

DEFAULT_CLONE_STYLE = {
  position: "absolute",
  top: "-100%",
  left: "-100%",
  visibility: "hidden",
  fontSize: ""
};

makeClone = function(el) {
  var attr, clone, key, style, val, _i, _len, _ref;
  style = window.getComputedStyle(el);
  clone = el.cloneNode();
  clone.innerHTML = el.innerHTML;
  for (key in DEFAULT_CLONE_STYLE) {
    val = DEFAULT_CLONE_STYLE[key];
    clone.style[key] = val;
  }
  _ref = ["width", "height", "padding", "border"];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    attr = _ref[_i];
    clone.style[attr] = style[attr];
  }
  return clone;
};

makeSpacer = function() {
  var spacer;
  spacer = document.createElement("div");
  spacer.id = "content-spacer";
  return spacer;
};

module.exports = function(el, done) {
  var active, clone, fitHeight, fontSize, minFontSize, parent, repeat, spacer;
  if (!el) {
    return typeof done === "function" ? done() : void 0;
  }
  minFontSize = window.getComputedStyle(el).overflow === "auto" ? MINIMUM_FONT_SIZE_SCROLL : MINIMUM_FONT_SIZE_STATIC;
  el.classList.add("fitting");
  el.classList.remove("fitted");
  parent = el.parentNode;
  clone = makeClone(el);
  spacer = makeSpacer();
  active = true;
  parent.appendChild(clone);
  clone.appendChild(spacer);
  fontSize = parseFloat(window.getComputedStyle(parent).fontSize);
  fitHeight = parent.offsetHeight;
  (repeat = function(top) {
    var _ref;
    if (!active) {
      return;
    }
    if (top !== spacer.offsetTop) {
      return window.setTimeout((function() {
        return repeat(spacer.offsetTop);
      }), 0);
    } else if (spacer.offsetTop > fitHeight && fontSize > minFontSize) {
      fontSize -= FONT_SIZE_DECREMENT;
      clone.style.fontSize = "" + fontSize + "px";
      return repeat(top);
    } else {
      el.style.fontSize = clone.style.fontSize;
      el.offsetHeight;
      el.classList.remove("fitting");
      el.classList.add("fitted");
      if (typeof done === "function") {
        done();
      }
      return (_ref = clone.parentNode) != null ? _ref.removeChild(clone) : void 0;
    }
  })(top);
  return {
    cancel: function() {
      return active = false;
    }
  };
};
});

;require.register("lib/i18n.coffee", function(exports, require, module) {
var attemptLoadResources, getResources, initialize,
  __slice = [].slice;

attemptLoadResources = function(localeName) {
  var locale;
  localeName = localeName.toLowerCase();
  try {
    return locale = require("../data/locales/" + localeName + ".yaml");
  } catch (_error) {

  } finally {
    locale;
  }
};

getResources = function(localeName) {
  var localeArr, resource;
  if (localeName == null) {
    localeName = "en";
  }
  while (localeName !== '') {
    resource = attemptLoadResources(localeName);
    if (resource) {
      return resource;
    }
    localeArr = localeName.split('-');
    localeArr.pop();
    localeName = localeArr.join('-');
  }
  return attemptLoadResources("en");
};

initialize = function(locale) {
  var enResources, nativeResources, polyglot, resources;
  if (locale == null) {
    locale = (typeof navigator !== "undefined" && navigator !== null ? navigator.language : void 0) || "en";
  }
  polyglot = new Polyglot({
    locale: locale
  });
  resources = getResources(locale);
  enResources = getResources("en");
  polyglot.extend(enResources);
  polyglot.extend(resources);
  if (((typeof navigator !== "undefined" && navigator !== null ? navigator.language : void 0) != null) && (typeof navigator !== "undefined" && navigator !== null ? navigator.language : void 0) !== locale) {
    nativeResources = getResources(navigator.language);
    polyglot.extend(nativeResources);
  }
  if (typeof moment !== "undefined" && moment !== null) {
    moment.locale(locale);
  }
  return window.i18n = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return polyglot.t.apply(polyglot, args);
  };
};

module.exports = {
  initialize: initialize
};
});

;require.register("lib/logger.coffee", function(exports, require, module) {
var Logger,
  __slice = [].slice;

Logger = (function() {
  function Logger() {
    var args, color, debug, prefix, _ref;
    debug = arguments[0], prefix = arguments[1], color = arguments[2], args = 4 <= arguments.length ? __slice.call(arguments, 3) : [];
    if (debug == null) {
      debug = false;
    }
    if (prefix == null) {
      prefix = "";
    }
    if (color == null) {
      color = "#333";
    }
    return debug && (typeof console !== "undefined" && console !== null ? (_ref = console.log) != null ? typeof _ref.bind === "function" ? _ref.bind.apply(_ref, [console, "%c %c" + prefix + "%c →", "background: " + color + ";       border-radius: 10px;       padding-left: 5px;       font-size: xx-small;       margin-right: 5px;", "color: #333;       font-weight: bold;", ""].concat(__slice.call(args))) : void 0 : void 0 : void 0) || function() {};
  }

  return Logger;

})();

module.exports = Logger;
});

;require.register("lib/middleware.coffee", function(exports, require, module) {
var action, actions, fillPossibleActions, initialize, platforms, possibleActions, process, process_type, registerMiddlewares, registerPlatformMiddlewares, registeredMiddlewares, run, _action,
  __slice = [].slice;

process = function(remainingMiddlewares) {
  return function(action) {
    var mProcess, middleware, next, nextMiddlewares;
    if (remainingMiddlewares.length === 0) {
      return;
    }
    middleware = remainingMiddlewares[0];
    nextMiddlewares = remainingMiddlewares.slice(1, remainingMiddlewares.length);
    next = process(nextMiddlewares);
    mProcess = middleware.process || process_type(middleware.type, middleware.commands);
    if (action != null) {
      return mProcess(action, next);
    }
  };
};

process_type = function(only_type, commands) {
  return function(_arg, next) {
    var command, new_command, params, type;
    type = _arg.type, command = _arg.command, params = _arg.params;
    if (type === only_type) {
      new_command = commands(next)[command];
      if (new_command != null) {
        return next(new_command.apply(null, params));
      } else {
        return next({
          type: type,
          command: command,
          params: params
        });
      }
    } else {
      return next({
        type: type,
        command: command,
        params: params
      });
    }
  };
};

run = function(command, method, id_generator) {
  var code, iframe, url;
  iframe = document.createElement("IFRAME");
  code = method(command, id_generator);
  url = "gap-code://" + (escape(unescape(encodeURIComponent(code))));
  iframe.setAttribute("src", url);
  document.documentElement.appendChild(iframe);
  iframe.parentNode.removeChild(iframe);
  return iframe = null;
};

registeredMiddlewares = [];

registerMiddlewares = function(middlewareList) {
  var err, loaded, loadedMiddleware, middlewareToLoad, _i, _len;
  loaded = [];
  for (_i = 0, _len = middlewareList.length; _i < _len; _i++) {
    middlewareToLoad = middlewareList[_i];
    try {
      loadedMiddleware = require(middlewareToLoad);
      loaded.push(loadedMiddleware);
    } catch (_error) {
      err = _error;
      console.error("Error while requiring " + middlewareToLoad, err);
    }
  }
  registeredMiddlewares = loaded;
  return Backbone.Events.on("publish", process(registeredMiddlewares));
};

_action = function(type, command, direction) {
  if (direction == null) {
    direction = "publish";
  }
  return function() {
    var event, params;
    params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    event = direction;
    if (direction === "subscribe") {
      event += ":" + type + ":" + command;
    }
    return Backbone.Events.trigger(event, {
      type: type,
      command: command,
      params: params
    });
  };
};

possibleActions = {};

fillPossibleActions = function(middlewares, active) {
  var command, m, name, val, _i, _len, _results;
  possibleActions = {};
  _results = [];
  for (_i = 0, _len = middlewares.length; _i < _len; _i++) {
    m = middlewares[_i];
    if (m.type != null) {
      name = m.type[0].toUpperCase() + m.type.slice(1);
      possibleActions[name] = {};
      if (m.commands != null) {
        _results.push((function() {
          var _ref, _results1;
          _ref = m.commands();
          _results1 = [];
          for (command in _ref) {
            val = _ref[command];
            _results1.push(possibleActions[name][command] = _action(m.type, command));
          }
          return _results1;
        })());
      } else {
        _results.push(void 0);
      }
    } else {
      _results.push(void 0);
    }
  }
  return _results;
};

registerPlatformMiddlewares = function(platforms, my_platform) {
  var allMiddlewares, middlewares, platform;
  allMiddlewares = [];
  for (platform in platforms) {
    middlewares = platforms[platform];
    if (platform !== my_platform) {
      allMiddlewares = allMiddlewares.concat(middlewares);
    }
  }
  allMiddlewares = allMiddlewares.concat(platforms[my_platform]);
  fillPossibleActions(allMiddlewares.map(require));
  if (_.isString(my_platform)) {
    return registerMiddlewares(platforms[my_platform]);
  } else if (_.isArray(my_platform)) {
    return registerMiddlewares(my_platform);
  }
};

actions = function(type) {
  if (type != null) {
    return possibleActions != null ? possibleActions[type] : void 0;
  } else {
    return possibleActions;
  }
};

action = function(direction) {
  if (direction == null) {
    direction = "publish";
  }
  return function(namespace) {
    var command, type, _ref;
    _ref = namespace.split(/\:/), type = _ref[0], command = _ref[1];
    return _action(type, command, direction);
  };
};

platforms = {
  fit: ["lib/middleware/fit/analytics", "lib/middleware/fit/session", "lib/middleware/fit/sound", "lib/middleware/fit/backbone_event", "lib/middleware/fit/cdv_plugin"],
  browser: ["lib/middleware/session", "lib/middleware/ed/analytics", "lib/middleware/ed/app_lesson", "lib/middleware/browser/sound", "lib/middleware/browser/backbone_event", "lib/middleware/browser/webview"],
  app: ["lib/middleware/session", "lib/middleware/ed/analytics", "lib/middleware/ed/app_lesson", "lib/middleware/browser/sound-html", "lib/middleware/fit/backbone_event", "lib/middleware/fit/cdv_plugin", "lib/middleware/ed/webview"],
  scorm: ["lib/middleware/session", "lib/middleware/ed/scorm_analytics", "lib/middleware/ed/scorm_lesson", "lib/middleware/browser/sound", "lib/middleware/browser/backbone_event", "lib/middleware/browser/webview"]
};

initialize = function(platform) {
  var _ref;
  if (platform == null) {
    platform = ((_ref = window.__) != null ? _ref.platform : void 0) || "browser";
  }
  if (_.isArray(platform) && platform.indexOf("lib/middleware/ed/analytics") > -1) {
    platform = "app";
  }
  return registerPlatformMiddlewares(platforms, platform);
};

module.exports = {
  process: process,
  run: run,
  initialize: initialize,
  actions: actions,
  action: action(),
  publish: action("publish"),
  subscribe: action("subscribe")
};
});

;require.register("lib/middleware/browser/backbone_event.coffee", function(exports, require, module) {
var DEBUG, eventToCode, process, runCommand;

DEBUG = false;

eventToCode = function(_arg) {
  var command, command_str, params, type, _ref, _ref1, _ref2;
  command = _arg.command, type = _arg.type, params = _arg.params;
  command_str = "Backbone.Events.trigger(";
  if (((_ref = window.__) != null ? (_ref1 = _ref.slidedeck) != null ? _ref1.id : void 0 : void 0) != null) {
    command_str += "'slidedeck:" + window.__.slidedeck.id + (":" + command + "'");
  } else if (((_ref2 = window.__) != null ? _ref2.challenge : void 0) != null) {
    command_str += "'challenge:" + command + "'";
  } else {
    command_str += "'" + command + "'";
  }
  if (_.isArray(params) && params.length > 0) {
    command_str += ", " + (JSON.stringify(params[0]));
  }
  command_str += ");";
  if (DEBUG) {
    console.log("BACKBONE", command_str);
  }
  return command_str;
};

runCommand = function(params) {
  var message, _ref;
  if ((_ref = window.parent) != null ? _ref.postMessage : void 0) {
    message = eventToCode(params);
    return window.parent.postMessage(message, "*");
  }
};

process = function(command, next) {
  if ((command != null ? command.type : void 0) === "event") {
    return runCommand(command, null);
  } else {
    return next(command);
  }
};

module.exports = {
  process: process,
  type: "backbone_event"
};
});

;require.register("lib/middleware/browser/sound-audio-api.coffee", function(exports, require, module) {
var audioContext, commands, context, disableSystemSounds, enabled, ev, fadeIn, fadeOut, firstSoundPlayed, getAudio, getLastAudio, getPath, getPermission, loadAudio, loup, onPlayEmpty, play, playEmpty, playOpts, preload, progressInterval, sounds, sources, stop, stopAll, timers, _firstSoundPlayed, _i, _len, _ref;

sounds = {};

timers = {};

enabled = true;

audioContext = window.AudioContext || window.webkitAudioContext;

context = null;

_firstSoundPlayed = false;

onPlayEmpty = [];

sources = {};

getPath = function(name) {
  name = name.replace("system:", "audio/");
  if (name.match(/\.[^\.]+$/)) {
    return name;
  } else {
    return "" + name + ".mp3";
  }
};

loadAudio = function(path) {
  var cancel, cancelled, isCancelled, promise;
  cancelled = false;
  cancel = function() {
    return cancelled = true;
  };
  isCancelled = function() {
    return cancelled;
  };
  promise = new Promise(function(resolve, reject) {
    var req;
    req = new XMLHttpRequest();
    req.open('GET', path, true);
    req.responseType = 'arraybuffer';
    req.onload = function() {
      if (cancelled) {
        return reject("sound cancelled");
      } else {
        return context.decodeAudioData(req.response, resolve, reject);
      }
    };
    req.onerror = function() {
      return reject("load error");
    };
    return req.send();
  });
  return {
    promise: promise,
    cancel: cancel,
    isCancelled: isCancelled
  };
};

getLastAudio = function(name) {
  return new Promise(function(resolve, reject) {
    if ((sources[name] != null) && sources[name].length > 0) {
      return resolve(sources[name][sources[name].length - 1]);
    } else {
      return reject("no audio playing");
    }
  });
};

getAudio = function(name, from) {
  if (from == null) {
    from = sounds;
  }
  if (name.match("system:")) {
    if (enabled) {
      from[name] = loadAudio(getPath(name));
    }
  } else {
    from[name] = loadAudio(getPath(name));
  }
  return from[name].promise.then(function(buf) {
    var bufferSource, gain;
    if (from[name].isCancelled()) {
      throw new Error("sound cancelled");
    }
    bufferSource = context.createBufferSource();
    gain = context.createGain();
    bufferSource.buffer = buf;
    bufferSource.connect(gain);
    gain.connect(context.destination);
    if (sources[name] == null) {
      sources[name] = [];
    }
    sources[name].push({
      bufferSource: bufferSource,
      gain: gain
    });
    return {
      bufferSource: bufferSource,
      gain: gain
    };
  });
};

preload = function(path, id, cb) {
  if (cb == null) {
    cb = function() {};
  }
  if (_firstSoundPlayed) {
    getAudio(path);
    return cb();
  } else {
    return onPlayEmpty.push({
      path: path,
      id: id,
      cb: cb
    });
  }
};

playEmpty = function(cb) {
  var bs, buf, id, path, _i, _len, _ref;
  if (cb == null) {
    cb = function() {};
  }
  if (_firstSoundPlayed && context) {
    return cb();
  }
  _firstSoundPlayed = true;
  if (context == null) {
    context = new audioContext();
  }
  buf = context.createBuffer(2, 22050, 44100);
  bs = context.createBufferSource();
  bs.buffer = buf;
  bs.connect(context.destination);
  bs.start();
  for (_i = 0, _len = onPlayEmpty.length; _i < _len; _i++) {
    _ref = onPlayEmpty[_i], path = _ref.path, id = _ref.id, cb = _ref.cb;
    preload(path, id, cb);
  }
  return cb();
};

getPermission = function(_arg) {
  var isAndroid, type, ua, _ref;
  type = _arg.type;
  ua = (typeof navigator !== "undefined" && navigator !== null ? (_ref = navigator.userAgent) != null ? _ref.toLowerCase() : void 0 : void 0) || "";
  isAndroid = ua.indexOf("android") > -1;
  if (!isAndroid || type !== "touchstart") {
    playEmpty();
  }
  return window.removeEventListener(type, getPermission, true);
};

_ref = ["click", "touchend", "touchstart"];
for (_i = 0, _len = _ref.length; _i < _len; _i++) {
  ev = _ref[_i];
  window.addEventListener(ev, getPermission, true);
}

progressInterval = null;

playOpts = function(_arg) {
  var clearTimer, source;
  clearTimer = _arg.clearTimer, source = _arg.source;
  return function(name, cb) {
    var ended, sourceP;
    if (cb == null) {
      cb = function() {};
    }
    sourceP = source != null ? new Promise(function(resolve, reject) {
      return resolve(source);
    }) : getAudio(name);
    _firstSoundPlayed = true;
    ended = false;
    return sourceP.then(function(_arg1) {
      var bufferSource, duration, onComplete, onProgress, onTimeUpdate, startTime, _ref1;
      bufferSource = _arg1.bufferSource;
      if (clearTimer) {
        window.clearTimeout(timers[name]);
      }
      if (!_.isFunction(cb)) {
        _ref1 = cb, onProgress = _ref1.onProgress, onComplete = _ref1.onComplete, cb = _ref1.cb;
        startTime = Date.now();
        duration = bufferSource.buffer.duration * 1000;
        onTimeUpdate = function() {
          var progress;
          if (ended) {
            return window.clearInterval(progressInterval);
          } else {
            progress = (Date.now() - startTime) / duration;
            progress = Math.min(progress, 1.0);
            return onProgress(progress);
          }
        };
        bufferSource.onended = function() {
          ended = true;
          onProgress(1);
          return onComplete();
        };
        if (progressInterval != null) {
          window.clearInterval(progressInterval);
        }
        window.setInterval(onTimeUpdate, 20);
      }
      bufferSource.start(0);
      return cb({
        name: name
      });
    });
  };
};

play = playOpts({
  clearTimer: true
});

loup = function(name, cb) {
  if (cb == null) {
    cb = function() {};
  }
  return getAudio(name).then(function(_arg) {
    var bufferSource, duration, firstTime, gain, repeat;
    bufferSource = _arg.bufferSource, gain = _arg.gain;
    duration = bufferSource.buffer.duration * 1000;
    if (!(duration > 0)) {
      return;
    }
    window.clearTimeout(timers[name]);
    firstTime = true;
    (repeat = function() {
      if (firstTime) {
        playOpts({
          clearTimer: false,
          source: {
            bufferSource: bufferSource,
            gain: gain
          }
        })(name);
        firstTime = false;
      } else {
        play(name);
      }
      return timers[name] = window.setTimeout(repeat, duration);
    })();
    return cb();
  });
};

fadeIn = function(name, ms, increment) {
  if (ms == null) {
    ms = 2000;
  }
  if (increment == null) {
    increment = 0.05;
  }
  return loup(name, function() {
    return getLastAudio(name).then(function(_arg) {
      var bufferSource, gain, repeat;
      bufferSource = _arg.bufferSource, gain = _arg.gain;
      gain.gain.value = 0;
      return (repeat = function() {
        gain.gain.value = Math.max((gain.gain.value || 0.0) + increment, 0);
        if (gain.gain.value < 1) {
          return window.setTimeout(repeat, ms * increment);
        }
      })();
    });
  });
};

fadeOut = function(name, ms, increment) {
  if (ms == null) {
    ms = 2000;
  }
  if (increment == null) {
    increment = 0.05;
  }
  return getLastAudio(name).then(function(_arg) {
    var bufferSource, gain, msElapsed, repeat;
    bufferSource = _arg.bufferSource, gain = _arg.gain;
    msElapsed = 0;
    return (repeat = function() {
      msElapsed += increment * ms;
      gain.gain.value = Math.max((gain.gain.value || 1.0) - increment, 0);
      if (msElapsed < ms) {
        return window.setTimeout(repeat, ms * increment);
      } else {
        window.clearTimeout(timers[name]);
        try {
          return bufferSource.stop();
        } catch (_error) {}
      }
    })();
  });
};

stopAll = function() {
  var bufferSource, gain, name, sourceList, _j, _len1, _ref1, _ref2, _results;
  _results = [];
  for (name in sources) {
    sourceList = sources[name];
    if ((_ref1 = sounds[name]) != null) {
      if (typeof _ref1.cancel === "function") {
        _ref1.cancel();
      }
    }
    for (_j = 0, _len1 = sourceList.length; _j < _len1; _j++) {
      _ref2 = sourceList[_j], bufferSource = _ref2.bufferSource, gain = _ref2.gain;
      try {
        bufferSource.stop();
      } catch (_error) {}
    }
    sources[name] = [];
    _results.push(window.clearTimeout(timers[name]));
  }
  return _results;
};

stop = function(name, cb) {
  var bufferSource, gain, _j, _len1, _ref1, _ref2, _ref3;
  if (cb == null) {
    cb = function() {};
  }
  window.clearTimeout(timers[name]);
  if ((_ref1 = sounds[name]) != null) {
    if (typeof _ref1.cancel === "function") {
      _ref1.cancel();
    }
  }
  _ref2 = sources[name] || [];
  for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
    _ref3 = _ref2[_j], bufferSource = _ref3.bufferSource, gain = _ref3.gain;
    try {
      bufferSource.stop();
    } catch (_error) {}
  }
  sources[name] = [];
  return cb();
};

disableSystemSounds = function() {
  return enabled = false;
};

firstSoundPlayed = function(cb) {
  return cb(null, _firstSoundPlayed);
};

commands = function(next) {
  return {
    preload: preload,
    stop: stop,
    play: play,
    stopAll: stopAll,
    fadeIn: fadeIn,
    fadeOut: fadeOut,
    disableSystemSounds: disableSystemSounds,
    loop: loup,
    stopId: stop,
    playId: play,
    loopId: loup,
    playEmpty: playEmpty,
    firstSoundPlayed: firstSoundPlayed
  };
};

module.exports = {
  type: "sound",
  commands: commands
};
});

;require.register("lib/middleware/browser/sound-html.coffee", function(exports, require, module) {
var clones, commands, disableSystemSounds, enabled, fadeIn, fadeOut, firstSoundPlayed, getAudio, getPath, loup, play, preload, sounds, stop, stopAll, timers;

sounds = {};

clones = {};

timers = {};

enabled = true;

getPath = function(name) {
  name = name.replace("system:", "audio/");
  if (name.match(/\.[^\.]+$/)) {
    return name;
  } else {
    return "" + name + ".mp3";
  }
};

getAudio = function(name, from) {
  if (from == null) {
    from = sounds;
  }
  if (name == null) {
    return null;
  }
  if (from[name]) {
    return from[name];
  } else if (name.match("system:")) {
    if (enabled) {
      return from[name] = new Audio(getPath(name));
    }
  } else {
    return from[name] = new Audio(getPath(name));
  }
};

preload = function(path, id, cb) {
  if (cb == null) {
    cb = function() {};
  }
  getAudio(path);
  return cb();
};

play = function(name, cb) {
  var $sound, onComplete, onProgress, onTimeUpdate, sound, _ref;
  if (cb == null) {
    cb = function() {};
  }
  sound = getAudio(name);
  window.clearTimeout(timers[name]);
  if (sound != null) {
    $sound = $(sound).off();
    if (!_.isFunction(cb)) {
      _ref = cb, onProgress = _ref.onProgress, onComplete = _ref.onComplete, cb = _ref.cb;
      onTimeUpdate = function() {
        return onProgress(sound.currentTime / sound.duration);
      };
      $sound.on("ended", onComplete);
      $sound.on("timeupdate", onTimeUpdate);
    }
    if (sound.currentTime > 0) {
      sound.currentTime = 0;
    }
    sound.play();
  }
  return cb({
    name: name
  });
};

loup = function(name, cb) {
  var clone, current, duration, original, repeat;
  if (cb == null) {
    cb = function() {};
  }
  if (clones[name] == null) {
    clones[name] = new Audio(getPath(name));
  }
  original = getAudio(name);
  if (original != null) {
    clone = getAudio(name, clones);
    current = original;
    duration = current.duration * 1000;
    if (!(duration > 0)) {
      return;
    }
    window.clearTimeout(timers[name]);
    (repeat = function() {
      current.currentTime = 0;
      current.play();
      current = current === original ? clone : original;
      return timers[name] = window.setTimeout(repeat, duration);
    })();
  }
  return cb();
};

stop = function(name, cb) {
  var _ref, _ref1;
  if (cb == null) {
    cb = function() {};
  }
  window.clearTimeout(timers[name]);
  if ((_ref = getAudio(name)) != null) {
    _ref.pause();
  }
  if ((_ref1 = getAudio(name, clones)) != null) {
    _ref1.pause();
  }
  return cb();
};

fadeIn = function(name, ms, increment) {
  var clone, elapsed, repeat, sound;
  if (ms == null) {
    ms = 2000;
  }
  if (increment == null) {
    increment = 0.05;
  }
  sound = getAudio(name);
  clone = getAudio(name, clones);
  elapsed = 0;
  if (sound != null) {
    loup(name);
    clone.volume = sound.volume = 0;
    return (repeat = function() {
      clone.volume = sound.volume = Math.min(sound.volume + increment, 1);
      if (sound.volume < 1 && elapsed < ms) {
        elapsed += ms * increment;
        return window.setTimeout(repeat, ms * increment);
      }
    })();
  }
};

fadeOut = function(name, ms, increment) {
  var clone, elapsed, repeat, sound;
  if (ms == null) {
    ms = 2000;
  }
  if (increment == null) {
    increment = 0.05;
  }
  sound = getAudio(name);
  clone = getAudio(name, clones);
  elapsed = 0;
  if (sound != null) {
    return (repeat = function() {
      clone.volume = sound.volume = Math.max(sound.volume - increment, 0);
      if (sound.volume > 0 && elapsed < ms) {
        elapsed += ms * increment;
        return window.setTimeout(repeat, ms * increment);
      } else {
        stop(name);
        return clone.volume = sound.volume = 1;
      }
    })();
  }
};

stopAll = function() {
  var name, sound, _results;
  _results = [];
  for (name in sounds) {
    sound = sounds[name];
    _results.push(sound.pause());
  }
  return _results;
};

disableSystemSounds = function() {
  return enabled = false;
};

firstSoundPlayed = function(cb) {
  return cb(null, true);
};

commands = function(next) {
  return {
    preload: preload,
    stop: stop,
    play: play,
    stopAll: stopAll,
    fadeIn: fadeIn,
    fadeOut: fadeOut,
    disableSystemSounds: disableSystemSounds,
    loop: loup,
    stopId: stop,
    playId: play,
    loopId: loup,
    firstSoundPlayed: firstSoundPlayed
  };
};

module.exports = {
  type: "sound",
  commands: commands
};
});

;require.register("lib/middleware/browser/sound.coffee", function(exports, require, module) {
var android, audioContext, iOS;

audioContext = window.AudioContext || window.webkitAudioContext;

iOS = /iPad|iPhone|iPod/.test(typeof navigator !== "undefined" && navigator !== null ? navigator.userAgent : void 0) && !window.MSStream;

android = /android/i.test(typeof navigator !== "undefined" && navigator !== null ? navigator.userAgent : void 0);

module.exports = (audioContext != null) && (typeof Promise !== "undefined" && Promise !== null) && (iOS || android) ? require('./sound-audio-api') : require('./sound-html');
});

;require.register("lib/middleware/browser/webview.coffee", function(exports, require, module) {
var process;

process = function(command, next) {
  var target, url, _ref;
  if ((command != null ? command.type : void 0) === "url") {
    _ref = command.params[0], target = _ref.target, url = _ref.url;
    if (!(url.indexOf('http') === 0 || url.indexOf('#') === 0)) {
      url = "http://" + url;
    }
    return window.open(url, target);
  } else {
    return next(command);
  }
};

module.exports = {
  process: process,
  type: "url"
};
});

;require.register("lib/middleware/ed/analytics.coffee", function(exports, require, module) {
var commands, startTracking, stopTracking, trackEvent, trackInteraction, trackView;

trackView = function(data, done) {
  return Application.publish("event:view")(data);
};

trackInteraction = function(data) {
  return Application.publish("event:interaction")(data);
};

trackEvent = function() {};

startTracking = function() {};

stopTracking = function() {};

commands = function(next) {
  return {
    trackInteraction: trackInteraction,
    trackView: trackView,
    startTracking: startTracking,
    stopTracking: stopTracking,
    trackEvent: trackEvent
  };
};

module.exports = {
  type: "analytics",
  commands: commands
};
});

;require.register("lib/middleware/ed/app_lesson.coffee", function(exports, require, module) {
var commands, complete, exit, open, opener, receiveMessage;

complete = function(data, done) {
  return Application.publish("event:completed")({});
};

open = function() {};

exit = function() {};

commands = function(next) {
  return {
    complete: complete,
    open: open,
    exit: exit
  };
};

receiveMessage = function(event) {
  var err, origin;
  origin = event.origin || event.originalEvent.origin;
  commands = event.data;
  try {
    return eval(commands);
  } catch (_error) {
    err = _error;
  }
};

window.addEventListener("message", receiveMessage, false);

opener = window.opener || window.parent;

if (opener != null) {
  opener.postMessage("Backbone.Events.trigger('lesson-ready');", '*');
}

module.exports = {
  type: "lesson",
  commands: commands
};
});

;require.register("lib/middleware/ed/scorm_analytics.coffee", function(exports, require, module) {
var commands, interactions, scores, startTracking, stopTracking, track, trackEvent, trackInteraction, trackScoreAndCompletion, trackView;

interactions = [];

scores = {};

track = function(event, done) {
  if (done == null) {
    done = function() {};
  }
};

trackView = function(data, done) {
  if (done == null) {
    done = function() {};
  }
};

trackInteraction = function(data, done) {
  var earned, max, min, name, total, _ref, _ref1, _ref2;
  if (done == null) {
    done = function() {};
  }
  interactions.push(data);
  if (((data != null ? (_ref = data.configuration) != null ? _ref.nb_stars : void 0 : void 0) != null) || ((data != null ? (_ref1 = data.configuration) != null ? _ref1.weighting : void 0 : void 0) != null)) {
    name = data.name;
    total = data.configuration.weighting != null ? data.configuration.weighting : data.configuration.nb_stars;
    earned = data.game ? ((_ref2 = data.slideData.game.stars, max = _ref2.max, min = _ref2.min, _ref2), data.configuration.weighting != null ? data.score.total < min ? 0 : data.score.total > max ? total : Math.floor((data.score.total - min) / ((max - min) / total)) : data.nb_stars_earned) : data.correct ? total : 0;
    return scores[name] = {
      earned: earned,
      total: total
    };
  }
};

trackScoreAndCompletion = function(minScaledScore, incompleteOnFail) {
  var failStatus, k, v, _earned, _scaled, _scores, _total;
  if (minScaledScore == null) {
    minScaledScore = 0;
  }
  if (incompleteOnFail == null) {
    incompleteOnFail = false;
  }
  _scores = ((function() {
    var _results;
    _results = [];
    for (k in scores) {
      v = scores[k];
      _results.push(v);
    }
    return _results;
  })()) || [];
  _earned = _scores.reduce((function(result, s) {
    return result + s.earned;
  }), 0);
  _total = _scores.reduce((function(result, s) {
    return result + s.total;
  }), 0);
  _scaled = _earned * 100.0 / _total;
  pipwerks.SCORM.set("cmi.core.score.raw", _earned);
  pipwerks.SCORM.set("cmi.core.score.min", 0);
  pipwerks.SCORM.set("cmi.core.score.max", _total);
  if (_scores.length === 0 || _scaled >= minScaledScore) {
    return pipwerks.SCORM.set("cmi.core.lesson_status", "passed");
  } else {
    failStatus = incompleteOnFail ? "incomplete" : "failed";
    return pipwerks.SCORM.set("cmi.core.lesson_status", failStatus);
  }
};

trackEvent = function() {};

startTracking = function() {};

stopTracking = function() {};

commands = function(next) {
  return {
    trackInteraction: trackInteraction,
    trackView: trackView,
    startTracking: startTracking,
    stopTracking: stopTracking,
    trackEvent: trackEvent,
    trackScoreAndCompletion: trackScoreAndCompletion
  };
};

module.exports = {
  type: "analytics",
  commands: commands
};
});

;require.register("lib/middleware/ed/scorm_lesson.coffee", function(exports, require, module) {
var Lesson, commands, complete, exit, open, padLeft, setSessionTime, start_time;

Lesson = require('../../../models/lesson');

start_time = null;

open = function() {
  start_time = Date.now();
  return pipwerks.SCORM.init();
};

padLeft = function(val, length) {
  var l, str, vl;
  if (val == null) {
    val = "";
  }
  str = "";
  vl = val.toString().length;
  if (vl >= length) {
    return val;
  } else {
    l = length - vl + 1;
    return (new Array(l).join("0")).substr(0, length - vl) + val;
  }
};

setSessionTime = function() {
  var end_time, hours, minutes, seconds, session_time;
  end_time = Date.now();
  session_time = Math.floor((end_time - start_time) / 1000);
  hours = Math.floor(session_time / 3600);
  minutes = Math.floor((session_time - hours * 3600) / 60);
  seconds = session_time - hours * 3600 + minutes * 60;
  session_time = [padLeft(hours, 4), padLeft(minutes, 2), padLeft(seconds, 2)].join(":");
  return pipwerks.SCORM.set("cmi.core.session_time", session_time);
};

complete = function() {
  var lesson;
  setSessionTime();
  lesson = new Lesson();
  return lesson.load(function(err, lessonData) {
    var incompleteOnFail, minimumScore, _ref;
    if (lessonData) {
      _ref = lessonData.config || {}, minimumScore = _ref.minimumScore, incompleteOnFail = _ref.incompleteOnFail;
      Application.actions("Analytics").trackScoreAndCompletion(minimumScore, incompleteOnFail);
    } else {
      console.error("Error loading lesson data", err);
    }
    return pipwerks.SCORM.quit();
  });
};

exit = function() {
  setSessionTime();
  return pipwerks.SCORM.quit();
};

commands = function(next) {
  return {
    complete: complete,
    open: open,
    exit: exit
  };
};

module.exports = {
  type: "lesson",
  commands: commands
};
});

;require.register("lib/middleware/ed/web_analytics.coffee", function(exports, require, module) {
var Cookies, commands, startTracking, stopTracking, track, trackEvent, trackInteraction, trackView;

Cookies = require("../../cookies");

track = function(event, done) {
  var cookies;
  if (done == null) {
    done = function() {};
  }
  cookies = Cookies.read();
  if (!cookies.tracking) {
    return done();
  }
  return $.ajax({
    type: "POST",
    url: '/tracking',
    data: {
      event: event
    }
  });
};

trackView = function(data, done) {
  var definition, event;
  if (done == null) {
    done = function() {};
  }
  definition = {
    type: "view"
  };
  event = data;
  event.name = (parseInt(event.name, 10) + 1).toString();
  event = _.extend(event, definition, Cookies.read());
  event.timestamp = Date.now();
  return track(event, done);
};

trackInteraction = function(data, done) {
  var def, event;
  if (done == null) {
    done = function() {};
  }
  def = {
    type: "slide"
  };
  event = _.extend(data, def, Cookies.read());
  event.timestamp = Date.now();
  Application.publish("event:interaction")(data);
  return track(event, done);
};

trackEvent = function() {};

startTracking = function() {};

stopTracking = function() {};

commands = function(next) {
  return {
    trackInteraction: trackInteraction,
    trackView: trackView,
    startTracking: startTracking,
    stopTracking: stopTracking,
    trackEvent: trackEvent
  };
};

module.exports = {
  type: "analytics",
  commands: commands
};
});

;require.register("lib/middleware/ed/web_lesson.coffee", function(exports, require, module) {
var Cookies, commands, complete, event, open, opener, receiveMessage;

Cookies = require("../../cookies");

event = function(event_type) {
  return function() {
    var cookies, lesson_id;
    cookies = Cookies.read();
    if (!cookies.tracking) {
      return;
    }
    lesson_id = cookies.lesson_id;
    return $.ajax({
      type: "POST",
      url: "/events/lesson/" + event_type + "/" + lesson_id
    });
  };
};

open = function() {
  event("unlocked")();
  return event("opened")();
};

complete = event("completed");

commands = function(next) {
  return {
    complete: complete,
    open: open
  };
};

receiveMessage = function(event) {
  var err, origin;
  origin = event.origin || event.originalEvent.origin;
  commands = event.data;
  try {
    return eval(commands);
  } catch (_error) {
    err = _error;
  }
};

window.addEventListener("message", receiveMessage, false);

opener = window.opener || window.parent;

if (opener != null) {
  opener.postMessage("Backbone.Events.trigger('lesson-ready');", '*');
}

module.exports = {
  type: "lesson",
  commands: commands
};
});

;require.register("lib/middleware/ed/webview.coffee", function(exports, require, module) {
var DEBUG, middleware, openIAB, process, runCommand;

middleware = require('lib/middleware');

DEBUG = true;

openIAB = function(_arg, id_generator) {
  var command_str, target, url, _ref;
  _ref = _arg.params[0], url = _ref.url, target = _ref.target;
  if (url.indexOf('//') === -1) {
    url = "http://" + url;
  }
  command_str = "window.open(\"" + url + "\", \"" + target + "\")";
  return command_str;
};

runCommand = function(command, id_generator) {
  return middleware.run(command, openIAB, id_generator);
};

process = function(command, next) {
  if ((command != null ? command.type : void 0) === "url") {
    return runCommand(command, null);
  } else {
    return next(command);
  }
};

module.exports = {
  process: process,
  type: "url"
};
});

;require.register("lib/middleware/fit/analytics.coffee", function(exports, require, module) {
var Fields, command_event, commands, customDimension, dispatch, sendAppView, sendEvent, setAllDimensions, setTrackingId, startNewTracking, stopTracking;

Fields = {
  ANDROID_APP_UID: 'AppUID',
  ANONYMIZE_IP: '&aip',
  APP_ID: '&aid',
  APP_INSTALLER_ID: '&aiid',
  APP_NAME: '&an',
  APP_VERSION: '&av',
  CAMPAIGN_CONTENT: '&cc',
  CAMPAIGN_ID: '&ci',
  CAMPAIGN_KEYWORD: '&ck',
  CAMPAIGN_MEDIUM: '&cm',
  CAMPAIGN_NAME: '&cn',
  CAMPAIGN_SOURCE: '&cs',
  CLIENT_ID: '&cid',
  CURRENCY_CODE: '&cu',
  DESCRIPTION: '&cd',
  ENCODING: '&de',
  EVENT_ACTION: '&ea',
  EVENT_CATEGORY: '&ec',
  EVENT_LABEL: '&el',
  EVENT_VALUE: '&ev',
  EX_DESCRIPTION: '&exd',
  EX_FATAL: '&exf',
  FLASH_VERSION: '&fl',
  HIT_TYPE: '&t',
  HOSTNAME: '&dh',
  ITEM_CATEGORY: '&iv',
  ITEM_NAME: '&in',
  ITEM_PRICE: '&ip',
  ITEM_QUANTITY: '&iq',
  ITEM_SKU: '&ic',
  JAVA_ENABLED: '&je',
  LANGUAGE: '&ul',
  LOCATION: '&dl',
  NON_INTERACTION: '&ni',
  PAGE: '&dp',
  REFERRER: '&dr',
  SAMPLE_RATE: '&sf',
  SCREEN_COLORS: '&sd',
  SCREEN_NAME: '&cd',
  SCREEN_RESOLUTION: '&sr',
  SESSION_CONTROL: '&sc',
  SOCIAL_ACTION: '&sa',
  SOCIAL_NETWORK: '&sn',
  SOCIAL_TARGET: '&st',
  TIMING_CATEGORY: '&utc',
  TIMING_LABEL: '&utl',
  TIMING_VALUE: '&utt',
  TIMING_VAR: '&utv',
  TITLE: '&dt',
  TRACKING_ID: '&tid',
  TRANSACTION_AFFILIATION: '&ta',
  TRANSACTION_ID: '&ti',
  TRANSACTION_REVENUE: '&tr',
  TRANSACTION_SHIPPING: '&ts',
  TRANSACTION_TAX: '&tt',
  USE_SECURE: 'useSecure',
  VIEWPORT_SIZE: '&vp'
};

command_event = function(method, parameters, callback) {
  return {
    type: "command",
    command: {
      plugin: "navigator.analytics",
      method: method,
      parameters: parameters,
      callback: callback
    }
  };
};

stopTracking = function(callback) {
  return command_event("close", [], callback);
};

setTrackingId = function(next) {
  return function(trackingId) {
    return next(command_event("setTrackingId", [trackingId]));
  };
};

customDimension = function(index, value, cb) {
  return command_event("customDimension", [index, value], cb);
};

sendAppView = function(screenName, cb) {
  var params, _ref, _ref1;
  if ((_ref = window.__) != null ? _ref.needs_start_session : void 0) {
    params = {};
    params[Fields.SESSION_CONTROL] = "start";
    if ((_ref1 = window.__) != null) {
      _ref1.needs_start_session = false;
    }
    return command_event("sendAppViewWithParams", [screenName, params], cb);
  } else {
    return command_event("sendAppView", [screenName], cb);
  }
};

sendEvent = function(category, action, label, value, cb) {
  var errs, group;
  if (_.isBoolean(label)) {
    label = (label ? "1" : "0");
  }
  if (label != null) {
    label = label.toString();
  } else if (value != null) {
    label = value.toString();
  }
  if (value == null) {
    value = _.isNaN(+label) ? 1 : +label;
  }
  errs = [];
  if (!_.isString(category)) {
    errs.push("`category` is not a string");
  }
  if (!_.isString(action)) {
    errs.push("`action` is not a string");
  }
  if (!_.isString(label)) {
    errs.push("`label` is not a string");
  }
  if (!_.isNumber(value)) {
    errs.push("`value` is not a number");
  }
  if (errs.length > 0) {
    group = "Tracking Event Error";
    console.groupCollapsed(group);
    console.log({
      category: category,
      action: action,
      label: label,
      value: value
    });
    console.log(errs.join(", "));
    console.log("Examples:\n  @trackEvent\n    category: \"Game Name\"\n    action: \"Score|Record\"\n    label: \"99999\"\n    value: 99999\n\n  @trackEvent\n    category: \"Accuracy\"\n    action: \"Select our brands\"\n    label: \"Brand 1\"\n    value: 0 or 1   # (incorrect or correct)\n\n  @trackEvent\n    category: \"Feedback\"\n    action: \"How do you rate your experience with this tool?\"\n    label: \"0 - 10\"\n    value: 0 - 10\n\n  @trackEvent\n    category: \"Insight\"\n    action: \"Order these products by...\"\n    label: \"Product 1\"\n    value: 0 - length\n\n  @trackEvent\n    category: \"Video\"\n    action: \"Play|Pause\"\n    label: \"Video Name\"");
    console.groupEnd(group);
  } else {
    return command_event("sendEvent", [category, action, label, value], cb);
  }
};

setAllDimensions = function(next) {
  return function() {
    var dimension, index, _i, _len, _ref, _ref1, _results;
    if (((_ref = window.__) != null ? _ref.ga_dimensions : void 0) != null) {
      _ref1 = window.__.ga_dimensions;
      _results = [];
      for (index = _i = 0, _len = _ref1.length; _i < _len; index = ++_i) {
        dimension = _ref1[index];
        _results.push(next(customDimension(index + 1, dimension)));
      }
      return _results;
    }
  };
};

dispatch = function(cb) {
  return command_event("dispatch", [], cb);
};

startNewTracking = function(next) {
  return function() {
    var trackingId, _ref, _ref1;
    trackingId = ((_ref = window.__) != null ? _ref.trackingid : void 0) || "UA-62342164-1";
    if ((_ref1 = window.__) != null) {
      _ref1.needs_start_session = true;
    }
    setTrackingId(next)(trackingId);
    return setAllDimensions(next)();
  };
};

commands = function(next) {
  return {
    startTracking: startNewTracking(next),
    dispatch: dispatch,
    setAllDimensions: setAllDimensions(next),
    trackView: sendAppView,
    customDimension: customDimension,
    setDimension: customDimension,
    trackEvent: sendEvent,
    stopTracking: stopTracking
  };
};

module.exports = {
  type: "analytics",
  commands: commands
};
});

;require.register("lib/middleware/fit/backbone_event.coffee", function(exports, require, module) {
var DEBUG, event_to_code, middleware, process, runCommand;

middleware = require('lib/middleware');

DEBUG = false;

event_to_code = function(_arg, id_generator) {
  var command, command_str, params, type, _ref, _ref1, _ref2;
  type = _arg.type, command = _arg.command, params = _arg.params;
  command_str = "Backbone.Events.trigger(";
  if (((_ref = window.__) != null ? (_ref1 = _ref.slidedeck) != null ? _ref1.id : void 0 : void 0) != null) {
    command_str += "'slidedeck:" + window.__.slidedeck.id + (":" + command + "'");
  } else if (((_ref2 = window.__) != null ? _ref2.challenge : void 0) != null) {
    command_str += "'challenge:" + command + "'";
  } else {
    command_str += "'" + command + "'";
  }
  if (_.isArray(params) && params.length > 0) {
    command_str += ", " + (JSON.stringify(params[0]));
  }
  command_str += ");";
  if (DEBUG) {
    console.log("BACKBONE", command_str);
  }
  return command_str;
};

runCommand = function(command, id_generator) {
  return middleware.run(command, event_to_code, id_generator);
};

process = function(command, next) {
  if ((command != null ? command.type : void 0) === "event") {
    return runCommand(command, null);
  } else {
    return next(command);
  }
};

module.exports = {
  process: process,
  type: "backbone_event"
};
});

;require.register("lib/middleware/fit/cdv_plugin.coffee", function(exports, require, module) {
var DEBUG, callback_id_generator, command_to_code, middleware, process, process_param, runCommand, str_method, try_parse, wrap_callback;

middleware = require('lib/middleware');

DEBUG = false;

if (window.__ == null) {
  window.__ = {};
}

window.__.callbacks = {};

callback_id_generator = function() {
  var id_callback;
  id_callback = 0;
  return function() {
    return ++id_callback;
  };
};

process_param = function(p) {
  if (typeof p === "string") {
    return "\"" + p + "\"";
  } else {
    return JSON.stringify(p);
  }
};

command_to_code = function(_arg, id_generator) {
  var command, command_str, error, params, prefix, success, type;
  type = _arg.type, command = _arg.command, params = _arg.params;
  command_str = command.plugin + "." + command.method + "(";
  command_str += command.parameters.map(process_param).join(', ');
  if (command.callback != null) {
    success = wrap_callback(command.callback, true, id_generator);
    error = wrap_callback(command.callback, false, id_generator);
    prefix = command.parameters.length === 0 ? "" : ",";
    if (command.callback != null) {
      command_str += prefix + success + ", " + error;
    }
  }
  command_str += ")";
  if (DEBUG) {
    console.log("CDV PLUGIN ->", command_str);
  }
  return command_str;
};

runCommand = function(command, id_generator) {
  return middleware.run(command, command_to_code, id_generator);
};

str_method = function(callback_id) {
  return "function(data) {    var str_data = JSON.stringify(data);    return window.IAB.executeScript({      code: 'window.__.callbacks[" + callback_id + "](' + str_data + ')'    });  }";
};

try_parse = function(d) {
  try {
    d = JSON.parse(d);
  } catch (_error) {}
  return d;
};

wrap_callback = function(callback, success, id_generator) {
  var id;
  if (success == null) {
    success = true;
  }
  id = id_generator();
  (function(id, callback) {
    return __.callbacks[id] = function(d) {
      d = try_parse(d);
      if (success) {
        return callback(null, d);
      } else {
        return callback(d, null);
      }
    };
  })(id, callback);
  return str_method(id);
};

process = function(id_gen) {
  return function(command, next) {
    if ((command != null ? command.type : void 0) === "command") {
      return runCommand(command, id_gen);
    } else {
      return next(command);
    }
  };
};

module.exports = {
  process: process(callback_id_generator()),
  type: "cdv_plugin"
};
});

;require.register("lib/middleware/fit/session.coffee", function(exports, require, module) {
var Analytics, Score, addScore, command_event, command_session, commands, exit, getLeaderboard, getScore, getUser, hasTracked, init, setTracked, setTrackedNonPersistent, setTrackedPersistent, trackEvent, trackFeedback, trackGameAccuracy, trackGameAnswer, trackInsight, trackOnce, trackSet, trackYesNoInsight, tracked, trackingKey,
  __slice = [].slice;

Analytics = null;

Score = null;

tracked = {};

command_session = function(method) {
  return function(params, callback) {
    return {
      type: "command",
      command: {
        plugin: "session",
        method: method,
        parameters: params,
        callback: callback
      }
    };
  };
};

command_event = function(type) {
  return function() {
    var params;
    params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return {
      type: "event",
      command: type,
      params: params
    };
  };
};

trackingKey = function(key) {
  if ((window.__.slidedeck == null) || window.__.retailer.retailer === "demo") {
    return key = "demo:" + key;
  } else {
    return key = [window.__.slidedeck.id, window.__.retailer.retailer, window.__.retailer.fullname, key].join(":");
  }
};

hasTracked = function(persistent) {
  return function(_arg) {
    var action, category, key, label, value;
    category = _arg.category, action = _arg.action, label = _arg.label, value = _arg.value;
    if ((window.__.slidedeck == null) || window.__.retailer.retailer === "demo") {
      persistent = false;
    }
    key = trackingKey("" + category + ":" + action + ":" + label);
    if (persistent) {
      return localStorage.getItem(key) != null;
    } else {
      return tracked[key] != null;
    }
  };
};

setTracked = function(persistent) {
  return function(_arg) {
    var action, category, key, label, value;
    category = _arg.category, action = _arg.action, label = _arg.label, value = _arg.value;
    key = trackingKey("" + category + ":" + action + ":" + label);
    if (persistent) {
      return localStorage.setItem(key, value);
    } else {
      return tracked[key] = value;
    }
  };
};

trackOnce = function(persistent) {
  return function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (!hasTracked(persistent).apply(null, args)) {
      trackEvent.apply(null, args);
      return setTracked(persistent).apply(null, args);
    }
  };
};

trackEvent = function(_arg) {
  var action, category, label, value;
  category = _arg.category, action = _arg.action, label = _arg.label, value = _arg.value;
  console.log("category", category);
  console.log("action", action);
  console.log("label", label);
  console.log("value", value);
  return Analytics.trackEvent(category, action, label, value);
};

getScore = function(instancename, done) {
  return command_session("getScore")([instancename], done);
};

trackGameAnswer = function(game, question, answer, value) {
  if (value == null) {
    value = 0;
  }
  return trackOnce(true)({
    category: game,
    action: question,
    label: answer,
    value: value
  });
};

trackInsight = function(question, answer, value) {
  if (value == null) {
    value = 0;
  }
  return trackOnce(true)({
    category: "Insight",
    action: question,
    label: answer,
    value: value
  });
};

trackFeedback = function(question, answer, value) {
  if (value == null) {
    value = 0;
  }
  return trackOnce(true)({
    category: "Feedback",
    action: question,
    label: answer,
    value: value
  });
};

trackSet = function(persistent) {
  return function(category, order) {
    if (order == null) {
      order = false;
    }
    return function(question, correctvalues, incorrectvalues) {
      var correct, incorrect, index, _i, _j, _k, _len, _len1, _len2, _results, _results1;
      if (incorrectvalues == null) {
        incorrectvalues = [];
      }
      if (!hasTracked(persistent)({
        category: category,
        action: question,
        label: "Group"
      })) {
        if (order) {
          _results = [];
          for (index = _i = 0, _len = correctvalues.length; _i < _len; index = ++_i) {
            correct = correctvalues[index];
            _results.push(trackEvent({
              category: category,
              action: question,
              label: correct,
              value: index + 1
            }));
          }
          return _results;
        } else {
          for (_j = 0, _len1 = correctvalues.length; _j < _len1; _j++) {
            correct = correctvalues[_j];
            trackEvent({
              category: category,
              action: question,
              label: correct,
              value: 1
            });
          }
          _results1 = [];
          for (_k = 0, _len2 = incorrectvalues.length; _k < _len2; _k++) {
            incorrect = incorrectvalues[_k];
            _results1.push(trackEvent({
              category: category,
              action: question,
              label: incorrect,
              value: 0
            }));
          }
          return _results1;
        }
      }
    };
  };
};

trackGameAccuracy = function(gamename, label, value) {
  var game_key, index;
  game_key = trackingKey(gamename);
  index = localStorage.getItem(game_key);
  if (index == null) {
    index = 1;
  }
  return trackEvent({
    category: gamename,
    action: "Game responses & Accuracy Round " + index,
    label: label,
    value: value
  });
};

addScore = function(override) {
  return function(gamename, score) {
    var game_key, index, score_data;
    game_key = trackingKey(gamename);
    index = localStorage.getItem(game_key);
    if (index == null) {
      index = 1;
    }
    trackEvent({
      category: gamename,
      action: "No. of plays & Indv. scores  " + index,
      label: score,
      value: score
    });
    score_data = {
      outlet: window.__.retailer.retailername,
      outlet_id: window.__.retailer.retailer,
      rep: window.__.user.name,
      rep_id: window.__.user.id,
      fullname: window.__.retailer.fullname,
      score: score,
      game: gamename,
      group: window.__.slidedeck.id,
      leaderboard_group: window.__.retailer.leaderboard_group,
      module: window.__.slidedeck.id,
      gamename: gamename
    };
    index++;
    localStorage.setItem(game_key, index);
    return command_session("insertScore")([score_data, override]);
  };
};

getUser = function(done) {
  return done(null, {
    user: window.__.user,
    retailer: window.__.retailer
  });
};

exit = function(next) {
  return function() {
    return Analytics.stopTracking(function() {
      return next(command_event("endcall")());
    });
  };
};

init = function() {
  var Scores;
  Analytics = Application.actions("Analytics");
  Scores = Application.actions("Scores");
  return Analytics.startTracking();
};

setTrackedPersistent = setTracked(true);

setTrackedNonPersistent = setTracked(false);

trackYesNoInsight = function(question, answer) {
  var strAnswer, value;
  if (answer) {
    value = 1;
    strAnswer = "Yes";
  } else {
    value = 0;
    strAnswer = "No";
  }
  return trackInsight(question, strAnswer, value);
};

getLeaderboard = function(done) {
  return command_session("getLeaderboards")([], done);
};

commands = function(next) {
  return {
    addUniqueScore: addScore(false),
    addScore: addScore(true),
    trackFeedback: trackFeedback,
    trackGameAnswer: trackGameAnswer,
    trackInsight: trackInsight,
    trackFeedbackSet: trackSet(true)("Feedback"),
    trackInsightOrderedSet: trackSet(true)("Insight", true),
    trackYesNoInsight: trackYesNoInsight,
    trackGameAccuracy: trackGameAccuracy,
    getLeaderboard: getLeaderboard,
    getScore: getScore,
    exit: exit(next),
    getUser: getUser,
    init: init,
    endCall: command_event("endcall")
  };
};

module.exports = {
  type: "session",
  commands: commands
};
});

;require.register("lib/middleware/fit/sound.coffee", function(exports, require, module) {
var cloop, command_event, commands, getPath, play, preload, sounds, systemSoundRegex;

command_event = function(method, parameters, callback) {
  return {
    type: "command",
    command: {
      plugin: "window.plugins.LowLatencyAudio",
      method: method,
      parameters: parameters,
      callback: callback
    }
  };
};

sounds = {};

systemSoundRegex = /^system\:/;

getPath = function(name) {
  var fullName, path;
  fullName = name.match(/\.[^\.]+$/) ? name : "" + name + ".mp3";
  path = fullName.match(systemSoundRegex) ? (fullName = fullName.replace(systemSoundRegex, ''), "" + (window.__.systemSoundsFolder || '') + fullName) : "" + (window.__.dirname || '') + fullName;
  return path;
};

cloop = function(id, cb) {
  return command_event("loop", [id], cb);
};

play = function(id, cbb) {
  var callback, cb, onComplete, onProgress;
  if (cbb == null) {
    cbb = function() {};
  }
  if (!_.isFunction(cbb)) {
    onProgress = cbb.onProgress, onComplete = cbb.onComplete, cb = cbb.cb;
    callback = function(err, result) {
      if (result === "PLAY FINISHED") {
        onComplete();
      }
      if (_.isNumber(result)) {
        return onProgress(result / 100.0);
      }
    };
    return command_event("play", [id], callback);
  } else {
    return command_event("play", [id], cbb);
  }
};

preload = function(path, id, cb) {
  var _cb;
  if (cb == null) {
    cb = function() {};
  }
  if (sounds[id]) {
    return cb();
  } else {
    sounds[id] = path;
    _cb = _.isFunction(cb) ? cb : void 0;
    return command_event("preloadAudio", [id, path, 1, 1], _cb);
  }
};

commands = function(next) {
  return {
    preload: function(name, cb) {
      name = name.replace(systemSoundRegex, '');
      return preload(getPath(name), name, cb);
    },
    playId: function(id, cb) {
      return play(id, cb);
    },
    play: function(name, cb) {
      var path;
      name = name.replace(systemSoundRegex, '');
      path = getPath(name);
      return preload(path, name, function() {
        return next(play(name, cb));
      });
    },
    loopId: function(id, cb) {
      return cloop(id, cb);
    },
    loop: function(name, cb) {
      var path;
      name = name.replace(systemSoundRegex, '');
      path = getPath(name);
      return preload(path, name, function() {
        return next(cloop(name, cb));
      });
    },
    stop: function(name, cb) {
      name = name.replace(systemSoundRegex, '');
      return command_event("stop", [name], cb);
    },
    stopId: function(id, cb) {
      return command_event("stop", [id], cb);
    },
    fadeIn: function(name, ms, increment) {
      var path;
      if (ms == null) {
        ms = 2000;
      }
      if (increment == null) {
        increment = 0.05;
      }
      name = name.replace(systemSoundRegex, '');
      path = getPath(name);
      return preload(path, name, function() {
        return next(command_event("fadeIn", [name, ms, increment]));
      });
    },
    fadeOut: function(name, ms, increment) {
      var path;
      if (ms == null) {
        ms = 2000;
      }
      if (increment == null) {
        increment = 0.05;
      }
      name = name.replace(systemSoundRegex, '');
      path = getPath(name);
      return preload(path, name, function() {
        return next(command_event("fadeOut", [name, ms, increment]));
      });
    },
    stopAll: function() {
      var id, path, _results;
      _results = [];
      for (id in sounds) {
        path = sounds[id];
        _results.push(command_event("stop", [id], function() {}));
      }
      return _results;
    }
  };
};

module.exports = {
  type: "sound",
  commands: commands
};
});

;require.register("lib/middleware/scorm/sound.coffee", function(exports, require, module) {
var clones, commands, disableSystemSounds, enabled, fadeIn, fadeOut, getAudio, getPath, loup, play, preload, sounds, stop, stopAll, timers;

sounds = {};

clones = {};

timers = {};

enabled = true;

getPath = function(name) {
  name = name.replace("system:", "audio/");
  if (name.match(/\.[^\.]+$/)) {
    return name;
  } else {
    return "" + name + ".mp3";
  }
};

getAudio = function(name, from) {
  if (from == null) {
    from = sounds;
  }
  if (from[name]) {
    return from[name];
  } else if (name.match("system:")) {
    console.log("getting system audio", getPath(name));
    if (enabled) {
      return from[name] = new Audio(getPath(name));
    }
  } else {
    return from[name] = new Audio(getPath(name));
  }
};

preload = function(path, id, cb) {
  if (cb == null) {
    cb = function() {};
  }
  getAudio(path);
  return cb();
};

play = function(name, cb) {
  var $sound, onComplete, onProgress, onTimeUpdate, sound, _ref;
  if (cb == null) {
    cb = function() {};
  }
  sound = getAudio(name);
  window.clearTimeout(timers[name]);
  if (sound != null) {
    $sound = $(sound).off();
    if (!_.isFunction(cb)) {
      _ref = cb, onProgress = _ref.onProgress, onComplete = _ref.onComplete, cb = _ref.cb;
      onTimeUpdate = function() {
        return onProgress(sound.currentTime / sound.duration);
      };
      $sound.on("ended", onComplete);
      $sound.on("timeupdate", onTimeUpdate);
    }
    if (sound.currentTime > 0) {
      sound.currentTime = 0;
    }
    sound.play();
  }
  return cb({
    name: name
  });
};

loup = function(name, cb) {
  var clone, current, duration, original, repeat;
  if (cb == null) {
    cb = function() {};
  }
  if (clones[name] == null) {
    clones[name] = new Audio(getPath(name));
  }
  original = getAudio(name);
  if (original != null) {
    clone = getAudio(name, clones);
    current = original;
    duration = current.duration * 1000;
    if (!(duration > 0)) {
      return;
    }
    window.clearTimeout(timers[name]);
    (repeat = function() {
      current.currentTime = 0;
      current.play();
      current = current === original ? clone : original;
      return timers[name] = window.setTimeout(repeat, duration);
    })();
  }
  return cb();
};

stop = function(name, cb) {
  var _ref, _ref1;
  if (cb == null) {
    cb = function() {};
  }
  window.clearTimeout(timers[name]);
  if ((_ref = getAudio(name)) != null) {
    _ref.pause();
  }
  if ((_ref1 = getAudio(name, clones)) != null) {
    _ref1.pause();
  }
  return cb();
};

fadeIn = function(name, ms, increment) {
  var clone, repeat, sound;
  if (ms == null) {
    ms = 2000;
  }
  if (increment == null) {
    increment = 0.05;
  }
  sound = getAudio(name);
  clone = getAudio(name, clones);
  if (sound != null) {
    loup(name);
    clone.volume = sound.volume = 0;
    return (repeat = function() {
      clone.volume = sound.volume = Math.min(sound.volume + increment, 1);
      if (sound.volume < 1) {
        return window.setTimeout(repeat, ms / (1 / increment));
      }
    })();
  }
};

fadeOut = function(name, ms, increment) {
  var clone, repeat, sound;
  if (ms == null) {
    ms = 2000;
  }
  if (increment == null) {
    increment = 0.05;
  }
  sound = getAudio(name);
  clone = getAudio(name, clones);
  if (sound != null) {
    return (repeat = function() {
      clone.volume = sound.volume = Math.max(sound.volume - increment, 0);
      if (sound.volume > 0) {
        return window.setTimeout(repeat, ms / (1 / increment));
      } else {
        stop(name);
        return clone.volume = sound.volume = 1;
      }
    })();
  }
};

stopAll = function() {
  var name, sound, _results;
  _results = [];
  for (name in sounds) {
    sound = sounds[name];
    _results.push(sound.pause());
  }
  return _results;
};

disableSystemSounds = function() {
  return enabled = false;
};

commands = function(next) {
  return {
    preload: preload,
    stop: stop,
    play: play,
    stopAll: stopAll,
    fadeIn: fadeIn,
    fadeOut: fadeOut,
    disableSystemSounds: disableSystemSounds,
    loop: loup,
    stopId: stop,
    playId: play,
    loopId: loup
  };
};

module.exports = {
  type: "sound",
  commands: commands
};
});

;require.register("lib/middleware/session.coffee", function(exports, require, module) {
var commands, get, waitAndGet;

waitAndGet = function(n) {
  var maxWaitingInterval, pollingInterval, startToWait, _waitAndGet;
  startToWait = Date.now();
  maxWaitingInterval = 5000;
  pollingInterval = 50;
  _waitAndGet = function(n) {
    if ((typeof __ !== "undefined" && __ !== null ? __.slidedeck : void 0) != null) {
      return n(null, __.slidedeck);
    } else if (Date.now() - startToWait > maxWaitingInterval) {
      return n(new Error("timeout"));
    } else {
      return setTimeout((function() {
        return _waitAndGet(n);
      }), pollingInterval);
    }
  };
  return _waitAndGet(n);
};

get = function(n) {
  return n(null, (typeof __ !== "undefined" && __ !== null ? __.slidedeck : void 0) != null ? __.slidedeck : {});
};

commands = function(next) {
  return {
    get: get,
    waitAndGet: waitAndGet
  };
};

module.exports = {
  type: "session",
  commands: commands
};
});

;require.register("lib/prefix.coffee", function(exports, require, module) {
var Prefixer, emptyStyle, myPrefixer;

emptyStyle = document.createElement("div").style;

Prefixer = (function() {
  function Prefixer() {}

  Prefixer.prototype.vendorPrefixes = {};

  Prefixer.prototype._getVendorPrefixFor = function(style) {
    var S, prefixed, s, vendor, _i, _len, _ref;
    s = style.substr(0, 1);
    S = s.toUpperCase();
    _ref = [s, "webkit" + S, "Moz" + S, "ms" + S, "O" + S];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      vendor = _ref[_i];
      prefixed = vendor + style.substr(1);
      if (prefixed in emptyStyle) {
        return vendor.substr(0, vendor.length - 1);
      }
    }
    return false;
  };

  Prefixer.prototype._camelCase = function(style) {
    return style.replace(/\-(\w)/gi, function(str, w) {
      return w.toUpperCase();
    });
  };

  Prefixer.prototype.prefix = function(style) {
    var vendorPrefix, _base;
    style = this._camelCase(style);
    vendorPrefix = this._getVendorPrefixFor(style);
    if (vendorPrefix === "") {
      return style;
    } else if (vendorPrefix) {
      return (_base = this.vendorPrefixes)[style] != null ? (_base = this.vendorPrefixes)[style] : _base[style] = vendorPrefix + style.charAt(0).toUpperCase() + style.substr(1);
    } else {
      return false;
    }
  };

  return Prefixer;

})();

myPrefixer = new Prefixer();

module.exports = function(style) {
  return myPrefixer.prefix(style);
};
});

;require.register("lib/preload.coffee", function(exports, require, module) {
var Logger, MediaElement, extensions, isAsset, load, loadFromStylesheets, preloadLessonAssets, regexs, type, types,
  __slice = [].slice;

Logger = function() {
  var args;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return console.log.apply(console, args);
};

types = {
  image: ["png", "jpg", "jpeg", "gif", "svg"],
  video: ["mp4", "mpeg", "m4v"],
  audio: ["wav", "mp3"]
};

regexs = [];

for (type in types) {
  extensions = types[type];
  regexs[type] = new RegExp(".(" + (extensions.join('|')) + ")$", 'i');
}

isAsset = function(asset, type) {
  return asset != null ? typeof asset.match === "function" ? asset.match(regexs[type]) : void 0 : void 0;
};

MediaElement = (function() {
  function MediaElement() {
    this.image = new Image();
    this.audio = new Audio();
    this.src = null;
    this.type = null;
  }

  MediaElement.prototype.onload = function() {};

  MediaElement.prototype.onerror = function() {};

  MediaElement.prototype.remove = function() {};

  MediaElement.prototype.setSrc = function(url) {
    var _this = this;
    this.src = url;
    if (url.match(regexs.image)) {
      this.type = "image";
      this.image.src = url;
      this.image.onload = function() {
        return _this.onload();
      };
      return this.image.onerror = function() {
        return _this.onerror();
      };
    } else if (url.match(regexs.audio)) {
      this.type = "audio";
      return $.ajax({
        url: url,
        type: "GET",
        success: function() {
          return _this.onload();
        },
        error: function() {
          return _this.onerror();
        }
      });
    } else {
      return console.error("Unrecognized type");
    }
  };

  MediaElement.prototype.getSrc = function() {
    return this.src;
  };

  MediaElement.prototype.getType = function() {
    return this.type;
  };

  MediaElement.prototype.getContent = function() {
    return this.image || this.audio;
  };

  return MediaElement;

})();

load = function(all, callback, conc, maxTime) {
  var cancel, count, elements, errors, grouped, i, mediaEls, onComplete, start, timeout, total, _fn;
  if (all == null) {
    all = [];
  }
  if (conc == null) {
    conc = 4;
  }
  if (maxTime == null) {
    maxTime = 3000;
  }
  if (all.length === 0) {
    return typeof callback === "function" ? callback() : void 0;
  }
  all = _.compact(all);
  if (all.length === 0) {
    return typeof callback === "function" ? callback() : void 0;
  }
  count = 0;
  errors = [];
  cancel = false;
  start = Date.now();
  total = all.length;
  mediaEls = (function() {
    var _i, _results;
    _results = [];
    for (i = _i = 0; 0 <= conc ? _i < conc : _i > conc; i = 0 <= conc ? ++_i : --_i) {
      _results.push(new MediaElement());
    }
    return _results;
  })();
  grouped = _.groupBy(all, function(e, i, arr) {
    return Math.floor(i / arr.length * conc);
  });
  Logger("loading " + all.length + " media element(s)");
  onComplete = function() {
    var duration, el, elt, images, isSuccess, _i, _len;
    window.clearTimeout(timeout);
    cancel = true;
    duration = Date.now() - start;
    isSuccess = function(el) {
      return el.getSrc() && errors.indexOf(el.getSrc()) === -1;
    };
    images = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = mediaEls.length; _i < _len; _i++) {
        el = mediaEls[_i];
        if (isSuccess(el) && el.getType() === "image") {
          _results.push(el.getContent());
        }
      }
      return _results;
    })();
    if (typeof callback === "function") {
      callback(errors, images);
    }
    Logger("loaded " + count + "/" + total + " media element(s) in " + duration + "ms");
    for (_i = 0, _len = mediaEls.length; _i < _len; _i++) {
      elt = mediaEls[_i];
      elt.remove();
    }
    return mediaEls = null;
  };
  _fn = function(elements, i) {
    var loadNext, mediaEl, onError, onLoad;
    mediaEl = mediaEls[i];
    onLoad = function(elt, err) {
      if (!err) {
        count++;
      }
      if (count === all.length) {
        onComplete();
      }
      if (elements.length > 0 && !cancel) {
        return loadNext();
      }
    };
    onError = function(elt) {
      errors.push(elt.getSrc());
      Logger("✕ error loading " + (elt.getSrc()));
      return onLoad(elt, true);
    };
    loadNext = function() {
      return mediaEl.setSrc(elements.shift());
    };
    mediaEl.onload = function() {
      return onLoad(this);
    };
    mediaEl.onerror = function() {
      return onError(this);
    };
    return loadNext();
  };
  for (i in grouped) {
    elements = grouped[i];
    _fn(elements, i);
  }
  return timeout = window.setTimeout((function() {
    return onComplete();
  }), maxTime);
};

/*
  Look through each stylesheet and collect any images that match the regEx,
  and sends the these to the load method when ready.
*/


loadFromStylesheets = function() {
  var getCSS, images, regEx, styleSheet, _i, _len, _ref;
  images = [];
  regEx = /(file|http)\:([^\)]+)(png|gif|jpeg|jpg)/;
  getCSS = function(rule) {
    var e;
    try {
      return c.cssText;
    } catch (_error) {
      e = _error;
      return null;
    }
  };
  _ref = document.styleSheets;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    styleSheet = _ref[_i];
    if (styleSheet.cssRules != null) {
      images = images.concat(Array.prototype.slice.call(styleSheet.cssRules).map(function(c) {
        var _ref1, _ref2;
        return (_ref1 = getCSS(c)) != null ? (_ref2 = _ref1.match(regEx)) != null ? _ref2[0] : void 0 : void 0;
      }).filter(function(c, i, arr) {
        return c && arr.indexOf(c) === i;
      }));
    }
  }
  return this.load(images);
};

preloadLessonAssets = function(slides) {
  var captureAssets, lessonAssets, onLessonAssetsLoaded, recur, slide, _i, _len;
  recur = function(obj, method) {
    var result;
    if (obj && Array.isArray(obj)) {
      return obj.map(function(t) {
        return recur(t, method);
      });
    } else if (obj && typeof obj === "object") {
      result = {};
      Object.keys(obj).forEach(function(k) {
        return result[k] = recur(obj[k], method);
      });
      return result;
    } else {
      return method(obj);
    }
  };
  lessonAssets = [];
  captureAssets = function(s) {
    return recur(s, function(p) {
      if (isAsset(p, "audio") || isAsset(p, "image")) {
        return lessonAssets.push(p);
      }
    });
  };
  for (_i = 0, _len = slides.length; _i < _len; _i++) {
    slide = slides[_i];
    captureAssets(slide);
  }
  onLessonAssetsLoaded = function() {};
  return load(lessonAssets, onLessonAssetsLoaded, 4, 40000);
};

module.exports = {
  load: load,
  loadFromStylesheets: loadFromStylesheets,
  preloadLessonAssets: preloadLessonAssets
};
});

;require.register("lib/router.coffee", function(exports, require, module) {
var AppRouter, MainView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

MainView = require("views/main");

AppRouter = (function(_super) {
  __extends(AppRouter, _super);

  function AppRouter() {
    _ref = AppRouter.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  AppRouter.prototype.initialize = function() {
    return this.mainView = new MainView({
      el: "body"
    });
  };

  AppRouter.prototype.routes = {
    "slide(/:index)(?:query)": "slide",
    "*default": "default"
  };

  AppRouter.prototype["default"] = function() {
    return this.navigate("slide/1", true);
  };

  AppRouter.prototype.slide = function(index, query) {
    var key, param, params, val, _i, _len, _ref1, _ref2;
    if (query == null) {
      query = "";
    }
    params = {};
    _ref1 = query.split("&");
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      param = _ref1[_i];
      if (!(param)) {
        continue;
      }
      _ref2 = param.split("="), key = _ref2[0], val = _ref2[1];
      params[key] = (function() {
        try {
          return JSON.parse(val);
        } catch (_error) {
          val = _error;
        }
      })();
    }
    return this.mainView.display("slides", _.extend(params, {
      index: index
    }));
  };

  return AppRouter;

})(Backbone.Router);

module.exports = AppRouter;
});

;require.register("lib/scorm.coffee", function(exports, require, module) {
var extractInt, extractKey, processScormPlayerData;

extractKey = function(data, key, def) {
  if (data[key] != null) {
    return data[key].value;
  } else {
    return def;
  }
};

extractInt = function(data, key, def) {
  if (data[key] != null) {
    return parseInt(data[key].value, 10);
  } else {
    return def;
  }
};

processScormPlayerData = function(data) {
  var all, duration, incomplete, interactions, score, success;
  score = function() {
    var maxScore, minScore;
    score = 0;
    minScore = extractInt(data, "cmi.core.score.min", 0);
    maxScore = extractInt(data, "cmi.core.score.max", 100);
    score = extractInt(data, "cmi.core.score.raw", null);
    if (success()) {
      if (score == null) {
        score = 100;
      }
    }
    return score;
  };
  duration = function() {
    return extractKey(data, "cmi.core.session_time", null);
  };
  incomplete = function() {
    var _ref;
    return ((_ref = data["cmi.core.lesson_status"]) != null ? _ref.value : void 0) === "incomplete";
  };
  success = function() {
    var _ref, _ref1;
    return (_ref = (_ref1 = data["cmi.core.lesson_status"]) != null ? _ref1.value : void 0) === "passed" || _ref === "completed";
  };
  interactions = function() {
    var ex, found, i, k, key, keys, object_keys, value, values, _i, _j, _len, _len1;
    interactions = [];
    try {
      found = true;
      i = 0;
      keys = Object.keys(data);
      key = "cmi.interactions.0.";
      object_keys = keys.filter(function(k) {
        return k.indexOf(key) === 0;
      });
      found = object_keys.length > 0;
      if (found) {
        for (_i = 0, _len = object_keys.length; _i < _len; _i++) {
          k = object_keys[_i];
          values = data[k].value;
          if (!_.isArray(values)) {
            values = [values];
          }
          for (i = _j = 0, _len1 = values.length; _j < _len1; i = ++_j) {
            value = values[i];
            if (interactions[i] == null) {
              interactions[i] = {};
            }
            interactions[i][k.replace(key, "")] = decodeURIComponent(value);
          }
        }
      }
    } catch (_error) {
      ex = _error;
      console.error("Error while parsing SCORM interactions", ex);
    }
    return interactions;
  };
  all = function() {
    return _.extend(data, {
      interactions: interactions(),
      score: score(),
      duration: duration(),
      success: success(),
      incomplete: incomplete()
    });
  };
  return {
    all: all,
    interactions: interactions,
    success: success,
    duration: duration,
    score: score
  };
};

module.exports = {
  processScormPlayerData: processScormPlayerData
};
});

;require.register("lib/vimeo-api.coffee", function(exports, require, module) {
var tag;

tag = document.createElement("script");

tag.src = "https://player.vimeo.com/api/player.js";

document.head.appendChild(tag, "beforeEnd");
});

;require.register("lib/youtube-api.coffee", function(exports, require, module) {
var protocol, tag;

window.onYouTubePlayerAPIReady = function() {
  return Backbone.trigger("youtubeplayerapiready");
};

tag = document.createElement("script");

protocol = window.location.protocol.replace("file", "http");

tag.src = "" + protocol + "//www.youtube.com/player_api";

document.head.appendChild(tag, "beforeEnd");
});

;require.register("models/game/score.coffee", function(exports, require, module) {
var Easie, ScoreModel, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Easie = require("lib/easie");

ScoreModel = (function(_super) {
  __extends(ScoreModel, _super);

  function ScoreModel() {
    _ref = ScoreModel.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  ScoreModel.prototype.defaults = {
    turns: 0
  };

  ScoreModel.prototype.initialize = function() {
    this.on("reset", this.resetScore, this);
    this.on("tally", this.tallyScore, this);
    return this.on("change", this.getTotal, this);
  };

  ScoreModel.prototype.resetScore = function() {
    window.clearTimeout(this.timeout);
    return this.set({
      score: 0,
      bonus: 0,
      total: 0,
      correct: 0,
      incorrect: 0,
      consecutive: 0,
      lastBonus: 0,
      lastScore: 0
    });
  };

  ScoreModel.prototype.tallyScore = function(_arg) {
    var bonus, callback, fps, frame, frames, initial, ms, record, repeat, score, start, tallyFrom, total, _ref1,
      _this = this;
    callback = _arg.callback, ms = _arg.ms, tallyFrom = _arg.tallyFrom;
    window.clearTimeout(this.timeout);
    _ref1 = this.attributes, bonus = _ref1.bonus, score = _ref1.score, record = _ref1.record, total = _ref1.total;
    if (score + bonus === total && total === record && (tallyFrom == null)) {
      return typeof callback === "function" ? callback() : void 0;
    } else {
      start = Date.now();
      fps = 1000 / 60;
      frame = 0;
      initial = tallyFrom || 0;
      if (ms == null) {
        ms = 3000;
      }
      ms = Math.min(ms, Math.abs(initial - (score + bonus)) || 1);
      frames = ms / fps;
      return (repeat = function() {
        var attrs, dist;
        dist = _.limit((frame / frames) || 0, 1);
        if (!((0 <= dist && dist <= 1))) {
          dist = 1;
        }
        attrs = {
          total: Math.round(Easie.quartInOut(dist, initial, bonus + score - initial, 1))
        };
        if (tallyFrom == null) {
          attrs.record = Math.max(attrs.total, record || 0);
        }
        _this.set(attrs);
        if (frame < frames) {
          _this.timeout = window.setTimeout(repeat, fps);
          return frame = Math.floor((Date.now() - start) / fps);
        } else {
          return typeof callback === "function" ? callback() : void 0;
        }
      })();
    }
  };

  ScoreModel.prototype.getTotal = function(e) {
    if (!(e.changed.total || !((e.changed.score != null) || (e.changed.bonus != null)))) {
      return this.set({
        total: this.get("score") + this.get("bonus")
      });
    }
  };

  ScoreModel.prototype.setBy = function(obj, amount) {
    var key, opts, prev, val;
    if (typeof obj === "string") {
      key = obj;
      obj = {};
      obj[key] = amount;
    } else {
      opts = amount;
    }
    for (key in obj) {
      val = obj[key];
      prev = this.get(key);
      this.set(key, Math.max(prev + val, 0), opts);
      if (key === "lastBonus" || key === "lastScore") {
        if (typeof console !== "undefined" && console !== null) {
          if (typeof console.log === "function") {
            console.log("`lastBonus` & `lastScore` cannot be set");
          }
        }
        return;
      }
      if (key === "bonus" && val > 0) {
        this.set({
          lastBonus: 0
        }, {
          silent: true
        });
        this.set({
          lastBonus: val
        });
      }
      if (key === "score" && val > 0) {
        this.set({
          lastScore: 0
        }, {
          silent: true
        });
        this.set({
          lastScore: val
        });
      }
    }
  };

  ScoreModel.prototype.destroy = function() {
    window.clearTimeout(this.timeout);
    return ScoreModel.__super__.destroy.apply(this, arguments);
  };

  return ScoreModel;

})(Backbone.Model);

module.exports = ScoreModel;
});

;require.register("models/game/timer.coffee", function(exports, require, module) {
var TimerModel, cancelAF, requestAF, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

requestAF = window.requestAnimationFrame || window.webkitRequestAnimationFrame;

cancelAF = window.cancelAnimationFrame || window.webkitCancelAnimationFrame;

TimerModel = (function(_super) {
  __extends(TimerModel, _super);

  function TimerModel() {
    _ref = TimerModel.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  TimerModel.prototype.initialize = function() {
    if (!this.hasLimit()) {
      this.set("limit", -1);
    }
    this.on("start", this.trackTimer, this);
    this.on("reset", this.resetTimer, this);
    this.on("count", this.countDown, this);
    this.on("change", this.getTotal, this);
    return this.on("stop", this.endTimer, this);
  };

  TimerModel.prototype.resetTimer = function() {
    return this.set({
      bonus: 0,
      total: this.get("limit"),
      remaining: this.get("limit"),
      paused: true
    });
  };

  TimerModel.prototype.trackTimer = function(_arg) {
    var callback, repeat,
      _this = this;
    callback = _arg.callback;
    if (this.hasLimit()) {
      this.set({
        start: Date.now() - (this.get("total") - this.get("remaining")),
        paused: false
      });
      this.clearTimers();
      return (repeat = function() {
        var interval, limit, remaining, start, total, _ref1;
        _ref1 = _this.attributes, start = _ref1.start, limit = _ref1.limit, remaining = _ref1.remaining, total = _ref1.total, interval = _ref1.interval;
        if (_this.get("paused")) {
          _this.set({
            start: Date.now() - (limit - remaining)
          });
        } else {
          _this.set({
            remaining: Math.max(total - (Date.now() - start), 0)
          });
        }
        if (_this.get("remaining") > 0) {
          return _this.rafWrap = requestAF(repeat);
        } else {
          return _this.timeout = window.setTimeout(callback, 300);
        }
      })();
    }
  };

  TimerModel.prototype.clearTimers = function() {
    if (typeof cancelAF === "function") {
      cancelAF(this.rafWrap);
    }
    return window.clearTimeout(this.timeout);
  };

  TimerModel.prototype.endTimer = function() {
    this.clearTimers();
    return this.set({
      paused: true
    });
  };

  TimerModel.prototype.countDown = function(_arg) {
    var callback, count, ms, repeat, steps,
      _this = this;
    callback = _arg.callback, steps = _arg.steps, ms = _arg.ms;
    if (!this.hasLimit()) {
      return typeof callback === "function" ? callback() : void 0;
    } else {
      this.set({
        paused: true
      });
      count = steps || 3;
      this.clearTimers();
      return (repeat = function() {
        _this.set({
          count: count
        });
        if (count === 0) {
          return callback();
        } else {
          _this.timeout = window.setTimeout(repeat, ms || 1200);
          return count--;
        }
      })();
    }
  };

  TimerModel.prototype.getTotal = function(e) {
    if (!e.changed.total) {
      return this.set({
        total: this.get("limit") + (this.get("bonus") || 0)
      });
    }
  };

  TimerModel.prototype.hasLimit = function() {
    return this.get("limit") > 0;
  };

  TimerModel.prototype.setBy = function(obj, amount) {
    var key, prev, val, _results;
    if (typeof obj === "string") {
      key = obj;
      obj = {};
      obj[key] = amount;
    }
    _results = [];
    for (key in obj) {
      val = obj[key];
      prev = this.get(key);
      this.set(key, prev + val);
      if (key === "bonus" && val > 0) {
        this.set({
          lastBonus: 0
        }, {
          silent: true
        });
        _results.push(this.set({
          lastBonus: val
        }));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  TimerModel.prototype.destroy = function() {
    this.clearTimers();
    return TimerModel.__super__.destroy.apply(this, arguments);
  };

  return TimerModel;

})(Backbone.Model);

module.exports = TimerModel;
});

;require.register("models/lesson-engine.coffee", function(exports, require, module) {
var DP, Engines, LessonEngine, dataProcessor, metadataProcessor, processData,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

DP = processData = require("lib/data-processer");

dataProcessor = processData.all;

metadataProcessor = processData.allMD;

Engines = {
  'question-pool': Friedrich.QuestionPool,
  'scorm': Friedrich.Scorm,
  'video': Friedrich.Video
};

LessonEngine = (function() {
  function LessonEngine(conf) {
    if (conf == null) {
      conf = {};
    }
    this.processSlides = __bind(this.processSlides, this);
    this.configuration = conf;
    this.states = conf.userState || {};
    this.engines = this.createEngines();
    this._interactions = [];
  }

  LessonEngine.prototype.trackInteraction = function(i) {
    var Analytics;
    Analytics = Application.actions().Analytics;
    return Analytics.trackInteraction(i);
  };

  LessonEngine.prototype.createEngines = function() {
    var slides, slidesWithEngine,
      _this = this;
    slides = this.configuration.slides;
    slidesWithEngine = slides.filter(function(s) {
      return Engines[s.type] != null;
    });
    return _.object(slidesWithEngine.map(function(s) {
      return [s.id, new Engines[s.type](s.id, s.name, s.data, _this.states[s.id])];
    }));
  };

  LessonEngine.prototype.processSlides = function(data) {
    var _this = this;
    data.slides = _.flatten(data.slides.map(function(s, i) {
      var slides, _ref, _ref1, _ref2, _ref3;
      if (s.id && (((_ref = _this.engines) != null ? (_ref1 = _ref[s.id]) != null ? _ref1.renderSlides : void 0 : void 0) != null)) {
        slides = (_ref2 = _this.engines) != null ? (_ref3 = _ref2[s.id]) != null ? _ref3.renderSlides() : void 0 : void 0;
        return slides = slides.map(function(s) {
          s.data = DP.one(s.data, s.type);
          s.metadata = DP.oneMD(s.metadata);
          s.strippedMetadata = DP.oneSMD(s.metadata);
          return s;
        });
      } else {
        return s;
      }
    }));
    data.slides = data.slides.map(function(s, i) {
      s.isLastSlide = i === data.slides.length - 1;
      return s;
    });
    return data;
  };

  LessonEngine.prototype.slides = function() {
    var dataPipe, fn, processedData, _i, _len;
    dataPipe = [dataProcessor, metadataProcessor, this.processSlides];
    processedData = _.extend({}, this.configuration);
    for (_i = 0, _len = dataPipe.length; _i < _len; _i++) {
      fn = dataPipe[_i];
      processedData = fn(processedData);
    }
    this._slides = processedData;
    return this._slides;
  };

  LessonEngine.prototype._recordInteractions = function(intes) {
    var i, _i, _len, _results;
    if (intes == null) {
      intes = [];
    }
    _results = [];
    for (_i = 0, _len = intes.length; _i < _len; _i++) {
      i = intes[_i];
      this._interactions.push(i);
      _results.push(this.trackInteraction(i));
    }
    return _results;
  };

  LessonEngine.prototype._publishState = function() {
    var state;
    state = this.getState();
    return this.trackInteraction({
      isLessonUserState: true,
      state: state
    });
  };

  LessonEngine.prototype.getState = function() {
    var engine, slideId;
    return _.object((function() {
      var _ref, _results;
      _ref = this.engines;
      _results = [];
      for (slideId in _ref) {
        engine = _ref[slideId];
        if (engine.state) {
          _results.push([slideId, engine.state]);
        }
      }
      return _results;
    }).call(this));
  };

  LessonEngine.prototype.processInteraction = function(interaction) {
    var engine, intes, md;
    this._recordInteractions([interaction]);
    md = interaction.metadata;
    if ((md != null) && (this.engines[md.friedrichId] != null)) {
      engine = this.engines[interaction.metadata.friedrichId];
      if (engine.processInteraction != null) {
        intes = engine.processInteraction(interaction) || [];
        this._recordInteractions(intes);
      }
      if (engine.reduceState != null) {
        engine.reduceState(interaction);
        return this._publishState();
      }
    }
  };

  return LessonEngine;

})();

module.exports = LessonEngine;
});

;require.register("models/lesson.coffee", function(exports, require, module) {
var Lesson, LessonEngine;

LessonEngine = require("models/lesson-engine");

Lesson = (function() {
  function Lesson(conf) {
    if (conf != null) {
      this.loadConfiguration(conf);
    }
  }

  Lesson.prototype.loadConfiguration = function(conf) {
    this.configuration = conf;
    return this.engine = new LessonEngine(this.configuration);
  };

  Lesson.prototype.loadFromConfigJsonFile = function(done) {
    var ajaxParams;
    ajaxParams = {
      type: "GET",
      url: "config.json",
      dataType: "json"
    };
    return this.request = $.ajax(_.extend(ajaxParams, {
      success: function(data) {
        return done(null, data);
      },
      error: function(err) {
        return done(err);
      }
    }));
  };

  Lesson.prototype.loadFromSession = function(done) {
    var Session;
    Session = Application.actions().Session;
    return Session.waitAndGet(function(err, data) {
      if (err != null) {
        return done(err);
      } else if (!(data != null ? data.config : void 0)) {
        return done(new Error("No slides configuration"));
      } else {
        return window.setTimeout((function() {
          return done(null, data.config);
        }), 100);
      }
    });
  };

  Lesson.prototype.loadData = function(done) {
    var _ref;
    if ((_ref = require('app')) != null ? _ref.isPlayer : void 0) {
      return this.loadFromSession(done);
    } else {
      return this.loadFromConfigJsonFile(done);
    }
  };

  Lesson.prototype.load = function(done) {
    var _this = this;
    return this.loadData(function(err, conf) {
      if (err != null) {
        if (err != null) {
          return done(err);
        }
      } else {
        _this.loadConfiguration(conf);
        return done(null, conf);
      }
    });
  };

  Lesson.prototype.getState = function() {
    return this.engine.getState();
  };

  Lesson.prototype.processInteraction = function(i) {
    return this.engine.processInteraction(i);
  };

  Lesson.prototype.getSlides = function() {
    return this.engine.slides();
  };

  return Lesson;

})();

module.exports = Lesson;
});

;require.register("models/scormAttempt.coffee", function(exports, require, module) {
var ScormAttempt, processScormPlayerData;

processScormPlayerData = require("lib/scorm").processScormPlayerData;

ScormAttempt = (function() {
  function ScormAttempt(lessonId, lessonCompleted, username, previousAttempt) {
    this.lessonId = lessonId;
    this.lessonCompleted = lessonCompleted;
    this.username = username;
    this.previousAttempt = previousAttempt;
  }

  ScormAttempt.prototype.initialData = function() {
    if (this.previousAttempt) {
      return this.previousAttempt;
    } else {
      return {
        "ed": {
          "lessonId": this.lessonId
        },
        "cmi.core.lesson_status": {
          value: this.lessonCompleted ? "completed" : "not attempted",
          status: 0
        },
        "cmi.core.student_name": {
          value: this.username,
          status: 0
        }
      };
    }
  };

  ScormAttempt.prototype.processScormPlayerData = function(data) {
    var parsedData;
    parsedData = JSON.parse(atob(data));
    return this.data = processScormPlayerData(parsedData).all();
  };

  ScormAttempt.prototype.attemptData = function() {
    return this.data;
  };

  return ScormAttempt;

})();

module.exports = ScormAttempt;
});

;require.register("templates/components/background.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (config) {
buf.push("<div id=\"slides-background-wrap\">");
if ( config.background)
{
buf.push("<div id=\"slides-background\"></div>");
}
buf.push("<div id=\"slides-lightbox-bg\"></div></div>");}.call(this,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/components/engine/disconnection-warning.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (i18n) {
buf.push("<div id=\"disconnection-warning\"><div class=\"content-fill block-lg\"><div id=\"disconnection-msg\" class=\"content block-h-xl block-v-lg text-center\"><div class=\"block-v-md\"><h2>To complete this lesson, Ed needs to be running in \nthe&nbsp;background.</h2><p class=\"text-md\">To continue, please open Ed and restart the lesson so that \nyour progress can be tracked&nbsp;correctly.</p></div><div class=\"block-v-md\"><a id=\"close-window\" href=\"https://web.edapp.com\" target=\"_self\" class=\"btn btn-solid btn-block\">" + (jade.escape((jade_interp = i18n("buttons.open-ed")) == null ? '' : jade_interp)) + "</a></div></div></div></div>");}.call(this,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/components/engine/lesson-header.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (config, slides, title) {
buf.push("<div id=\"lesson-header\" class=\"block-lg\"> <div id=\"lesson-header-nav\" class=\"text-center\"><div id=\"lesson-header-nav-page-count\"><strong id=\"lesson-header-nav-page-number\">1</strong><span> / </span><strong>" + (jade.escape(null == (jade_interp = slides.length) ? "" : jade_interp)) + "</strong></div><div id=\"lesson-header-nav-menu-btn\"><span class=\"icon icon-menu text-lg\"></span></div></div><div id=\"lesson-header-title\">");
if ( config.logo)
{
buf.push("<img id=\"lesson-header-title-logo\"" + (jade.attr("src", config.logo, true, false)) + "/>");
}
buf.push("<div id=\"lesson-header-title-content\" class=\"text-ellipsis\"><strong>" + (jade.escape(null == (jade_interp = title) ? "" : jade_interp)) + "</strong></div></div></div>");}.call(this,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined,"slides" in locals_for_with?locals_for_with.slides:typeof slides!=="undefined"?slides:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/components/engine/lesson-menu.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (i18n, scorm, slides, title) {
buf.push("<div id=\"lesson-menu\"><div id=\"lesson-menu-content\" class=\"content-ver block-h-xl text-center\"><h1 class=\"tight delay-1\">" + (jade.escape(null == (jade_interp = title) ? "" : jade_interp)) + "</h1><h3 id=\"lesson-menu-page-count\"" + (jade.attr("data-total", slides.length, true, false)) + " class=\"block-v-md delay-2\">&nbsp;</h3><hr/><div class=\"block-v-lg clearfix\"><div id=\"lesson-menu-go-back\" class=\"btn btn-block btn-muted\">" + (jade.escape(null == (jade_interp = i18n("menu.go-back")) ? "" : jade_interp)) + "</div><div id=\"lesson-menu-restart\" class=\"btn btn-block btn-muted\">" + (jade.escape(null == (jade_interp = i18n("menu.restart")) ? "" : jade_interp)) + "</div>");
if ( !scorm)
{
buf.push("<div id=\"lesson-menu-exit\" class=\"btn btn-block btn-muted\">" + (jade.escape(null == (jade_interp = i18n("menu.exit")) ? "" : jade_interp)) + "</div>");
}
buf.push("<div id=\"lesson-menu-cancel\" class=\"btn btn-block\">" + (jade.escape(null == (jade_interp = i18n("menu.cancel")) ? "" : jade_interp)) + "</div></div></div></div>");}.call(this,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"scorm" in locals_for_with?locals_for_with.scorm:typeof scorm!=="undefined"?scorm:undefined,"slides" in locals_for_with?locals_for_with.slides:typeof slides!=="undefined"?slides:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/components/engine/multi-content.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;



























;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/components/engine/photoswipe.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;

buf.push("<div id=\"photoswipe\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\" class=\"pswp\"><div class=\"pswp__bg\"></div><div class=\"pswp__scroll-wrap\"><div class=\"pswp__container\"><div class=\"pswp__item\"></div><div class=\"pswp__item\"></div><div class=\"pswp__item\"></div></div><div class=\"pswp__ui pswp__ui--hidden\"><div class=\"pswp__top-bar\"><div class=\"pswp__hint\"></div><div class=\"pswp__counter\"></div><button title=\"Close (Esc)\" class=\"pswp__button pswp__button--close\"></button><button title=\"Zoom in/out\" class=\"pswp__button pswp__button--zoom\"></button><button title=\"Full Screen\" class=\"pswp__button pswp__button--fs\"></button><div class=\"pswp__preloader\"><div class=\"pswp__preloader__icn\"></div></div></div><button title=\"Previous (←)\" class=\"pswp__button pswp__button--arrow--left\"></button><button title=\"Next (→)\" class=\"pswp__button pswp__button--arrow--right\"></button><div class=\"pswp__caption\"><div class=\"pswp__caption__center\"></div></div></div></div></div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/components/engine/play-audio-popup.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (i18n) {
buf.push("<div id=\"play-audio-popup\" class=\"block-xl\"><div class=\"content-fill\"><div class=\"content-ver text-center\"><div class=\"block-v-xl block-h-lg\"><h1>This lesson is&nbsp;narrated</h1><p class=\"text-md\"> \nTo listen to the narration, please allow audio for this lesson.</p></div><div class=\"btn btn-solid btn-block btn-yes text-xl\">Allow audio for this lesson</div></div><div class=\"btn btn-block btn-no btn-sm\">" + (jade.escape((jade_interp = i18n("audio-popup.cancel")) == null ? '' : jade_interp)) + "</div></div></div>");}.call(this,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/components/engine/slide-answer.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (answer, i18n, isCorrect, isTooSlow) {
buf.push("<div class=\"row block-h-lg\"><div id=\"slide-answer-details\"" + (jade.cls(['col-sm-12',answer.takeaway ? "col-md-6" : "col-md-8 col-md-offset-2"], [null,true])) + "><div class=\"content-scroll block-v-lg\"><p class=\"text-md\"><strong id=\"slide-answer-details-response\">");
if ( isTooSlow)
{
buf.push(null == (jade_interp = i18n("slide-answer.too-slow")) ? "" : jade_interp);
}
else
{
buf.push(null == (jade_interp = isCorrect ? answer.correct : answer.incorrect) ? "" : jade_interp);
}
buf.push("</strong></p>");
if ( answer.text)
{
buf.push("<div id=\"slide-answer-details-text\" class=\"text-md\">" + (null == (jade_interp = answer.text) ? "" : jade_interp) + "</div>");
}
buf.push("</div></div><div" + (jade.cls(['col-sm-12','block-v-lg',answer.takeaway ? "col-md-6" : "col-md-8 col-md-offset-2"], [null,null,true])) + ">");
if ( answer.takeaway)
{
buf.push("<div id=\"slide-answer-takeaway\"><h2 class=\"text-center\">" + (null == (jade_interp = answer.takeaway) ? "" : jade_interp) + "</h2></div>");
}
buf.push("<div id=\"slide-answer-continue-container\" class=\"block-v-lg\"><div id=\"slide-answer-continue\" class=\"btn btn-block btn-solid\"> \n" + (jade.escape((jade_interp = i18n("buttons.continue")) == null ? '' : jade_interp)) + "</div></div></div></div>");}.call(this,"answer" in locals_for_with?locals_for_with.answer:typeof answer!=="undefined"?answer:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"isCorrect" in locals_for_with?locals_for_with.isCorrect:typeof isCorrect!=="undefined"?isCorrect:undefined,"isTooSlow" in locals_for_with?locals_for_with.isTooSlow:typeof isTooSlow!=="undefined"?isTooSlow:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/components/engine/slide-footer.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (continueBtnText, hasNarration, hasPrompt, i18n, prompt) {
buf.push("<div class=\"slide-footer slide-up block-v-lg\">");
if ( hasPrompt)
{
buf.push("<div class=\"slide-footer-touched\"><div class=\"btn btn-muted btn-done\">" + (jade.escape(null == (jade_interp = i18n("buttons.done")) ? "" : jade_interp)) + "</div></div>");
if ( typeof prompt === "string")
{
buf.push("<div class=\"slide-footer-prompt text-uppercase text-bold\"><div class=\"slide-footer-prompt-content content-ver\">" + (null == (jade_interp = prompt) ? "" : jade_interp) + "</div></div>");
}
}
else
{
buf.push("<div class=\"slide-footer-prompt\"><div class=\"btn btn-muted btn-done content-ver\">" + (null == (jade_interp = continueBtnText || i18n("buttons.continue")) ? "" : jade_interp) + "</div></div>");
}
if ( hasNarration)
{
buf.push("<div class=\"slide-footer-narration\"><div class=\"narration-progress btn btn-muted\"><div class=\"narration-progress-bar\"></div><div class=\"wave-ellipse\"><span class=\"bullet delay-1 block-inline\">&bullet;</span><span class=\"bullet delay-2 block-inline\">&bullet;</span><span class=\"bullet delay-3 block-inline\">&bullet;</span></div></div></div>");
}
buf.push("</div>");}.call(this,"continueBtnText" in locals_for_with?locals_for_with.continueBtnText:typeof continueBtnText!=="undefined"?continueBtnText:undefined,"hasNarration" in locals_for_with?locals_for_with.hasNarration:typeof hasNarration!=="undefined"?hasNarration:undefined,"hasPrompt" in locals_for_with?locals_for_with.hasPrompt:typeof hasPrompt!=="undefined"?hasPrompt:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"prompt" in locals_for_with?locals_for_with.prompt:typeof prompt!=="undefined"?prompt:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/components/engine/slide-timer.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (game) {
if ( game && game.timer && game.timer.limit > 0)
{
buf.push("<div class=\"full-screen\"><div class=\"game-stepper text-lg text-bold\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div></div>");
}}.call(this,"game" in locals_for_with?locals_for_with.game:typeof game!=="undefined"?game:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/components/engine/slides.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (slides, undefined) {
buf.push("<div id=\"lesson-slides\" class=\"block-h-lg content-fill\"><div id=\"slides\" class=\"content-fill\"><div id=\"slides-scroller\" class=\"content-fill\">");
// iterate slides
;(function(){
  var $$obj = slides;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var slide = $$obj[$index];

buf.push("<div" + (jade.cls(['slide',"slide-" + (slide.type) + ""], [null,true])) + "></div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var slide = $$obj[$index];

buf.push("<div" + (jade.cls(['slide',"slide-" + (slide.type) + ""], [null,true])) + "></div>");
    }

  }
}).call(this);

buf.push("</div></div></div>");}.call(this,"slides" in locals_for_with?locals_for_with.slides:typeof slides!=="undefined"?slides:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/components/engine/stars-available.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (Array, Math, available, earned, i18n, total, undefined) {
var displayTotal = Math.min(total, 9);
// iterate new Array(displayTotal)
;(function(){
  var $$obj = new Array(displayTotal);
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var star = $$obj[i];

var dist  = Math.abs(Math.floor(displayTotal / 2) - i)
var klass = "star-delay-" + dist;
if (i < available) klass += " active";
if (total > 7) klass += " bunched";
buf.push("<div" + (jade.cls(['star',klass], [null,true])) + "></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var star = $$obj[i];

var dist  = Math.abs(Math.floor(displayTotal / 2) - i)
var klass = "star-delay-" + dist;
if (i < available) klass += " active";
if (total > 7) klass += " bunched";
buf.push("<div" + (jade.cls(['star',klass], [null,true])) + "></div>");
    }

  }
}).call(this);

buf.push("<h4 class=\"text-bold text-pre\">");
if ( earned == total)
{
buf.push("" + (jade.escape((jade_interp = i18n("stars.all-earned", { smart_count: earned })) == null ? '' : jade_interp)) + "");
}
else
{
buf.push("" + (jade.escape((jade_interp = i18n("stars.available", { smart_count: available })) == null ? '' : jade_interp)) + "");
}
buf.push("</h4>");}.call(this,"Array" in locals_for_with?locals_for_with.Array:typeof Array!=="undefined"?Array:undefined,"Math" in locals_for_with?locals_for_with.Math:typeof Math!=="undefined"?Math:undefined,"available" in locals_for_with?locals_for_with.available:typeof available!=="undefined"?available:undefined,"earned" in locals_for_with?locals_for_with.earned:typeof earned!=="undefined"?earned:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"total" in locals_for_with?locals_for_with.total:typeof total!=="undefined"?total:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/components/engine/stars-earned.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (Math, i18n, stars, undefined) {
var parentKlass, max = 9;
if (stars.length < 2)      parentKlass = "text-xl";
else if (stars.length < 6) parentKlass = "text-lg";
else if (stars.length < 8) parentKlass = "text-md";
else { parentKlass = "text-sm"; };
buf.push("<div" + (jade.cls(['text-nowrap',parentKlass], [null,true])) + ">");
// iterate stars.slice(0, max)
;(function(){
  var $$obj = stars.slice(0, max);
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var star = $$obj[i];

if (!star) star = {};
var klass = "delay-" + Math.min(i, 10);
if (star.complete) klass += " active";
if (stars.length > 6) klass += " bunched";
buf.push("<div" + (jade.cls(['star',klass], [null,true])) + "></div>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var star = $$obj[i];

if (!star) star = {};
var klass = "delay-" + Math.min(i, 10);
if (star.complete) klass += " active";
if (stars.length > 6) klass += " bunched";
buf.push("<div" + (jade.cls(['star',klass], [null,true])) + "></div>");
    }

  }
}).call(this);

buf.push("</div><h4 class=\"text-bold text-nowrap\"> ");
var earned = _.where(stars, { complete: true }).length
buf.push("" + (jade.escape((jade_interp = i18n("stars.earned", { earned: earned, smart_count: stars.length })) == null ? '' : jade_interp)) + "</h4>");}.call(this,"Math" in locals_for_with?locals_for_with.Math:typeof Math!=="undefined"?Math:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"stars" in locals_for_with?locals_for_with.stars:typeof stars!=="undefined"?stars:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/components/engine/text-input.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;

buf.push("<div id=\"text-input-view\"><div id=\"text-input-container-top\" class=\"text-input-container block-md\"><h2 id=\"text-input-title\"> </h2></div><div id=\"text-input-scroll\"><textarea id=\"text-input-area\"></textarea></div><div id=\"text-input-container-bottom\" class=\"text-input-container block-md\"><label id=\"text-input-prompt\"></label><label id=\"text-input-count\"><span id=\"text-input-count-current\"></span>&nbsp;/&nbsp;<span id=\"text-input-count-total\"></span></label><div id=\"text-input-dismiss-btn\" class=\"btn btn-solid\">OK, I’m Done</div></div></div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/components/game/intro.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (description, i18n, title) {
buf.push("<div class=\"content-intro content-fill content-fit\"><div class=\"block-v-lg text-center content\"><div class=\"row\"><div class=\"col-sm-12 col-md-8 col-md-offset-2\"><h1 class=\"tight\">" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"text-lg block-v-lg\">" + (null == (jade_interp = description) ? "" : jade_interp) + "</div><div class=\"btn btn-solid play-game\">" + (jade.escape(null == (jade_interp = i18n("game.play-game")) ? "" : jade_interp)) + "</div></div></div></div></div>");}.call(this,"description" in locals_for_with?locals_for_with.description:typeof description!=="undefined"?description:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/components/game/outro.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (hasStars, i18n, title) {
buf.push("<div class=\"content-outro\"><div class=\"content-fill\"><div class=\"block-v-lg text-center content\"><h1>" + (null == (jade_interp = title) ? "" : jade_interp) + "</h1><div class=\"row\"><div class=\"col-sm-12 col-md-8 col-md-offset-2\"><div class=\"row\"><div" + (jade.cls(['col-sm-6','col-md-4','block-v-md',hasStars ? "" : "col-md-offset-2"], [null,null,null,true])) + "><div class=\"block-md block-dk\"><h4 class=\"white-dot-text bold-italic\">" + (jade.escape(null == (jade_interp = i18n("game.your-score")) ? "" : jade_interp)) + "</h4><h1 class=\"game-total tight\">?</h1></div></div><div class=\"col-sm-6 col-md-4 block-v-md\"><div class=\"block-md block-dk\"><h4 class=\"grey-dot-text bold-italic\">" + (jade.escape(null == (jade_interp = i18n("game.your-best")) ? "" : jade_interp)) + "</h4><h1 class=\"game-record tight\">?</h1></div></div>");
if ( hasStars)
{
buf.push("<div class=\"col-sm-12 col-md-4 block-v-md\"><div class=\"block-md block-dk\"><h4 class=\"grey-dot-text bold-italic\">" + (jade.escape(null == (jade_interp = i18n("game.your-stars")) ? "" : jade_interp)) + "</h4><h1 class=\"game-stars tight\">?<sup class=\"stars-total\"></sup></h1></div></div>");
}
buf.push("</div><div class=\"row block-v-md\"><div class=\"col-sm-12 col-md-8 col-md-offset-2 block-md\"><div class=\"btn btn-solid btn-block play-game\">" + (jade.escape(null == (jade_interp = i18n("game.play-again")) ? "" : jade_interp)) + "</div></div></div></div></div></div></div><div class=\"slide-footer block-v-lg\"><div class=\"btn btn-muted goto-next fade-in\">" + (jade.escape(null == (jade_interp = i18n("game.move-on")) ? "" : jade_interp)) + "</div></div></div>");}.call(this,"hasStars" in locals_for_with?locals_for_with.hasStars:typeof hasStars!=="undefined"?hasStars:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/components/game/state.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (i18n) {
buf.push("<div class=\"game-state block-h-lg\"><div class=\"game-state-inner row block-v-lg\"><div class=\"game-state-text col-md-6 col-sm-6\">" + (jade.escape((jade_interp = i18n("game.labels.timer")) == null ? '' : jade_interp)) + "\n&ensp;<strong class=\"game-timer text-lg text-bold\"></strong></div><div class=\"game-state-text col-md-6 col-sm-6 text-right\">" + (jade.escape((jade_interp = i18n("game.labels.score")) == null ? '' : jade_interp)) + "\n&ensp;<strong class=\"game-score text-lg text-bold\"></strong><strong class=\"game-tally\"></strong></div></div></div><div class=\"game-stepper\"></div><div class=\"game-progress\"><div class=\"game-progress-bar\"></div></div><div class=\"game-bonus-score\"></div><div class=\"game-bonus-time\"></div>");}.call(this,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/components/indicator.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (config, slides) {
buf.push("<div id=\"indicator\"><div id=\"inner\"" + (jade.attr("style", (
    "left: " + (100 / slides.length) + "%;" +
    (config.direction == "rtl" ? "margin-left: -" + (100 / slides.length) + "%;" : "")
  ), true, false)) + "></div></div>");}.call(this,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined,"slides" in locals_for_with?locals_for_with.slides:typeof slides!=="undefined"?slides:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/components/leaderboard/leaderboard-list.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (leaderboards, undefined) {
buf.push("<table><thead><tr class=\"slide-up\"><th class=\"rank\">Rank</th><th class=\"score\">Score</th><th class=\"name\">Name</th><th class=\"retailer\">Retailer</th></tr></thead><tbody>");
// iterate leaderboards
;(function(){
  var $$obj = leaderboards;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var entry = $$obj[i];

buf.push("<tr class=\"slide-up\"><td class=\"rank\">" + (jade.escape(null == (jade_interp = i) ? "" : jade_interp)) + "</td><td class=\"score\">" + (jade.escape(null == (jade_interp = entry.score) ? "" : jade_interp)) + "</td><td class=\"name\">" + (jade.escape(null == (jade_interp = entry.full_name) ? "" : jade_interp)) + "</td><td class=\"retailer\">" + (jade.escape(null == (jade_interp = entry.Store) ? "" : jade_interp)) + "</td></tr>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var entry = $$obj[i];

buf.push("<tr class=\"slide-up\"><td class=\"rank\">" + (jade.escape(null == (jade_interp = i) ? "" : jade_interp)) + "</td><td class=\"score\">" + (jade.escape(null == (jade_interp = entry.score) ? "" : jade_interp)) + "</td><td class=\"name\">" + (jade.escape(null == (jade_interp = entry.full_name) ? "" : jade_interp)) + "</td><td class=\"retailer\">" + (jade.escape(null == (jade_interp = entry.Store) ? "" : jade_interp)) + "</td></tr>");
    }

  }
}).call(this);

buf.push("</tbody></table>");}.call(this,"leaderboards" in locals_for_with?locals_for_with.leaderboards:typeof leaderboards!=="undefined"?leaderboards:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/components/menu.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;

buf.push("<div id=\"menu-view\"></div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/components/pagination.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (slides, undefined) {
buf.push("<div id=\"pagination\">");
// iterate slides
;(function(){
  var $$obj = slides;
  if ('number' == typeof $$obj.length) {

    for (var i = 0, $$l = $$obj.length; i < $$l; i++) {
      var slide = $$obj[i];

buf.push("<a" + (jade.attr("href", "#slide/" + (i+1) + "", true, false)) + " class=\"page\"></a>");
    }

  } else {
    var $$l = 0;
    for (var i in $$obj) {
      $$l++;      var slide = $$obj[i];

buf.push("<a" + (jade.attr("href", "#slide/" + (i+1) + "", true, false)) + " class=\"page\"></a>");
    }

  }
}).call(this);

buf.push("</div>");}.call(this,"slides" in locals_for_with?locals_for_with.slides:typeof slides!=="undefined"?slides:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/main.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;

buf.push("<div id=\"content\"><div id=\"inbound\"></div><div id=\"outbound\"></div></div>");;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("templates/slides.jade", function(exports, require, module) {
var __templateData = function template(locals) {
var buf = [];
var jade_mixins = {};
var jade_interp;
;var locals_for_with = (locals || {});(function (config, i18n, scorm, slides, title, undefined) {
buf.push("<div id=\"slides-view-inner\" class=\"content-fill\">");
if ( config.customCSS)
{
buf.push("<style id=\"custom-css\">" + (jade.escape(null == (jade_interp = config.customCSS) ? "" : jade_interp)) + "</style>");
}
if ( config.indicator)
{
buf.push("<div id=\"indicator\"><div id=\"inner\"" + (jade.attr("style", (
    "left: " + (100 / slides.length) + "%;" +
    (config.direction == "rtl" ? "margin-left: -" + (100 / slides.length) + "%;" : "")
  ), true, false)) + "></div></div>");
}
buf.push("<div id=\"slides-background-wrap\">");
if ( config.background)
{
buf.push("<div id=\"slides-background\"></div>");
}
buf.push("<div id=\"slides-lightbox-bg\"></div></div><div id=\"lesson-header\" class=\"block-lg\"> <div id=\"lesson-header-nav\" class=\"text-center\"><div id=\"lesson-header-nav-page-count\"><strong id=\"lesson-header-nav-page-number\">1</strong><span> / </span><strong>" + (jade.escape(null == (jade_interp = slides.length) ? "" : jade_interp)) + "</strong></div><div id=\"lesson-header-nav-menu-btn\"><span class=\"icon icon-menu text-lg\"></span></div></div><div id=\"lesson-header-title\">");
if ( config.logo)
{
buf.push("<img id=\"lesson-header-title-logo\"" + (jade.attr("src", config.logo, true, false)) + "/>");
}
buf.push("<div id=\"lesson-header-title-content\" class=\"text-ellipsis\"><strong>" + (jade.escape(null == (jade_interp = title) ? "" : jade_interp)) + "</strong></div></div></div><div id=\"lesson-slides\" class=\"block-h-lg content-fill\"><div id=\"slides\" class=\"content-fill\"><div id=\"slides-scroller\" class=\"content-fill\">");
// iterate slides
;(function(){
  var $$obj = slides;
  if ('number' == typeof $$obj.length) {

    for (var $index = 0, $$l = $$obj.length; $index < $$l; $index++) {
      var slide = $$obj[$index];

buf.push("<div" + (jade.cls(['slide',"slide-" + (slide.type) + ""], [null,true])) + "></div>");
    }

  } else {
    var $$l = 0;
    for (var $index in $$obj) {
      $$l++;      var slide = $$obj[$index];

buf.push("<div" + (jade.cls(['slide',"slide-" + (slide.type) + ""], [null,true])) + "></div>");
    }

  }
}).call(this);

buf.push("</div></div></div><div id=\"slide-answer\"></div><div id=\"stars-available\"></div><div id=\"stars-earned\" class=\"content text-center\"></div><div id=\"narration-loader\"></div><div id=\"lesson-menu\"><div id=\"lesson-menu-content\" class=\"content-ver block-h-xl text-center\"><h1 class=\"tight delay-1\">" + (jade.escape(null == (jade_interp = title) ? "" : jade_interp)) + "</h1><h3 id=\"lesson-menu-page-count\"" + (jade.attr("data-total", slides.length, true, false)) + " class=\"block-v-md delay-2\">&nbsp;</h3><hr/><div class=\"block-v-lg clearfix\"><div id=\"lesson-menu-go-back\" class=\"btn btn-block btn-muted\">" + (jade.escape(null == (jade_interp = i18n("menu.go-back")) ? "" : jade_interp)) + "</div><div id=\"lesson-menu-restart\" class=\"btn btn-block btn-muted\">" + (jade.escape(null == (jade_interp = i18n("menu.restart")) ? "" : jade_interp)) + "</div>");
if ( !scorm)
{
buf.push("<div id=\"lesson-menu-exit\" class=\"btn btn-block btn-muted\">" + (jade.escape(null == (jade_interp = i18n("menu.exit")) ? "" : jade_interp)) + "</div>");
}
buf.push("<div id=\"lesson-menu-cancel\" class=\"btn btn-block\">" + (jade.escape(null == (jade_interp = i18n("menu.cancel")) ? "" : jade_interp)) + "</div></div></div></div><div id=\"text-input-view\"><div id=\"text-input-container-top\" class=\"text-input-container block-md\"><h2 id=\"text-input-title\"> </h2></div><div id=\"text-input-scroll\"><textarea id=\"text-input-area\"></textarea></div><div id=\"text-input-container-bottom\" class=\"text-input-container block-md\"><label id=\"text-input-prompt\"></label><label id=\"text-input-count\"><span id=\"text-input-count-current\"></span>&nbsp;/&nbsp;<span id=\"text-input-count-total\"></span></label><div id=\"text-input-dismiss-btn\" class=\"btn btn-solid\">OK, I’m Done</div></div></div><div id=\"photoswipe\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\" class=\"pswp\"><div class=\"pswp__bg\"></div><div class=\"pswp__scroll-wrap\"><div class=\"pswp__container\"><div class=\"pswp__item\"></div><div class=\"pswp__item\"></div><div class=\"pswp__item\"></div></div><div class=\"pswp__ui pswp__ui--hidden\"><div class=\"pswp__top-bar\"><div class=\"pswp__hint\"></div><div class=\"pswp__counter\"></div><button title=\"Close (Esc)\" class=\"pswp__button pswp__button--close\"></button><button title=\"Zoom in/out\" class=\"pswp__button pswp__button--zoom\"></button><button title=\"Full Screen\" class=\"pswp__button pswp__button--fs\"></button><div class=\"pswp__preloader\"><div class=\"pswp__preloader__icn\"></div></div></div><button title=\"Previous (←)\" class=\"pswp__button pswp__button--arrow--left\"></button><button title=\"Next (→)\" class=\"pswp__button pswp__button--arrow--right\"></button><div class=\"pswp__caption\"><div class=\"pswp__caption__center\"></div></div></div></div></div><div id=\"disconnection-warning\"><div class=\"content-fill block-lg\"><div id=\"disconnection-msg\" class=\"content block-h-xl block-v-lg text-center\"><div class=\"block-v-md\"><h2>To complete this lesson, Ed needs to be running in \nthe&nbsp;background.</h2><p class=\"text-md\">To continue, please open Ed and restart the lesson so that \nyour progress can be tracked&nbsp;correctly.</p></div><div class=\"block-v-md\"><a id=\"close-window\" href=\"https://web.edapp.com\" target=\"_self\" class=\"btn btn-solid btn-block\">" + (jade.escape((jade_interp = i18n("buttons.open-ed")) == null ? '' : jade_interp)) + "</a></div></div></div></div><div id=\"play-audio-popup\" class=\"block-xl\"><div class=\"content-fill\"><div class=\"content-ver text-center\"><div class=\"block-v-xl block-h-lg\"><h1>This lesson is&nbsp;narrated</h1><p class=\"text-md\"> \nTo listen to the narration, please allow audio for this lesson.</p></div><div class=\"btn btn-solid btn-block btn-yes text-xl\">Allow audio for this lesson</div></div><div class=\"btn btn-block btn-no btn-sm\">" + (jade.escape((jade_interp = i18n("audio-popup.cancel")) == null ? '' : jade_interp)) + "</div></div></div></div>");}.call(this,"config" in locals_for_with?locals_for_with.config:typeof config!=="undefined"?config:undefined,"i18n" in locals_for_with?locals_for_with.i18n:typeof i18n!=="undefined"?i18n:undefined,"scorm" in locals_for_with?locals_for_with.scorm:typeof scorm!=="undefined"?scorm:undefined,"slides" in locals_for_with?locals_for_with.slides:typeof slides!=="undefined"?slides:undefined,"title" in locals_for_with?locals_for_with.title:typeof title!=="undefined"?title:undefined,"undefined" in locals_for_with?locals_for_with.undefined:typeof undefined!=="undefined"?undefined:undefined));;return buf.join("");
};
if (typeof define === 'function' && define.amd) {
  define([], function() {
    return __templateData;
  });
} else if (typeof module === 'object' && module && module.exports) {
  module.exports = __templateData;
} else {
  __templateData;
}
});

;require.register("views/base/game.coffee", function(exports, require, module) {
/*
  For the content engine, games should attempt to follow a consistent pattern
  to reduce user (and developer) strain. Score and timer changes, for example,
  are handled in a consistent interface, and games should follow the pattern:

  - initializeData()
  - initializeElements()
  - enterGame()
  - showNext(isFirstRun = true)
  - startGame()
    - checkAnswer()
      if isCorrect
        - endGame()
      else
        - showNext(isFirstRun = false)

  - endGame()
  - afterAnimateScores()

  Games are displayed in "lightbox" mode while the game is in progress.
*/

var Analytics, EngineGameView, GameView, Session, Sound, sound, system, _i, _len, _ref, _ref1,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

GameView = require("views/game");

_ref = Application.actions(), Sound = _ref.Sound, Session = _ref.Session, Analytics = _ref.Analytics;

system = ["system:achievement", "system:new-star", "system:spin-win", "system:correct", "system:ready", "system:spinning", "system:game-music-slow", "system:spin-fail", "system:tally-score", "system:go", "system:spin-stop", "system:welcome", "system:incorrect", "system:spin-success"];

for (_i = 0, _len = system.length; _i < _len; _i++) {
  sound = system[_i];
  Sound.preload(sound, sound);
}

EngineGameView = (function(_super) {
  __extends(EngineGameView, _super);

  function EngineGameView() {
    _ref1 = EngineGameView.__super__.constructor.apply(this, arguments);
    return _ref1;
  }

  EngineGameView.prototype.show = function() {
    var _this = this;
    EngineGameView.__super__.show.apply(this, arguments);
    this.initializeData();
    this.initializeElements();
    return Session.get(function(err, session) {
      var name, record, scores;
      if (session.scores != null) {
        scores = session.scores;
        name = _this.options.name;
        record = (scores != null ? scores[name] : void 0) != null ? parseInt(scores[name], 10) : null;
        if (record != null) {
          return _this.game.score.set("record", record);
        }
      }
    });
  };

  EngineGameView.prototype.hide = function() {
    EngineGameView.__super__.hide.apply(this, arguments);
    return Sound.stopAll();
  };

  EngineGameView.prototype.onRefresh = function() {
    EngineGameView.__super__.onRefresh.apply(this, arguments);
    Sound.stopAll();
    if (this.game.extra.get("fullscreen")) {
      return this.trigger("ui", {
        minimal: false
      });
    }
  };

  EngineGameView.prototype.initializeData = function() {};

  EngineGameView.prototype.initializeElements = function() {
    var elements, key, selector, _j, _len1, _results;
    elements = ["timer", "progress-bar", "stepper", "score", "tally", "stars", "total", "record", "bonus-score", "bonus-time"];
    _results = [];
    for (_j = 0, _len1 = elements.length; _j < _len1; _j++) {
      key = elements[_j];
      selector = ".game-" + key;
      _results.push(this.setEl(this.el.querySelector(selector), key));
    }
    return _results;
  };

  EngineGameView.prototype.onTimerChange = function(m) {
    var asSec, count, d, lastBonus, limit, paused, remaining, _ref2,
      _this = this;
    _ref2 = m.changed, remaining = _ref2.remaining, count = _ref2.count, lastBonus = _ref2.lastBonus, paused = _ref2.paused;
    if ((remaining != null) && (this.getEl("timer") != null)) {
      limit = m.get("limit");
      asSec = remaining / 1000;
      asSec = (asSec < 10 ? "0" : "") + asSec.toFixed(2) + "s";
      this.getEl("timer").innerHTML = asSec.replace(/^[0s\.]+/, function(w) {
        return _.wrapInTag(w, "em", {
          "class": "game-timer-muted"
        });
      });
    }
    if ((remaining != null) && (this.getEl("progress-bar") != null)) {
      d = this.game.timer.get("interval");
      this.transform(this.getEl("progress-bar"), {
        x: "" + (-remaining / limit * 100) + "%"
      });
    }
    if ((count != null) && (this.getEl("stepper") != null)) {
      this.transition(this.getEl("stepper"), "all 100ms");
      this.getEl("stepper").offsetLeft;
      this.transform(this.getEl("stepper"), {
        scale: 0.75
      });
      this.el.classList.toggle("game-count-down", count > 0);
      window.setTimeout((function() {
        _this.transition(_this.getEl("stepper"), "");
        _this.transform(_this.getEl("stepper"), {
          scale: 1.25
        });
        if (count > 0) {
          _this.getEl("stepper").style.opacity = 1;
          _this.getEl("stepper").innerHTML = count;
          return Sound.play("system:ready");
        } else {
          _this.getEl("stepper").style.opacity = 0;
          return _this.getEl("stepper").innerHTML = i18n("game.go");
        }
      }), 120);
    }
    if (lastBonus > 0 && (this.getEl("bonus-time") != null)) {
      this.showBonus({
        el: this.getEl("bonus-time"),
        x: "-2em",
        html: "+" + (_.quantify(lastBonus / 1000, "second")),
        delay: 400
      });
    }
    if ((paused != null) && m.hasLimit()) {
      return this.el.classList.toggle("game-paused", paused);
    }
  };

  EngineGameView.prototype.onScoreChange = function(m) {
    var correct, lastBonus, record, total, _ref2;
    _ref2 = m.changed, correct = _ref2.correct, total = _ref2.total, record = _ref2.record, lastBonus = _ref2.lastBonus;
    if ((record != null) && (this.getEl("record") != null)) {
      this.getEl("record").innerHTML = _.prettyNumber(record);
      this.getEl("record").offsetLeft;
    }
    if ((total != null) && (this.getEl("total") != null)) {
      this.getEl("total").innerHTML = this.getEl("score").innerHTML = _.prettyNumber(total);
    }
    if (lastBonus > 0 && (this.getEl("bonus-score") != null)) {
      return this.showBonus({
        el: this.getEl("bonus-score"),
        x: "2em",
        html: "+" + (_.prettyNumber(lastBonus)) + " points"
      });
    }
  };

  EngineGameView.prototype.showBonus = function(_arg) {
    var delay, el, html, x,
      _this = this;
    el = _arg.el, x = _arg.x, html = _arg.html, delay = _arg.delay;
    el.innerHTML = html;
    this.transform(el, {
      x: x,
      transition: "none",
      opacity: 0
    });
    el.offsetLeft;
    this.transition(el, "", true);
    window.setTimeout((function() {
      return _this.transform(el, {
        x: 0,
        opacity: 1
      });
    }), 1 + (delay || 0));
    return window.setTimeout((function() {
      return _this.transform(el, {
        opacity: 0
      });
    }), 1000 + (delay || 0));
  };

  EngineGameView.prototype.enterGame = function() {
    EngineGameView.__super__.enterGame.apply(this, arguments);
    Sound.stop("system:tally-score");
    this.el.classList.add("disable-goto-next");
    if (this.game.extra.get("fullscreen")) {
      this.trigger("ui", {
        minimal: true
      });
    }
    return this.showNext(true);
  };

  EngineGameView.prototype.startGame = function() {
    if (this.game.extra.get("sounds")) {
      Sound.fadeIn("system:game-music-slow");
    }
    return EngineGameView.__super__.startGame.apply(this, arguments);
  };

  EngineGameView.prototype.endGame = function() {
    var answerDetails, err;
    try {
      answerDetails = typeof this.answerDetails === "function" ? this.answerDetails() : void 0;
    } catch (_error) {
      err = _error;
      console.error("Error on end game", err);
      answerDetails = [];
    }
    if (this.game.extra.get("sounds")) {
      Sound.fadeOut("system:game-music-slow");
      Sound.loop("system:tally-score");
    }
    EngineGameView.__super__.endGame.apply(this, arguments);
    if (this.game.extra.get("fullscreen")) {
      return this.trigger("ui", {
        minimal: false
      });
    }
  };

  EngineGameView.prototype.afterAnimateScores = function() {
    var challenge_configuration, earned, game, nbStars, total, _ref2, _ref3, _ref4,
      _this = this;
    if (this.game.extra.get("sounds")) {
      Sound.stop("system:tally-score");
      Sound.play("system:spin-win");
    }
    this.el.classList.remove("disable-goto-next");
    if (this.options.data) {
      _ref2 = this.options.data, game = _ref2.game, challenge_configuration = _ref2.challenge_configuration;
    }
    nbStars = (_ref3 = challenge_configuration != null ? challenge_configuration.nb_stars : void 0) != null ? _ref3 : challenge_configuration != null ? challenge_configuration.weighting : void 0;
    if ((game != null ? game.stars : void 0) && nbStars) {
      _ref4 = this.calculateStarsEarned({
        score: this.game.score.get("record"),
        stars: nbStars,
        range: this.options.data.game.stars
      }), earned = _ref4.earned, total = _ref4.total;
      Session.get(function(err, _arg) {
        var attempt;
        attempt = _arg.attempt;
        return _this.lesson.processInteraction({
          score: _.clone(_this.game.score.attributes),
          time: _.clone(_this.game.timer.attributes),
          id: _this.options.id,
          name: _this.options.name,
          type: _this.options.type,
          nb_stars_earned: earned,
          configuration: _this.options.data.challenge_configuration,
          game: true,
          slideData: _this.options.data,
          attempt: attempt,
          answerDetails: (typeof _this.answerDetails === "function" ? _this.answerDetails() : void 0) || [],
          metadata: _this.options.metadata
        });
      });
    }
    this.getEl("stars").innerHTML = earned + _.wrapInTag(" of " + total, "sup", {
      "class": "stars-total"
    });
    return EngineGameView.__super__.afterAnimateScores.apply(this, arguments);
  };

  EngineGameView.prototype.calculateStarsEarned = function(_arg) {
    var earned, level, levels, max, min, numLevels, range, score, stars, _j, _results;
    score = _arg.score, stars = _arg.stars, range = _arg.range;
    min = range.min, max = range.max;
    numLevels = stars > 1 ? stars - 1 : 1;
    levels = (function() {
      _results = [];
      for (var _j = 0; 0 <= stars ? _j < stars : _j > stars; 0 <= stars ? _j++ : _j--){ _results.push(_j); }
      return _results;
    }).apply(this).map(function(i) {
      return (max - min) / numLevels * i + min;
    });
    level = _.chain(levels).filter(function(n) {
      return score >= n;
    }).last().value();
    earned = levels.indexOf(level) + 1;
    return {
      earned: earned,
      total: stars
    };
  };

  EngineGameView.prototype.onCorrectAnswer = function() {
    if (this.game.extra.get("sounds")) {
      Sound.play("system:correct");
    }
    return EngineGameView.__super__.onCorrectAnswer.apply(this, arguments);
  };

  EngineGameView.prototype.onIncorrectAnswer = function() {
    if (this.game.extra.get("sounds")) {
      Sound.play("system:incorrect");
    }
    return EngineGameView.__super__.onIncorrectAnswer.apply(this, arguments);
  };

  EngineGameView.prototype.showNext = function(isFirstRun) {};

  EngineGameView.prototype.checkAnswer = function() {};

  EngineGameView.prototype.getBonus = function(ms, points, over) {
    if (points == null) {
      points = 1000;
    }
    if (over == null) {
      over = 5000;
    }
    return Math.floor(Math.max(over - Math.abs(ms), 0) * (points / over));
  };

  return EngineGameView;

})(GameView);

module.exports = EngineGameView;
});

;require.register("views/base/slide.coffee", function(exports, require, module) {
var BaseSlideView, Session, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Session = Application.actions().Session;

BaseSlideView = (function(_super) {
  __extends(BaseSlideView, _super);

  function BaseSlideView() {
    _ref = BaseSlideView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  BaseSlideView.prototype.refresh = function(params, config) {
    var answerChangeOnly, isCorrect, _ref1, _ref2,
      _this = this;
    this.setState(true, "refresh");
    answerChangeOnly = _.isEqual(_.omit(params.data, "answer"), _.omit(this.options.data, "answer"));
    if (answerChangeOnly) {
      isCorrect = ((_ref1 = this.options.data.answer) != null ? _ref1.incorrect : void 0) === ((_ref2 = params.data.answer) != null ? _ref2.incorrect : void 0);
    }
    this.options.data = params.data;
    this.options.metadata = params.metadata;
    if (answerChangeOnly && params.data.answer) {
      this.trigger("complete", this, {
        isCorrect: isCorrect
      });
    } else {
      this.undelegateEvents();
      this.render(params, config);
      this.delegateEvents();
      this.trigger("refresh", this);
      this.trigger("resize", this);
    }
    return window.setTimeout((function() {
      return _this.setState(false, "refresh");
    }), 0);
  };

  BaseSlideView.prototype.reset = function() {
    this.undelegateEvents();
    this.render();
    return this.delegateEvents();
  };

  BaseSlideView.prototype.submit = function() {
    var answerDetails, err, isCorrect, isTooSlow, prevState, _ref1, _ref2, _ref3;
    prevState = this.currentState.state;
    isCorrect = this.isCorrect();
    isTooSlow = prevState === "prompt" && ((_ref1 = this.options.data.game) != null ? (_ref2 = _ref1.timer) != null ? _ref2.limit : void 0 : void 0) > 0;
    try {
      answerDetails = typeof this.answerDetails === "function" ? this.answerDetails() : void 0;
    } catch (_error) {
      err = _error;
      console.error("Error on answer details", err);
      answerDetails = [];
    }
    this.trigger("complete", this, {
      isCorrect: isCorrect,
      isTooSlow: isTooSlow,
      answerDetails: answerDetails
    });
    if (!this.options.data.answer) {
      return this.next();
    }
    this.setState("complete");
    if ((_ref3 = this.options.lessonConfiguration) != null ? _ref3.hasAnswerFeedback : void 0) {
      return this.showAnswer();
    } else {
      return this.next();
    }
  };

  BaseSlideView.prototype.answerDetails = function() {
    return [];
  };

  BaseSlideView.prototype.isCorrect = function() {
    return true;
  };

  BaseSlideView.prototype.showAnswer = function() {};

  BaseSlideView.prototype.exit = function() {
    return Backbone.Events.trigger("application-exit");
  };

  BaseSlideView.prototype.delegateEvents = function() {
    BaseSlideView.__super__.delegateEvents.apply(this, arguments);
    this.toggleNonBubblingEvents("add");
    this.listenTo(this, "refresh", this.onRefresh);
    this.listenTo(this, "narration-loaded", this.onNarrationLoaded);
    this.listenTo(this, "narration-progress", this.onNarrationProgress);
    this.listenTo(this, "narration-pause", this.onNarrationComplete);
    return this.listenTo(this, "narration-complete", this.onNarrationComplete);
  };

  BaseSlideView.prototype.undelegateEvents = function() {
    var arr, key, obj, _i, _len, _ref1;
    this.stopListening();
    this.toggleNonBubblingEvents("remove");
    for (key in this) {
      arr = this[key];
      if (!_.isArray(arr)) {
        arr = [arr];
      }
      _ref1 = _.compact(arr);
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        obj = _ref1[_i];
        if (typeof obj.undelegateEvents === "function") {
          obj.undelegateEvents();
        }
      }
    }
    return BaseSlideView.__super__.undelegateEvents.apply(this, arguments);
  };

  BaseSlideView.prototype.toggleNonBubblingEvents = function(dir) {
    var el, events, evt, selector, _results;
    events = {
      scroll: [".content-scroll", ".content-sm-scroll", ".content-md-scroll", ".content-lg-scroll"]
    };
    _results = [];
    for (evt in events) {
      selector = events[evt];
      _results.push((function() {
        var _i, _len, _ref1, _results1;
        _ref1 = this.el.querySelectorAll(selector.join(", "));
        _results1 = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          el = _ref1[_i];
          _results1.push(el["" + dir + "EventListener"](evt, this, false));
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  BaseSlideView.prototype.handleEvent = function(e) {
    switch (e.type) {
      case "scroll":
        return this.onScroll(e);
    }
  };

  BaseSlideView.prototype.onScroll = function(e) {
    return this.trigger("scroll", e);
  };

  return BaseSlideView;

})(Backbone.View);

module.exports = BaseSlideView;
});

;require.register("views/base/slides.coffee", function(exports, require, module) {
/*
  For the content engine, slides are configured by first loading the
  config.json file and post-rendering slides. The corresponding views are
  created from templates rather than slide specific views.
*/

var Analytics, BaseSlidesView, I18N, Lesson, LessonEngine, LessonMenuView, Preloader, Session, SlideAnswerView, Sound, TextInputView, processData, _ref, _ref1,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ref = Application.actions(), Sound = _ref.Sound, Analytics = _ref.Analytics, Session = _ref.Session;

LessonMenuView = require("views/components/lesson-menu");

SlideAnswerView = require("views/components/slide-answer");

TextInputView = require("views/components/text-input");

Preloader = require("lib/preload");

Lesson = require("models/lesson");

LessonEngine = require("models/lesson-engine");

processData = require("lib/data-processer");

I18N = require("lib/i18n");

BaseSlidesView = (function(_super) {
  __extends(BaseSlidesView, _super);

  function BaseSlidesView() {
    _ref1 = BaseSlidesView.__super__.constructor.apply(this, arguments);
    return _ref1;
  }

  BaseSlidesView.prototype.templates = {
    starsAvailable: require("templates/components/engine/stars-available"),
    starsEarned: require("templates/components/engine/stars-earned"),
    slideAnswer: require("templates/components/engine/slide-answer")
  };

  BaseSlidesView.prototype.events = {
    "iostap #slide-answer-continue": "onContinue",
    "iostap #lesson-header-nav-menu-btn": "openMenu",
    "iostap #play-audio-popup .btn-yes": "onNarrationAccept",
    "iostap #play-audio-popup .btn-no": "onNarrationReject"
  };

  BaseSlidesView.prototype.initialize = function(params, callback) {
    var isFullScreen,
      _this = this;
    callback();
    this.listenTo(this, "goToPage", this.onGoToPage);
    this.listenTo(this, "showView", this.onShowView);
    this.listenTo(Backbone.Events, "subscribe:event:new-star", this.onNewStar);
    this.listenTo(Backbone.Events, "application-exit", this.onExit);
    this.listenTo(Backbone.Events, "ed-closed", this.onDisconnection);
    this.listenTo(Backbone.Events, "load-narration", this.onLoadNarration);
    $(window).bind("unload pagehide", function() {
      Application.publish("event:lesson-closed")({});
      _this.onExit();
    });
    isFullScreen = false;
    $(document).on(["webkitfullscreenchange", "mozfullscreenchange", "fullscreenchange", "MSFullscreenChange"].join(" "), function() {
      isFullScreen = document.fullScreen || document.mozFullScreen || document.webkitIsFullScreen || !isFullScreen;
      return _this.toggleUI({
        fullscreen: isFullScreen
      });
    });
    if (!params.cms) {
      this.lesson = new Lesson();
      return this.lesson.load(function(err) {
        var renderData, _ref2;
        if (err != null) {
          return console.error("Error while loading the lesson data", err);
        } else {
          renderData = _.extend({}, params, _this.lesson.getSlides());
          I18N.initialize(((_ref2 = renderData.config) != null ? _ref2.language : void 0) || "en");
          return _this.initRenderWith(renderData);
        }
      });
    } else {
      return window.ED_CMS_MODE = true;
    }
  };

  BaseSlidesView.prototype.initRenderWith = function(data) {
    this.render(data);
    this.setElements();
    Preloader.preloadLessonAssets(data.slides);
    return Preloader.loadFromStylesheets();
  };

  BaseSlidesView.prototype.onExit = function() {
    this.stopCurrentNarration();
    this.stopTracking();
    Application.publish("event:exit")({});
    return Application.publish("lesson:exit")({});
  };

  BaseSlidesView.prototype.onDisconnection = function() {
    return this.el.querySelector("#disconnection-warning").classList.add("active");
  };

  BaseSlidesView.prototype.refresh = function(data, params) {
    var cmsOpts, options, renderedData, view, _i, _len, _ref2, _ref3, _ref4;
    if ((_ref2 = this.request) != null) {
      _ref2.abort();
    }
    window.clearTimeout(this.timeout);
    delete this.currentIndex;
    _ref3 = this.slideViews || [];
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      view = _ref3[_i];
      view.undelegateEvents().remove();
    }
    cmsOpts = {
      withoutNarration: true,
      forceResize: true,
      isRefresh: true
    };
    if (typeof Sound.disableSystemSounds === "function") {
      Sound.disableSystemSounds();
    }
    this.lesson = new Lesson(data);
    renderedData = this.lesson.getSlides();
    options = _.extend(cmsOpts, renderedData, params);
    I18N.initialize((data != null ? (_ref4 = data.config) != null ? _ref4.language : void 0 : void 0) || "en");
    this.render(options);
    return this.setElements();
  };

  BaseSlidesView.prototype.setCurrentState = function(state) {
    var _ref2;
    this.getCurrentSlide().setState(state);
    if (state === "complete" && (((_ref2 = this.getCurrentSlide().options.data) != null ? _ref2.answer : void 0) != null)) {
      return this.onComplete(this.getCurrentSlide(), {
        isCorrect: true
      });
    } else {
      return this.slideAnswerView.toggle(false);
    }
  };

  BaseSlidesView.prototype.refreshCurrentView = function(options, config) {
    var view;
    if (this.currentIndex != null) {
      view = this.getCurrentSlide();
      options.data = processData.one(options.data, view.options.type);
      options.metadata = processData.oneMD(options.metadata);
      if ((view != null) && !_.isEqual(options.data, view.options.data)) {
        this.toggleViewInDOM(view, true);
        view.withoutNarration = true;
        return view.refresh(options, config);
      }
    }
  };

  BaseSlidesView.prototype.createSlideViews = function(config) {
    var el, i, view, _i, _len, _ref2;
    if (this.slideViews) {
      _ref2 = this.slideViews;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        view = _ref2[_i];
        view.off().undelegateEvents();
      }
    }
    this.setElements();
    this.setGlobalStyles(this.options);
    this.slideViews = (function() {
      var _j, _len1, _ref3, _results;
      _ref3 = this.el.querySelectorAll(".slide");
      _results = [];
      for (i = _j = 0, _len1 = _ref3.length; _j < _len1; i = ++_j) {
        el = _ref3[i];
        view = this.createViewFor(el, this.options.slides[i], config);
        view.on("ui", this.toggleUI, this);
        view.on("complete", this.onComplete, this);
        view.on("refresh", this.onRefresh, this);
        view.on("scroll", this.onScroll, this);
        view.on("video-play", this.onVideoPlay, this);
        view.on("video-pause", this.onVideoPause, this);
        _results.push(view);
      }
      return _results;
    }).call(this);
    if (this.options.debug) {
      return this.logMenu();
    }
  };

  BaseSlidesView.prototype.logMenu = function() {
    var Logger, el, i, name, _i, _len, _ref2, _results;
    Logger = new (require("lib/logger"))(!window.cordova, "MENU", "#2DB906");
    _ref2 = this.slideViews;
    _results = [];
    for (i = _i = 0, _len = _ref2.length; _i < _len; i = ++_i) {
      el = _ref2[i];
      name = el.options.name;
      while (name.length < 22) {
        name += " ";
      }
      _results.push(Logger("" + name + " " + window.location.origin + "/#slide/" + (i + 1)));
    }
    return _results;
  };

  BaseSlidesView.prototype.createViewFor = function(el, data, config) {
    var View, v;
    View = require("engine/" + data.type + "/view");
    v = new View(this.optionsForView(el, data, config));
    v.lesson = this.lesson;
    return v;
  };

  BaseSlidesView.prototype.getExtraConfig = function(params) {
    var defaultConfig;
    defaultConfig = {
      pagination: false,
      indicator: true,
      locked: true,
      webAccess: document.location.pathname.match(/\/lessons/) != null
    };
    params.config = _.extend({}, defaultConfig, params.config);
    return params;
  };

  BaseSlidesView.prototype.toggleUI = function(state) {
    var key, val, _results;
    if (state.lightbox != null) {
      if (state.minimal == null) {
        state.minimal = state.lightbox;
      }
      this.lightboxBgEl.style.backgroundColor = typeof state.lightbox === "string" ? state.lightbox : state.lightbox ? "#111" : "";
    }
    _results = [];
    for (key in state) {
      val = state[key];
      if (val != null) {
        _results.push(this.el.classList.toggle("ui-" + (written.hyphenCase(key)), val));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  BaseSlidesView.prototype.onVideoPlay = function() {
    return this.toggleUI({
      videoActive: true
    });
  };

  BaseSlidesView.prototype.onVideoPause = function() {
    return this.toggleUI({
      videoActive: false
    });
  };

  BaseSlidesView.prototype.toggleStars = function(index) {
    var _this = this;
    if ((this.slideViews[index] == null) || this.options.scorm) {
      return;
    }
    return Session.get(function(err, _arg) {
      var alreadyCompleted, available, data, earned, enableStars, isGame, stars, total, _ref10, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
      stars = _arg.stars, alreadyCompleted = _arg.alreadyCompleted, enableStars = _arg.enableStars;
      data = _this.slideViews[index].options.data;
      available = enableStars || _this.options.enableStars ? (_ref2 = (_ref3 = (_ref4 = stars != null ? (_ref5 = stars[index]) != null ? _ref5.available : void 0 : void 0) != null ? _ref4 : data != null ? (_ref6 = data.challenge_configuration) != null ? _ref6.nb_stars : void 0 : void 0) != null ? _ref3 : data != null ? (_ref7 = data.challenge_configuration) != null ? _ref7.weighting : void 0 : void 0) != null ? _ref2 : 0 : 0;
      earned = (stars != null ? (_ref8 = stars[index]) != null ? _ref8.earned : void 0 : void 0) || 0;
      total = available + earned;
      isGame = (data != null ? (_ref9 = data.game) != null ? (_ref10 = _ref9.stars) != null ? _ref10.min : void 0 : void 0 : void 0) != null;
      window.clearTimeout(_this.starsTimeout);
      if (total > earned) {
        return _this.starsTimeout = window.setTimeout((function() {
          _this.slideStarsEl.innerHTML = _this.templates.starsAvailable({
            available: available,
            earned: earned,
            total: total
          });
          _this.slideStarsEl.offsetLeft;
          _this.el.classList.add("display-stars-avail");
          return _this.starsTimeout = window.setTimeout((function() {
            return _this.el.classList.remove("display-stars-avail");
          }), 2100);
        }), 600);
      } else {
        return _this.el.classList.remove("display-stars-avail");
      }
    });
  };

  BaseSlidesView.prototype.onComplete = function(view, _arg) {
    var answerDetails, data, id, isCorrect, isTooSlow, lessonConfiguration, name, type, _ref2,
      _this = this;
    isCorrect = _arg.isCorrect, isTooSlow = _arg.isTooSlow, answerDetails = _arg.answerDetails;
    _ref2 = view.options, name = _ref2.name, type = _ref2.type, data = _ref2.data, id = _ref2.id, lessonConfiguration = _ref2.lessonConfiguration;
    return Session.get(function(err, _arg1) {
      var attempt;
      attempt = _arg1.attempt;
      _this.lesson.processInteraction({
        id: id,
        name: name,
        type: type,
        slideData: data,
        correct: isCorrect,
        tooSlow: isTooSlow,
        answerDetails: answerDetails,
        configuration: data.challenge_configuration,
        playedSound: true,
        attempt: attempt,
        metadata: view.options.metadata
      });
      if ((isCorrect != null) && (lessonConfiguration != null ? lessonConfiguration.hasAnswerFeedback : void 0) && (data.answer != null)) {
        id = isCorrect ? "system:correct" : "system:incorrect";
        Sound.play(id);
        _this.slideAnswerView.render({
          isCorrect: isCorrect,
          isTooSlow: isTooSlow,
          answer: data.answer
        });
        return _this.slideAnswerView.toggle(true);
      }
    });
  };

  BaseSlidesView.prototype.onRefresh = function() {
    this.setElements();
    this.toggleStars(this.scroller.currentPage.pageX);
    return this.slideAnswerView.toggle(false);
  };

  BaseSlidesView.prototype.onContinue = function() {
    this.slideAnswerView.toggle(false);
    return this.getCurrentSlide().next();
  };

  BaseSlidesView.prototype.openMenu = function() {
    return this.lessonMenuView.open();
  };

  BaseSlidesView.prototype.onGoToPage = function(index, ms, options) {
    if (options == null) {
      options = {};
    }
    if (!(this.slideStarsEl && this.starsAlertEl && this.slideAnswerView)) {
      this.setElements();
    }
    this.toggleStars(index);
    this.toggleUI({
      lightbox: false
    });
    this.slideAnswerView.toggle(false);
    return this.lessonMenuView.setPage(index);
  };

  BaseSlidesView.prototype.onShowView = function(slideView) {
    this.startTracking(slideView);
    if (window.location.href.split("thumbnail=true").length !== 2) {
      this.playNarration(slideView);
    }
    return this.el.classList.remove("scroll-top", "scroll-bottom", "scroll-middle");
  };

  BaseSlidesView.prototype.onScroll = function(e, key) {
    var el;
    el = e != null ? e.currentTarget : void 0;
    if (key == null) {
      key = (function() {
        switch (el.scrollTop) {
          case 0:
            return "top";
          case el.scrollHeight - el.offsetHeight:
            return "bottom";
          default:
            return "middle";
        }
      })();
    }
    this.el.classList.toggle("scroll-top", key === "top");
    this.el.classList.toggle("scroll-bottom", key === "bottom");
    return this.el.classList.toggle("scroll-middle", key === "middle");
  };

  BaseSlidesView.prototype.goToPageFromCMS = function(index, options) {
    var _ref2, _ref3,
      _this = this;
    this.toggleViewInDOM(this.slideViews[index], true);
    if ((_ref2 = this.slideViews[index]) != null) {
      _ref2.reset();
    }
    if ((_ref3 = this.slideViews[index]) != null) {
      _ref3.withoutNarration = true;
    }
    this.goToPage(index, options.ms, {
      fromCMS: true
    });
    window.clearTimeout(this.gotoTimeout);
    return this.gotoTimeout = window.setTimeout((function() {
      var _ref4;
      return (_ref4 = _this.slideViews[index]) != null ? _ref4.trigger("resize") : void 0;
    }), 600);
  };

  BaseSlidesView.prototype.onNewStar = function(_arg) {
    var earned, score, total,
      _this = this;
    earned = _arg.earned, total = _arg.total, score = _arg.score;
    window.clearTimeout(this.starAlertTimeout);
    if (score > 0) {
      this.starsAlertEl.classList.add("before-display");
      return this.starAlertTimeout = window.setTimeout((function() {
        var _i, _results;
        _this.starsAlertEl.innerHTML = _this.templates.starsEarned({
          stars: (function() {
            _results = [];
            for (var _i = 0; 0 <= total ? _i < total : _i > total; 0 <= total ? _i++ : _i--){ _results.push(_i); }
            return _results;
          }).apply(this).map(function(el, i) {
            return {
              complete: i < score
            };
          })
        });
        _this.starsAlertEl.offsetLeft;
        _this.starsAlertEl.classList.add("display");
        return _this.starAlertTimeout = window.setTimeout((function() {
          return _this.starsAlertEl.classList.remove("display", "before-display");
        }), 2100);
      }), 300);
    }
  };

  BaseSlidesView.prototype.onLoadNarration = function(isLoading) {
    return this.el.classList.toggle("is-loading-narration", isLoading);
  };

  BaseSlidesView.prototype.setElements = function() {
    var goToPage, _ref2, _ref3, _ref4,
      _this = this;
    this.slideStarsEl = this.el.querySelector("#stars-available");
    this.starsAlertEl = this.el.querySelector("#stars-earned");
    this.audioPopupEl = this.el.querySelector("#play-audio-popup");
    this.lightboxBgEl = this.el.querySelector("#slides-lightbox-bg");
    if ((_ref2 = this.textInputView) != null) {
      _ref2.undelegateEvents();
    }
    this.textInputView = new TextInputView({
      el: "#text-input-view"
    });
    this.textInputView.on("open", function() {
      return _this.toggleUI({
        textInput: true
      });
    });
    this.textInputView.on("exit", function() {
      return _this.toggleUI({
        textInput: false
      });
    });
    goToPage = function(index) {
      _this.toggleViewInDOM(_this.slideViews[index], true);
      _this.slideViews[index].el.offsetWidth;
      return _this.goToPage(index);
    };
    if ((_ref3 = this.lessonMenuView) != null) {
      _ref3.undelegateEvents();
    }
    this.lessonMenuView = new LessonMenuView({
      el: this.el.querySelector("#lesson-menu"),
      back: function() {
        return goToPage(_this.currentIndex - 1);
      },
      restart: function() {
        return goToPage(0);
      },
      scorm: this.options.scorm
    });
    if ((_ref4 = this.slideAnswerView) != null) {
      _ref4.undelegateEvents();
    }
    return this.slideAnswerView = new SlideAnswerView({
      el: this.el.querySelector("#slide-answer")
    });
  };

  BaseSlidesView.prototype.setGlobalStyles = function(params) {
    var shouldSetBody;
    _.extend(this.options, params);
    shouldSetBody = this.el.getBoundingClientRect().left !== 0;
    this.setColors(shouldSetBody);
    this.setCustomCSS();
    this.setBackgroundImage(shouldSetBody);
    return this.lessonMenuView.updateStyle(this.options.config);
  };

  BaseSlidesView.prototype.setColors = function(shouldSetBody) {
    var background, isDark, text, _ref2, _ref3;
    if (((_ref2 = this.options.config) != null ? _ref2.colors : void 0) != null) {
      _ref3 = this.options.config.colors, text = _ref3.text, background = _ref3.background;
      this.el.className = this.el.className.replace(/theme-[\w-]+/, "");
      if (this.options.config.colors.theme) {
        this.el.classList.add("theme-" + this.options.config.colors.theme);
      }
      this.el.style.color = text;
      this.el.style.backgroundColor = background;
      if (shouldSetBody) {
        document.body.style.backgroundColor = background;
      }
      isDark = (window.getComputedStyle(this.el).color.split(/\D+/).filter(function(e) {
        return e;
      }).slice(0, 3).map(parseFloat).reduce((function(m, e) {
        return m + e / 255;
      }), 0)) / 3 < 0.3;
      return this.el.classList.toggle("text-dark", isDark);
    }
  };

  BaseSlidesView.prototype.setCustomCSS = function() {
    var css, _ref2, _ref3;
    if (css = (_ref2 = this.options.config) != null ? _ref2.customCSS : void 0) {
      return (_ref3 = this.el.querySelector("#custom-css")) != null ? _ref3.innerHTML = css : void 0;
    }
  };

  BaseSlidesView.prototype.setBackgroundImage = function(shouldSetBody) {
    var backgroundEl, backgroundImage, _ref2;
    backgroundEl = this.el.querySelector("#slides-background");
    backgroundImage = ((_ref2 = this.options.config) != null ? _ref2.background : void 0) != null ? "url(" + this.options.config.background + ")" : "";
    if (backgroundEl != null) {
      backgroundEl.style.backgroundImage = backgroundImage;
    }
    if (shouldSetBody) {
      return document.body.style.backgroundImage = backgroundImage;
    }
  };

  BaseSlidesView.prototype.startTracking = function(slideView) {
    var id, name, _ref2, _ref3;
    if (this.durations == null) {
      this.durations = {};
    }
    this.stopTracking();
    id = (_ref2 = slideView.options) != null ? _ref2.id : void 0;
    name = slideView.getTrackingTitle() || ((_ref3 = slideView.options) != null ? _ref3.name : void 0);
    return this.durations[id] = {
      start: Date.now(),
      name: name
    };
  };

  BaseSlidesView.prototype.stopTracking = function() {
    var details, duration, id, _ref2, _results;
    _ref2 = this.durations;
    _results = [];
    for (id in _ref2) {
      details = _ref2[id];
      duration = Date.now() - details.start;
      delete this.durations[id];
      _results.push(Session.get(function(err, _arg) {
        var sessionId;
        sessionId = _arg.sessionId;
        return Analytics.trackView({
          name: details.name,
          id: id,
          duration: duration,
          session: sessionId
        });
      }));
    }
    return _results;
  };

  BaseSlidesView.prototype.getCurrentSlide = function() {
    return this.slideViews[this.currentIndex];
  };

  BaseSlidesView.prototype.stopCurrentNarration = function() {
    if (this.narration != null) {
      return Sound.stop(this.narration);
    }
  };

  BaseSlidesView.prototype.onNarrationReject = function() {
    var slideView;
    slideView = this.getCurrentSlide();
    this.audioPopupEl.classList.remove("active");
    slideView.trigger("narration-complete");
    return slideView.setState("prompt");
  };

  BaseSlidesView.prototype.onNarrationAccept = function() {
    this.audioPopupEl.classList.remove("active");
    if (typeof Sound.playEmpty === "function") {
      Sound.playEmpty();
    }
    return this.playNarration(this.getCurrentSlide());
  };

  BaseSlidesView.prototype.playNarration = function(slideView) {
    var data, loaded, wait, _ref2,
      _this = this;
    this.stopCurrentNarration();
    window.clearTimeout(this.narrationTimeout);
    if (slideView.withoutNarration || this.options.withoutNarration) {
      return;
    }
    data = slideView != null ? slideView.serialize() : void 0;
    wait = 100;
    loaded = false;
    this.narration = (_ref2 = data.narration) != null ? _ref2.audio_file : void 0;
    if (this.narration) {
      if (data.narration.can_not_be_skipped) {
        slideView.setState("narration");
        slideView.trigger("narration-progress", 0);
      }
      return this.narrationTimeout = window.setTimeout(function() {
        var firstSoundPlayed;
        firstSoundPlayed = Sound.firstSoundPlayed || function(n) {
          return n(null, true);
        };
        return firstSoundPlayed(function(err, firstSoundPlayed) {
          if (!firstSoundPlayed) {
            return _this.audioPopupEl.classList.add("active");
          } else {
            return Sound.play(_this.narration, {
              cb: function() {},
              onProgress: function(e) {
                if (!loaded) {
                  slideView.trigger("narration-loaded", e);
                  loaded = true;
                }
                return slideView.trigger("narration-progress", e);
              },
              onComplete: function() {
                if (data.narration.progress_on_completion) {
                  return slideView.next();
                } else {
                  return slideView.trigger("narration-complete");
                }
              }
            });
          }
        });
      }, wait);
    }
  };

  return BaseSlidesView;

})(Backbone.View);

module.exports = BaseSlidesView;
});

;require.register("views/components/draggy.coffee", function(exports, require, module) {
/*
  DraggyView abstracts dragging functionality across all Thomas's
  templates. It can be bound to a rectangle, locked on an axis or constrained
  to a cicle. It's important to note that DraggyView doesn't actually
  transform the element, it merely provides evented feedback of it's
  interaction. Listen to it's drag and drop events and manipulate the view as
  necessary, whether it be transforming a child, the view itself or adding
  dropping logic rules.

  Properties:
    draggy.x: Current x position
    draggy.y: Current y position
    draggy.t: Current rotation (theta) adjusted to the *top of the circle*

    These attributes are also available as data attributes on draggy.el.

    draggy.velocity:
      x: horizontal pixel movement per ms
      y: vertical pixel movement per ms
      t: angle of movement
      dir: "up", "right", "down", "left" or "none"

    Velocity is a measurement of movement occuring in the last 300ms.
    Use getVelocity(ms) to include movement over a different duration.

  Public methods:
    draggy.lock()
    draggy.unlock()
    draggy.isWithin(bounds[, buffer])
    draggy.isOver(bounds[, buffer])
    draggy.closest([bounds...])
    draggy.distanceTo(x, y[, opts])
    draggy.reset({x, y, t})
    draggy.getVelocity([ms])

  Events:
    drag: (draggy, isFirstDrag)
    drop: (draggy)

  Options:
    minX: Minimum x position
    maxX: Maximum x position
    minY: Minimum y position
    maxY: Maximum y position
    lock: "x" or "y"
    radius: Radius of circular bounds
    isParent: False if the element transforms, true if a child will instead
    allowPropagation: Stop immediate event propagation on touch start
*/

var DraggyView, Easie, FULL_TURN, Prefix, QUARTER_TURN, getBounds, pointer, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Easie = require("lib/easie");

Prefix = require("lib/prefix");

getBounds = require("lib/element").getBounds;

pointer = require("lib/device").events.pointer;

QUARTER_TURN = Math.PI / 2;

FULL_TURN = Math.PI * 2;

DraggyView = (function(_super) {
  __extends(DraggyView, _super);

  function DraggyView() {
    _ref = DraggyView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  DraggyView.prototype.initialize = function(options) {
    var _base, _base1, _base2, _base3, _ref1, _ref2;
    this.options = options;
    if ((_base = this.options).minX == null) {
      _base.minX = -Infinity;
    }
    if ((_base1 = this.options).minY == null) {
      _base1.minY = -Infinity;
    }
    if ((_base2 = this.options).maxX == null) {
      _base2.maxX = Infinity;
    }
    if ((_base3 = this.options).maxY == null) {
      _base3.maxY = Infinity;
    }
    this.x = (_ref1 = this.el.dataset) != null ? _ref1.x = 0 : void 0;
    this.y = (_ref2 = this.el.dataset) != null ? _ref2.y = 0 : void 0;
    this.velocity = {};
    return this.getOffset();
  };

  DraggyView.prototype.events = function() {
    var events;
    events = {
      "dragstart": "preventDefault"
    };
    events[pointer.start] = "onStart";
    return events;
  };

  DraggyView.prototype.bindExtra = function() {
    document.addEventListener(pointer.move, this, false);
    return document.addEventListener(pointer.end, this, false);
  };

  DraggyView.prototype.unbindExtra = function() {
    document.removeEventListener(pointer.move, this, false);
    return document.removeEventListener(pointer.end, this, false);
  };

  DraggyView.prototype.handleEvent = function(e) {
    switch (e.type) {
      case pointer.move:
        e.preventDefault();
        this.onMove(e);
        break;
      case pointer.end:
        this.onEnd(e);
        break;
    }
  };

  DraggyView.prototype.undelegateEvents = function() {
    this.unbindExtra();
    return DraggyView.__super__.undelegateEvents.apply(this, arguments);
  };

  DraggyView.prototype.onStart = function(e) {
    if (this.locked) {
      return;
    }
    if (!this.options.allowPropagation) {
      e.stopImmediatePropagation();
    }
    this.el.classList.add("active");
    this.el.style.zIndex = 99;
    this.el.style[Prefix("touchAction")] = "none";
    this.history = [];
    this.getOffset();
    this.getStart(e);
    this.onMove(e);
    return this.bindExtra();
  };

  DraggyView.prototype.onMove = function(e) {
    var _e, _ref1;
    _e = pointer.isTouch ? e.touches[0] : e;
    _ref1 = this.constrain({
      x: _e.pageX - this.start.x,
      y: _e.pageY - this.start.y,
      buffer: 20
    }), this.x = _ref1.x, this.y = _ref1.y, this.t = _ref1.t;
    this.getVelocity();
    this.trigger("drag", this, e.type === pointer.start);
    return this.disableUserSelect();
  };

  DraggyView.prototype.disableUserSelect = function() {
    return document.body.classList.add("disable-select");
  };

  DraggyView.prototype.onEnd = function(e) {
    var _ref1;
    this.unbindExtra();
    _ref1 = this.constrain({
      x: this.x,
      y: this.y,
      t: this.t,
      buffer: 0
    }), this.x = _ref1.x, this.y = _ref1.y, this.t = _ref1.t;
    this.el.dataset.x = this.x;
    this.el.dataset.y = this.y;
    this.el.dataset.t = this.t;
    this.el.classList.remove("active");
    this.el.style.zIndex = "";
    this.el.style[Prefix("touchAction")] = "";
    this.trigger("drop", this);
    return document.body.classList.remove("disable-select");
  };

  DraggyView.prototype.getOffset = function() {
    var bottom, height, left, right, top, width, _ref1;
    _ref1 = this.el.getBoundingClientRect(), top = _ref1.top, left = _ref1.left, right = _ref1.right, bottom = _ref1.bottom, width = _ref1.width, height = _ref1.height;
    return this.offset = getBounds(this.el, {
      x: (this.options.isParent ? 0 : -this.x),
      y: (this.options.isParent ? 0 : -this.y)
    });
  };

  DraggyView.prototype.getStart = function(e) {
    var _e;
    _e = pointer.isTouch ? e.touches[0] : e;
    this.start = {
      x: _e.pageX - this.x,
      y: _e.pageY - this.y
    };
    if (this.options.isParent) {
      this.start.x += this.x + this.offset.left - _e.pageX;
      this.start.y += this.y + this.offset.top - _e.pageY;
    }
    if (this.options.radius) {
      this.start.x += this.options.radius;
      return this.start.y += this.options.radius;
    }
  };

  DraggyView.prototype.getVelocity = function(ms) {
    var dimension, dir, history, now, t, velocity, x, y, _ref1;
    if (ms == null) {
      ms = 300;
    }
    now = Date.now();
    this.history.push({
      x: this.x,
      y: this.y,
      timestamp: now
    });
    history = this.history.filter(function(p) {
      return now - p.timestamp < ms;
    });
    _ref1 = (function() {
      var _i, _len, _ref1, _results;
      _ref1 = ["x", "y"];
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        dimension = _ref1[_i];
        velocity = history.reduce((function(m, p1, i, a) {
          var p2;
          p2 = a[i - 1] || p1;
          return m + (p2[dimension] - p1[dimension]);
        }), 0);
        _results.push(velocity / (now - history[0].timestamp));
      }
      return _results;
    })(), x = _ref1[0], y = _ref1[1];
    t = -Math.atan2(x, y);
    dir = (function() {
      switch (Math.round(t / QUARTER_TURN)) {
        case 0:
          return "up";
        case 1:
          return "right";
        case 2:
        case -2:
          return "down";
        case -1:
          return "left";
        default:
          return "none";
      }
    })();
    return this.velocity = {
      x: x,
      y: y,
      t: t,
      dir: dir
    };
  };

  DraggyView.prototype.constrain = function(_arg) {
    var buffer, lock, maxX, maxY, minX, minY, radius, t, x, y, _ref1, _ref2;
    x = _arg.x, y = _arg.y, buffer = _arg.buffer;
    _ref1 = this.options, minX = _ref1.minX, minY = _ref1.minY, maxX = _ref1.maxX, maxY = _ref1.maxY, lock = _ref1.lock, radius = _ref1.radius;
    if (radius) {
      t = this.toAngle(x, y);
      _ref2 = this.toPosition(t), x = _ref2.x, y = _ref2.y;
    } else {
      x = lock === "x" ? 0 : this.limit(x, minX, maxX, buffer);
      y = lock === "y" ? 0 : this.limit(y, minY, maxY, buffer);
    }
    return {
      x: x,
      y: y,
      t: t
    };
  };

  DraggyView.prototype.limit = function(value, min, max, buffer) {
    if (value < min) {
      return min - Easie.expoOut(min - value, 0, buffer, max - min);
    } else if (value > max) {
      return max + Easie.expoOut(value - max, 0, buffer, max - min);
    } else {
      return value;
    }
  };

  DraggyView.prototype.reset = function(_arg) {
    var t, x, y, _ref1, _ref2;
    _ref1 = _arg != null ? _arg : {}, x = _ref1.x, y = _ref1.y, t = _ref1.t;
    if ((x != null) || (y != null) || (t == null)) {
      if (x == null) {
        x = 0;
      }
      if (y == null) {
        y = 0;
      }
      t = this.toAngle(x, y);
      if (t < 0) {
        t += FULL_TURN;
      }
    } else if (t != null) {
      _ref2 = this.toPosition(t), x = _ref2.x, y = _ref2.y;
    }
    this.el.dataset.t = this.t = t;
    this.el.dataset.x = this.x = x;
    this.el.dataset.y = this.y = y;
    return this.trigger("drop", this, true);
  };

  DraggyView.prototype.toAngle = function(x, y) {
    return -Math.atan2(x, y) + Math.PI;
  };

  DraggyView.prototype.toPosition = function(t) {
    return {
      x: Math.cos(t - QUARTER_TURN) * this.options.radius,
      y: Math.sin(t - QUARTER_TURN) * this.options.radius
    };
  };

  DraggyView.prototype.lock = function() {
    this.locked = true;
    return this.el.classList.add("locked");
  };

  DraggyView.prototype.unlock = function() {
    this.locked = false;
    return this.el.classList.remove("locked");
  };

  DraggyView.prototype.isWithin = function(bounds, buffer) {
    var bottom, left, right, top, _ref1;
    if (buffer == null) {
      buffer = 0;
    }
    if (this.options.isParent) {
      left = top = right = bottom = 0;
    } else {
      _ref1 = this.offset, left = _ref1.left, top = _ref1.top, right = _ref1.right, bottom = _ref1.bottom;
    }
    return left + this.x > bounds.left - buffer && right + this.x < bounds.right + buffer && top + this.y > bounds.top - buffer && bottom + this.y < bounds.bottom + buffer;
  };

  DraggyView.prototype.isOver = function(bounds, buffer) {
    var bottom, height, left, right, top, width, _ref1;
    left = bounds.left, top = bounds.top, right = bounds.right, bottom = bounds.bottom;
    _ref1 = this.offset, width = _ref1.width, height = _ref1.height;
    left -= width;
    right += width;
    top -= height;
    bottom += height;
    return this.isWithin({
      left: left,
      top: top,
      right: right,
      bottom: bottom
    }, buffer);
  };

  DraggyView.prototype.closest = function(areas) {
    var a, _ref1;
    a = {
      xmin: this.offset.left + this.x,
      xmax: this.offset.left + this.x + this.offset.width,
      ymin: this.offset.top + this.y,
      ymax: this.offset.top + this.y + this.offset.height
    };
    return (_ref1 = _.chain(areas).map(function(bounds) {
      return {
        xmin: bounds.left,
        xmax: bounds.left + bounds.width,
        ymin: bounds.top,
        ymax: bounds.top + bounds.height
      };
    }).map(function(b, index) {
      var area, dx, dy;
      dx = Math.min(a.xmax, b.xmax) - Math.max(a.xmin, b.xmin);
      dy = Math.min(a.ymax, b.ymax) - Math.max(a.ymin, b.ymin);
      if (dx >= 0 && dy >= 0) {
        area = dx * dy;
      }
      return {
        area: area,
        index: index
      };
    }).filter("area").sortBy("area").last().value()) != null ? _ref1.index : void 0;
  };

  DraggyView.prototype.distanceTo = function(x1, y1, _arg) {
    var fromCenter, height, left, offsetX, offsetY, top, width, x, y, _ref1, _ref2;
    _ref1 = _arg != null ? _arg : {}, fromCenter = _ref1.fromCenter, offsetX = _ref1.offsetX, offsetY = _ref1.offsetY;
    _ref2 = this.offset, left = _ref2.left, top = _ref2.top, width = _ref2.width, height = _ref2.height;
    if (offsetX == null) {
      offsetX = fromCenter ? left + width / 2 : 0;
    }
    if (offsetY == null) {
      offsetY = fromCenter ? top + height / 2 : 0;
    }
    x = x1 - (this.x + offsetX);
    y = y1 - (this.y + offsetY);
    return Math.sqrt(x * x + y * y);
  };

  DraggyView.prototype.preventDefault = function() {
    return false;
  };

  return DraggyView;

})(Backbone.View);

module.exports = DraggyView;
});

;require.register("views/components/lesson-menu.coffee", function(exports, require, module) {
var LessonMenuView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

LessonMenuView = (function(_super) {
  __extends(LessonMenuView, _super);

  function LessonMenuView() {
    _ref = LessonMenuView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  LessonMenuView.prototype.events = {
    "iostap #lesson-menu-exit": "exit",
    "iostap #lesson-menu-go-back": "back",
    "iostap #lesson-menu-restart": "restart",
    "iostap #lesson-menu-cancel": "close"
  };

  LessonMenuView.prototype.initialize = function(options) {
    var showScoring, _ref1, _ref2;
    this.options = options;
    this.pageNumber = this.el.querySelector("#lesson-menu-page-count");
    showScoring = this.options.scorm || ((_ref1 = window.__) != null ? (_ref2 = _ref1.slidedeck) != null ? _ref2.isScored : void 0 : void 0);
    return this.el.classList.add(showScoring ? "scoring" : "no-scoring");
  };

  LessonMenuView.prototype.open = function() {
    return this.el.classList.add("active");
  };

  LessonMenuView.prototype.close = function() {
    return this.el.classList.remove("active");
  };

  LessonMenuView.prototype.exit = function() {
    return Backbone.Events.trigger("application-exit");
  };

  LessonMenuView.prototype.back = function() {
    this.options.back();
    return this.close();
  };

  LessonMenuView.prototype.restart = function() {
    this.options.restart();
    return this.close();
  };

  LessonMenuView.prototype.updateStyle = function(_arg) {
    var background, colors, image, text, _ref1, _ref2;
    _ref1 = _arg != null ? _arg : {}, colors = _ref1.colors, background = _ref1.background;
    image = background != null ? "url(" + background + ")" : "";
    _ref2 = colors || {}, text = _ref2.text, background = _ref2.background;
    this.el.style.backgroundImage = image;
    this.el.style.backgroundColor = background;
    return this.el.style.color = text;
  };

  LessonMenuView.prototype.setPage = function(index) {
    var total;
    total = this.pageNumber.dataset.total;
    this.pageNumber.innerHTML = window.marked(i18n("menu.page-count", {
      index: index + 1,
      total: total
    }));
    this.el.classList.remove("page-" + this.currentIndex);
    return this.el.classList.add("page-" + (this.currentIndex = index));
  };

  return LessonMenuView;

})(Backbone.View);

module.exports = LessonMenuView;
});

;require.register("views/components/menu.coffee", function(exports, require, module) {
var MenuView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

MenuView = (function(_super) {
  __extends(MenuView, _super);

  function MenuView() {
    _ref = MenuView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  MenuView.prototype.events = function() {};

  MenuView.prototype.show = function() {
    return this.el.classList.add("show");
  };

  MenuView.prototype.hide = function() {
    return this.el.classList.remove("show");
  };

  return MenuView;

})(Backbone.View);

module.exports = MenuView;
});

;require.register("views/components/picker.coffee", function(exports, require, module) {
/*
  PickerView stores the value of a picker element, handles interaction and
  a scrolling element. While it doesn't apply transforms to the scroller, it
  provides feedback via a "change" event allowing manipulation by it's parent.

  Properties:
    picker.value: Current value of the picker

    This attribute is also available as a data attribute on picker.el.

  Public methods:
    picker.toggleUp(boolean)
    picker.toggleDown(boolean)
    picker.setBy(diff)

  Events:
    change: (picker, isIncreasing)

  Options:
    value: Initial value of the picker
*/

var PickerView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

PickerView = (function(_super) {
  __extends(PickerView, _super);

  function PickerView() {
    _ref = PickerView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  PickerView.prototype.initialize = function(options) {
    this.options = options;
    this.value = this.el.dataset.value = this.options.value;
    this.scroller = this.el.querySelector(".number-picker-nums-scroller");
    return this.getOffset();
  };

  PickerView.prototype.events = function() {
    return {
      "iostap .number-picker-arr-up": "onTapUp",
      "iostap .number-picker-arr-down": "onTapDown"
    };
  };

  PickerView.prototype.setBy = function(diff) {
    var value;
    value = this.value + diff;
    if (value > 9) {
      value = 0;
    }
    if (value < 0) {
      value = 9;
    }
    this.value = this.el.dataset.value = value;
    return this.trigger("change", this, diff > 0);
  };

  PickerView.prototype.onTapUp = function() {
    return this.setBy(1, true);
  };

  PickerView.prototype.onTapDown = function() {
    return this.setBy(-1, false);
  };

  PickerView.prototype.toggleUp = function(enabled) {
    return this.el.classList.toggle("disabled-up", enabled);
  };

  PickerView.prototype.toggleDown = function(enabled) {
    return this.el.classList.toggle("disabled-down", enabled);
  };

  PickerView.prototype.getOffset = function() {
    var el;
    el = this.el.querySelector(".number-picker-nums");
    return this.offset = {
      width: el.offsetWidth,
      height: el.offsetHeight
    };
  };

  return PickerView;

})(Backbone.View);

module.exports = PickerView;
});

;require.register("views/components/slide-answer.coffee", function(exports, require, module) {
var Draggy, SlideAnswerView, transform, transition, _ref, _ref1,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Draggy = require("views/components/draggy");

_ref = require("lib/element"), transform = _ref.transform, transition = _ref.transition;

SlideAnswerView = (function(_super) {
  __extends(SlideAnswerView, _super);

  function SlideAnswerView() {
    _ref1 = SlideAnswerView.__super__.constructor.apply(this, arguments);
    return _ref1;
  }

  SlideAnswerView.prototype.template = require("templates/components/engine/slide-answer");

  SlideAnswerView.prototype.events = function() {
    return {
      "touchstart #slide-answer-details .content-scroll": "toggleDraggy",
      "touchmove  #slide-answer-details .content-scroll": "toggleDraggy",
      "touchend   #slide-answer-details .content-scroll": "toggleDraggy"
    };
  };

  SlideAnswerView.prototype.initialize = function() {
    this.draggy = new Draggy({
      el: this.el,
      lock: "x",
      minY: 0,
      maxY: this.el.offsetHeight,
      isParent: false,
      allowPropagation: true
    });
    this.toggle(false);
    this.listenTo(this.draggy, "drag", this.onDrag);
    return this.listenTo(this.draggy, "drop", this.onDrop);
  };

  SlideAnswerView.prototype.render = function(data) {
    if (data == null) {
      data = {};
    }
    data = _.extend({}, typogr, data);
    this.el.classList.toggle("has-takeaway", data.answer.takeaway);
    this.el.innerHTML = this.template(data);
    this.draggy.getOffset();
    return this.draggy.options.maxY = this.el.offsetHeight;
  };

  SlideAnswerView.prototype.onDrag = function(draggy, isInitial) {
    return transform(draggy.el, {
      y: draggy.y,
      opacity: 1 - (draggy.y / draggy.options.maxY) / 6,
      transition: isInitial ? "all 300ms" : "none"
    });
  };

  SlideAnswerView.prototype.onDrop = function(draggy, isReset) {
    if (!isReset) {
      return draggy.reset();
    } else {
      return transform(draggy.el, {
        y: draggy.y,
        opacity: 1,
        transition: "all 300ms"
      });
    }
  };

  SlideAnswerView.prototype.toggle = function(enabled) {
    if (enabled) {
      this.draggy.unlock();
    } else {
      this.draggy.lock();
    }
    transition(this.el, "all 300ms " + (enabled ? 600 : 0) + "ms", true);
    return transform(this.el, {
      y: enabled ? 0 : "100%"
    });
  };

  SlideAnswerView.prototype.destroy = function() {
    this.draggy.undelegateEvents();
    this.draggy = null;
    return this.undelegateEvents();
  };

  SlideAnswerView.prototype.toggleDraggy = function(e) {
    if (e.currentTarget.scrollHeight > e.currentTarget.offsetHeight) {
      e.stopImmediatePropagation();
    }
    return true;
  };

  return SlideAnswerView;

})(Backbone.View);

module.exports = SlideAnswerView;
});

;require.register("views/components/text-input.coffee", function(exports, require, module) {
var TextInputView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

TextInputView = (function(_super) {
  __extends(TextInputView, _super);

  function TextInputView() {
    _ref = TextInputView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  TextInputView.prototype.template = require("templates/components/engine/slide-answer");

  TextInputView.prototype.events = {
    "open": "open",
    "exit": "exit",
    "iostap #text-input-title": "onBlur",
    "iostap #text-input-prompt": "onBlur",
    "iostap #text-input-dismiss-btn": "onBlur",
    "input #text-input-area": "onChange",
    "focusout #text-input-area": "onBlur",
    "touchmove": "lockScroll"
  };

  TextInputView.prototype.initialize = function() {
    if (!this.el) {
      return;
    }
    if (window.navigator.userAgent.match(/iP(ad|hone|od)/)) {
      this.el.classList.add("is-ios");
    }
    return this.elements = {
      input: this.el.querySelector("#text-input-area"),
      title: this.el.querySelector("#text-input-title"),
      prompt: this.el.querySelector("#text-input-prompt"),
      total: this.el.querySelector("#text-input-count-total"),
      current: this.el.querySelector("#text-input-count-current")
    };
  };

  TextInputView.prototype.open = function(e, options) {
    var _ref1,
      _this = this;
    this.options = options != null ? options : {};
    this.border = document.body.scrollTop;
    this.el.classList.add("visible");
    this.el.classList.toggle("has-min", this.options.min > 0);
    this.elements.input.value = this.options.value || "";
    this.elements.current.innerHTML = ((_ref1 = this.options.value) != null ? _ref1.length : void 0) || 0;
    this.elements.total.innerHTML = this.options.min || 0;
    this.elements.title.innerHTML = this.options.title || "";
    this.elements.prompt.innerHTML = this.options.prompt || "";
    this.sizeHeader();
    this.elements.input.focus();
    this.trigger("open");
    return this.showtimeout = window.setTimeout((function() {
      _this.active = true;
      _this.elements.input.focus();
      _this.lockScroll();
      _this.el.classList.add("active");
      return _this.el.style.borderTop = _this.el.style.borderBottom = "" + _this.border + "px";
    }), 300);
  };

  TextInputView.prototype.sizeHeader = function() {
    var bot, top;
    top = this.elements.title.parentNode.offsetHeight;
    bot = this.elements.prompt.parentNode.getBoundingClientRect().top;
    this.elements.input.parentNode.style.top = "" + top + "px";
    return this.elements.input.parentNode.style.bottom = "" + (this.el.offsetHeight - bot) + "px";
  };

  TextInputView.prototype.exit = function() {
    window.clearTimeout(this.showtimeout);
    document.activeElement.blur();
    this.active = false;
    this.el.classList.remove("active");
    this.el.classList.remove("visible");
    return this.trigger("exit");
  };

  TextInputView.prototype.onBlur = function() {
    if (!this.active) {
      return;
    }
    return this.exit();
  };

  TextInputView.prototype.onChange = function(e) {
    var value,
      _this = this;
    if (!this.active) {
      return;
    }
    value = this.elements.input.value;
    window.clearTimeout(this.changetimeout);
    this.changetimeout = window.setTimeout((function() {
      return _this.$el.trigger("update", value);
    }), 100);
    this.elements.current.innerHTML = value.length;
    return this.el.classList.toggle("is-complete", value.length >= this.options.min);
  };

  TextInputView.prototype.lockScroll = function(e) {
    var _ref1;
    if (this.active) {
      if ((e != null ? e.target : void 0) !== this.elements.input) {
        if (e != null) {
          e.preventDefault();
        }
      }
      if ((_ref1 = document.scrollingElement) != null) {
        _ref1.scrollTop = this.border;
      }
      return document.body.scrollTop = this.border;
    }
  };

  return TextInputView;

})(Backbone.View);

module.exports = TextInputView;
});

;require.register("views/components/zoom.coffee", function(exports, require, module) {
var Easie, Element, ZoomView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Element = require("lib/element");

Easie = require("lib/easie");

ZoomView = (function(_super) {
  __extends(ZoomView, _super);

  function ZoomView() {
    _ref = ZoomView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  ZoomView.prototype.initialize = function(options) {
    var _base, _base1, _base2, _base3, _base4;
    this.options = options;
    this.x = this.y = 0;
    this.getOffset();
    if ((_base = this.options).minScale == null) {
      _base.minScale = 0.5;
    }
    if ((_base1 = this.options).maxScale == null) {
      _base1.maxScale = 1.0;
    }
    if ((_base2 = this.options).buffer == null) {
      _base2.buffer = 0.1;
    }
    if ((_base3 = this.options).contentWidth == null) {
      _base3.contentWidth = this.offset.width;
    }
    if ((_base4 = this.options).contentHeight == null) {
      _base4.contentHeight = this.offset.height;
    }
    this.velocity = {};
    this.scale = this.options.minScale;
    return this.transform();
  };

  ZoomView.prototype.events = function() {
    return {
      "touch:gesture": "onGesture",
      "touch:drag": "onDrag",
      "touch:dbltap": "onDoubleTap"
    };
  };

  ZoomView.prototype.transform = function(isEnd) {
    var buffer, change, cscale, maxH, maxScale, maxW, minScale, _ref1;
    _ref1 = this.options, minScale = _ref1.minScale, maxScale = _ref1.maxScale, buffer = _ref1.buffer;
    cscale = Math.max(this.scale, this.options.minScale);
    change = -(this.options.minScale - cscale) / cscale;
    if (isEnd) {
      this.scale = Math.max(Math.min(this.scale, maxScale), minScale);
      this.isZoomed = this.scale > minScale;
      maxW = this.options.contentWidth / 2 * this.scale;
      maxH = this.options.contentHeight / 2 * this.scale;
      this.x = Math.max(Math.min(this.x, maxW), -maxW);
      this.y = Math.max(Math.min(this.y, maxH), -maxH);
      this.trigger("zoom", this);
    }
    return Element.transform(this.el.firstChild, {
      x: this.x * change,
      y: this.y * change,
      scale: this.scale,
      transition: isEnd ? "all 400ms" : "none"
    });
  };

  ZoomView.prototype.getOffset = function() {
    var bottom, height, left, right, top, width, _ref1;
    _ref1 = this.el.getBoundingClientRect(), top = _ref1.top, left = _ref1.left, right = _ref1.right, bottom = _ref1.bottom, width = _ref1.width, height = _ref1.height;
    return this.offset = {
      top: top,
      left: left,
      right: right,
      bottom: bottom,
      width: width,
      height: height
    };
  };

  ZoomView.prototype.set = function(_arg) {
    var scale, transition, x, y;
    scale = _arg.scale, x = _arg.x, y = _arg.y, transition = _arg.transition;
    if (scale != null) {
      this.scale = scale;
    }
    if (x != null) {
      this.x = x;
    }
    if (y != null) {
      this.y = y;
    }
    return this.transform(transition);
  };

  ZoomView.prototype.onDoubleTap = function(_arg) {
    var buffer, detail, maxScale, minScale, x, y, _ref1;
    detail = _arg.detail;
    _ref1 = this.options, minScale = _ref1.minScale, maxScale = _ref1.maxScale, buffer = _ref1.buffer;
    x = detail.x, y = detail.y;
    if (this.scale === maxScale) {
      this.scale = minScale;
    } else {
      this.scale += Math.max((maxScale - minScale) / 2, 0.2);
    }
    this.x = x * this.scale;
    this.y = y * this.scale;
    return this.transform(true);
  };

  ZoomView.prototype.onDrag = function(_arg) {
    var buffer, destX, destY, detail, didMove, distX, distY, distance, duration, maxH, maxScale, maxW, minScale, origin, repeat, start, state, timestamp, x, y, _ref1,
      _this = this;
    detail = _arg.detail;
    _ref1 = this.options, minScale = _ref1.minScale, maxScale = _ref1.maxScale, buffer = _ref1.buffer;
    x = detail.x, y = detail.y, start = detail.start, state = detail.state;
    didMove = x !== start.x || y !== start.y;
    if (state === "down") {
      window.clearTimeout(this.momentum);
      this.origin = {
        x: this.x - x,
        y: this.y - y
      };
      return this.history = [];
    } else if (didMove) {
      this.x = this.origin.x + x;
      this.y = this.origin.y + y;
      this.getVelocity();
      if (state === "move") {
        return this.transform(false);
      } else if (state === "up" && (this.velocity.x || this.velocity.y)) {
        timestamp = Date.now();
        duration = 400;
        distance = 600;
        origin = {
          x: this.x,
          y: this.y
        };
        maxW = this.options.contentWidth / 2 * this.scale;
        maxH = this.options.contentHeight / 2 * this.scale;
        destX = this.x - this.velocity.x * this.scale * distance;
        destY = this.y - this.velocity.y * this.scale * distance;
        distX = Math.max(Math.min(destX, maxW), -maxW) - origin.x;
        distY = Math.max(Math.min(destY, maxH), -maxH) - origin.y;
        return (repeat = function() {
          var diff;
          diff = Math.min(Date.now() - timestamp, duration);
          if (diff < duration) {
            _this.x = Easie.cubicOut(diff, origin.x, distX, duration);
            _this.y = Easie.cubicOut(diff, origin.y, distY, duration);
            _this.transform(false);
            return _this.momentum = window.setTimeout(repeat, 1000 / 60);
          } else {
            return _this.transform(true);
          }
        })();
      }
    }
  };

  ZoomView.prototype.onGesture = function(_arg) {
    var buffer, detail, max, maxScale, min, minScale, scale, state, x, y, _ref1;
    detail = _arg.detail;
    _ref1 = this.options, minScale = _ref1.minScale, maxScale = _ref1.maxScale, buffer = _ref1.buffer;
    x = detail.x, y = detail.y, scale = detail.scale, state = detail.state;
    if (state === "start") {
      window.clearTimeout(this.momentum);
      this.origin = {
        x: this.x - x,
        y: this.y - y,
        scale: this.scale - scale
      };
    } else {
      this.x = this.origin.x + x;
      this.y = this.origin.y + y;
    }
    min = minScale - buffer;
    max = maxScale + buffer;
    this.scale = Math.max(Math.min(this.origin.scale + scale, max), min);
    return this.transform(state === "end");
  };

  ZoomView.prototype.getVelocity = function(ms) {
    var dimension, history, now, velocity, x, y, _ref1;
    if (ms == null) {
      ms = 200;
    }
    now = Date.now();
    this.history.push({
      x: this.x,
      y: this.y,
      timestamp: now
    });
    history = this.history.filter(function(p) {
      return now - p.timestamp < ms;
    });
    _ref1 = (function() {
      var _i, _len, _ref1, _results;
      _ref1 = ["x", "y"];
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        dimension = _ref1[_i];
        velocity = history.reduce((function(m, p1, i, a) {
          var p2;
          p2 = a[i - 1] || p1;
          return m + (p2[dimension] - p1[dimension]);
        }), 0);
        _results.push(velocity / (now - history[0].timestamp));
      }
      return _results;
    })(), x = _ref1[0], y = _ref1[1];
    return this.velocity = {
      x: x,
      y: y
    };
  };

  return ZoomView;

})(Backbone.View);

module.exports = ZoomView;
});

;require.register("views/game.coffee", function(exports, require, module) {
var GameView, ScoreModel, SlideView, TimerModel, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SlideView = require("views/slide");

TimerModel = require("models/game/timer");

ScoreModel = require("models/game/score");

GameView = (function(_super) {
  __extends(GameView, _super);

  function GameView() {
    _ref = GameView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  GameView.prototype.initialize = function() {
    GameView.__super__.initialize.apply(this, arguments);
    this.el.classList.add("game-slide");
    return this.createModels();
  };

  GameView.prototype.createModels = function() {
    var Model, key, models, options, _base, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _results;
    if (this.game == null) {
      this.game = {};
    }
    models = {
      timer: TimerModel,
      score: ScoreModel,
      extra: Backbone.Model
    };
    if (this.requiresTimeLimit && !((_ref1 = this.options.data.game) != null ? (_ref2 = _ref1.timer) != null ? _ref2.limit : void 0 : void 0) > 0) {
      if ((_ref3 = this.options.data.game) != null) {
        if ((_ref4 = _ref3.timer) != null) {
          _ref4.limit = 5000;
        }
      }
    }
    _results = [];
    for (key in models) {
      Model = models[key];
      if ((_ref5 = this.game[key]) != null) {
        if (typeof (_base = _ref5.off()).destroy === "function") {
          _base.destroy();
        }
      }
      options = ((_ref6 = this.options.data.game) != null ? _ref6[key] : void 0) || {};
      _results.push(this.game[key] = new Model(options));
    }
    return _results;
  };

  GameView.prototype.show = function() {
    this.setState("intro", "game");
    this.listenTo(this.game.timer, "change", this.onTimerChange);
    return this.listenTo(this.game.score, "change", this.onScoreChange);
  };

  GameView.prototype.hide = function() {
    var _ref1;
    this.stopListening();
    if ((_ref1 = this.game.timer) != null) {
      _ref1.destroy();
    }
    return this.trackEvent({
      category: "Game",
      action: "Record",
      label: this.game.score.get("record")
    });
  };

  GameView.prototype.onRefresh = function() {
    this.el.classList.remove("game-count-down", "game-paused", "game-playing");
    this.createModels();
    this.show();
    return this.preloadMedia();
  };

  GameView.prototype.enterGame = function() {
    var _this = this;
    if (!this.options.data) {
      this.lock();
    }
    this.setState("playing", "game");
    this.game.score.trigger("reset");
    this.game.timer.trigger("reset");
    return this.game.timer.trigger("count", {
      callback: function() {
        return _this.startGame();
      }
    });
  };

  GameView.prototype.startGame = function() {
    var _this = this;
    return this.game.timer.trigger("start", {
      callback: function() {
        return _this.endGame();
      }
    });
  };

  GameView.prototype.endGame = function() {
    var _this = this;
    this.setState("outro", "game");
    window.setTimeout(function() {
      return _this.game.score.trigger("tally", {
        callback: function() {
          return _this.afterAnimateScores();
        }
      });
    }, 0);
    return this.game.timer.trigger("stop");
  };

  GameView.prototype.pauseGame = function() {
    return this.game.timer.set({
      paused: true
    });
  };

  GameView.prototype.unpauseGame = function() {
    return this.game.timer.set({
      paused: false
    });
  };

  GameView.prototype.togglePaused = function() {
    return this.game.timer.set({
      paused: !this.game.timer.get("paused")
    });
  };

  GameView.prototype.afterAnimateScores = function() {
    if (!this.options.data) {
      this.unlock();
    }
    return this.trackEvent({
      category: "Game",
      action: "Score",
      label: this.game.score.get("total")
    });
  };

  GameView.prototype.onCorrectAnswer = function(_arg) {
    var bonus, score, sound, tally, time, total, _ref1;
    _ref1 = _arg != null ? _arg : {}, sound = _ref1.sound, score = _ref1.score, bonus = _ref1.bonus, time = _ref1.time, tally = _ref1.tally;
    if (this.game.timer.get("paused")) {
      return;
    }
    if (time == null) {
      time = 0;
    }
    if (score == null) {
      score = 0;
    }
    if (bonus == null) {
      bonus = 0;
    }
    total = this.game.score.get("total");
    this.game.timer.setBy({
      bonus: time
    });
    this.game.score.setBy({
      consecutive: 1,
      correct: 1
    });
    this.game.score.setBy({
      score: score,
      bonus: bonus
    }, {
      silent: tally != null
    });
    if (tally) {
      return this.game.score.trigger("tally", {
        tallyFrom: total,
        ms: 300
      });
    }
  };

  GameView.prototype.onIncorrectAnswer = function(_arg) {
    var bonus, score, sound, tally, time, total, _ref1;
    _ref1 = _arg != null ? _arg : {}, sound = _ref1.sound, score = _ref1.score, bonus = _ref1.bonus, time = _ref1.time, tally = _ref1.tally;
    if (this.game.timer.get("paused")) {
      return;
    }
    if (time == null) {
      time = 0;
    }
    if (score == null) {
      score = 0;
    }
    if (bonus == null) {
      bonus = 0;
    }
    total = this.game.score.get("total");
    this.game.timer.setBy({
      bonus: -time
    });
    this.game.score.set({
      consecutive: 0
    });
    this.game.score.setBy({
      score: -score,
      bonus: -bonus,
      incorrect: 1
    }, {
      silent: tally != null
    });
    if (tally) {
      return this.game.score.trigger("tally", {
        tallyFrom: total,
        ms: 300
      });
    }
  };

  GameView.prototype.onTimerChange = function(timer) {};

  GameView.prototype.onScoreChange = function(score) {};

  GameView.prototype.setArray = function(array, key) {
    var _ref1;
    if (_.isString(array)) {
      _ref1 = [key, array], array = _ref1[0], key = _ref1[1];
    }
    if (this.data == null) {
      this.data = {};
    }
    return this.data[key] = {
      current: _.shuffle(array),
      original: _.clone(array)
    };
  };

  GameView.prototype.getArray = function(key) {
    return this.data[key].original;
  };

  GameView.prototype.getRandom = function(key) {
    if (this.data[key].current.length === 0) {
      this.data[key].current = _.chain(this.data[key].original).without(this.data[key].lastValue).shuffle().value().concat(this.data[key].lastValue);
    }
    return this.data[key].lastValue = this.data[key].current.shift();
  };

  GameView.prototype.getNext = function(key) {
    if (this.data[key].current.length === 0) {
      this.data[key].current = this.data[key].original;
    }
    return this.data[key].lastValue = this.data[key].current.shift();
  };

  return GameView;

})(SlideView);

module.exports = GameView;
});

;require.register("views/input.coffee", function(exports, require, module) {
var Analytics, InputView, Session, SlideView, _ref, _ref1,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SlideView = require("views/slide");

_ref = Application.actions(), Analytics = _ref.Analytics, Session = _ref.Session;

InputView = (function(_super) {
  __extends(InputView, _super);

  function InputView() {
    _ref1 = InputView.__super__.constructor.apply(this, arguments);
    return _ref1;
  }

  InputView.prototype.nextSlide = function() {
    var _this = this;
    Session.get(function(err, _arg) {
      var attempt;
      attempt = _arg.attempt;
      return _this.lesson.processInteraction({
        survey: true,
        slide_id: _this.options.id,
        user_input: _this.userInput(),
        attempt: attempt
      });
    });
    return this.submit();
  };

  return InputView;

})(SlideView);

module.exports = InputView;
});

;require.register("views/main.coffee", function(exports, require, module) {
var MainView, app, content, inbound, outbound, platform, template, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

app = require("app");

template = require("templates/main");

platform = require("lib/device").platform;

content = inbound = outbound = null;

MainView = (function(_super) {
  __extends(MainView, _super);

  function MainView() {
    _ref = MainView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  MainView.prototype.currentClass = "none";

  MainView.prototype.views = {};

  MainView.prototype.events = {
    "iostap a[href]": "navigateWithoutDelay",
    "click a[href]": "navigateWithoutDelay",
    "mouseleave": "triggerMouseUp",
    "touchmove": "onTouchMove"
  };

  MainView.prototype.initialize = function() {
    this.el.innerHTML = template();
    inbound = this.el.querySelector("#inbound");
    outbound = this.el.querySelector("#outbound");
    content = this.el.querySelector("#content");
    this.addGestures();
    this.classForDeviceVersion();
    return this.onOrientationChange();
  };

  MainView.prototype.classForDeviceVersion = function() {
    return this.el.classList.add("device-" + (platform.toLowerCase()));
  };

  MainView.prototype.navigateWithoutDelay = function(e) {
    var _this = this;
    if (e.currentTarget.hash) {
      return window.setTimeout(function() {
        var _ref1, _ref2;
        if (!(e.currentTarget.hash.match(/slide/) && ((_ref1 = _this.currentView) != null ? (_ref2 = _ref1.scroller) != null ? _ref2.enabled : void 0 : void 0) === false)) {
          return app.router.navigate(e.currentTarget.hash, true);
        }
      }, 1);
    } else {
      if (e != null) {
        e.preventDefault();
      }
      return Application.publish("url:open")({
        url: e.currentTarget.getAttribute('href'),
        target: e.target.target || "_system"
      });
    }
  };

  MainView.prototype.display = function(child, params) {
    var klass;
    klass = "" + child + "-active";
    if (this.currentClass === klass) {
      return this.currentView.display((function() {}), params);
    } else {
      this.el.classList.remove("display", this.currentClass);
      this.el.classList.add(klass);
      this.currentClass = klass;
      return this.transitionViews(child, params);
    }
  };

  MainView.prototype.transitionViews = function(child, params) {
    var View, done, _base,
      _this = this;
    View = require("./" + child);
    done = function(callback) {
      return _this.afterDisplay(callback);
    };
    this.undelegateEvents();
    inbound.removeAttribute("id");
    outbound.removeAttribute("id");
    inbound.id = "outbound";
    outbound.id = "inbound";
    if (this.currentView != null) {
      this.currentView.stopListening();
      this.currentView.undelegateEvents();
      if (typeof (_base = this.currentView).hide === "function") {
        _base.hide();
      }
    }
    if (this.views[child] && this.views[child].cid !== this.currentView.cid) {
      this.currentView = this.views[child];
      this.currentView.display(done, params);
    } else {
      this.currentView = new View(params, done);
      this.currentView.el.classList.add("view");
      this.currentView.undelegateEvents();
      if (this.currentView.cache !== false) {
        this.views[child] = this.currentView;
      }
    }
    if (params.preventScroll != null) {
      this.preventScroll = params.preventScroll;
    }
    if (params.disableHistory != null) {
      this.currentView.disableHistory = params.disableHistory;
    }
    while (outbound.lastChild) {
      outbound.removeChild(outbound.lastChild);
    }
    outbound.appendChild(this.currentView.el);
    return window.addEventListener("orientationchange", function() {
      return _this.onOrientationChange();
    });
  };

  MainView.prototype.afterDisplay = function(callback) {
    var _this = this;
    window.clearTimeout(this.afterTimeout);
    return this.afterTimeout = window.setTimeout((function() {
      _this.el.classList.add("display");
      if (callback) {
        callback();
      }
      return _this.afterTransition();
    }), 10);
  };

  MainView.prototype.afterTransition = function() {
    var _this = this;
    window.clearTimeout(this.timeout);
    return this.timeout = window.setTimeout(function() {
      _this.currentView.delegateEvents();
      _this.delegateEvents();
      return _this.swapContainers();
    }, 600);
  };

  MainView.prototype.swapContainers = function() {
    var _inb, _otb, _results;
    _inb = outbound;
    _otb = inbound;
    inbound = _inb;
    outbound = _otb;
    _results = [];
    while (outbound.lastChild) {
      _results.push(outbound.removeChild(outbound.lastChild));
    }
    return _results;
  };

  MainView.prototype.onOrientationChange = function() {
    var isPortrait;
    isPortrait = window.orientation != null ? window.orientation % 180 === 0 : this.el.offsetHeight > this.el.offsetWidth;
    this.el.classList.toggle("device-landscape", !isPortrait);
    return this.el.classList.toggle("device-portrait", isPortrait);
  };

  MainView.prototype.triggerMouseUp = function() {
    return this.$el.trigger("mouseup");
  };

  MainView.prototype.onTouchMove = function(e) {
    var scrollSelector;
    scrollSelector = ".content-sm-scroll, .content-md-scroll, .content-lg-scroll";
    if (this.preventScroll && $(e.target).parents(scrollSelector).size() === 0) {
      return e.preventDefault();
    }
  };

  MainView.prototype.addGestures = function() {
    var evt, _i, _len, _ref1, _ref2, _results,
      _this = this;
    _ref1 = ["swipe", "gesture", "drag", "tap", "dbltap"];
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      evt = _ref1[_i];
      _results.push((_ref2 = window.eventjs) != null ? _ref2.add(this.el, evt, function(e, self) {
        if (self.gesture === "tap") {
          if (_this.ignoreNextTap) {
            return _this.ignoreNextTap = false;
          } else {
            return _this.tapTimeout = window.setTimeout((function() {
              return _this.dispatchEvent(e, self);
            }), 300);
          }
        } else {
          if (self.gesture === "dbltap") {
            _this.ignoreNextTap = true;
          }
          return _this.dispatchEvent(e, self);
        }
      }) : void 0);
    }
    return _results;
  };

  MainView.prototype.dispatchEvent = function(e, data) {
    var event, evtName;
    window.clearTimeout(this.tapTimeout);
    if (data.fingers > 1) {
      this.preventDrag = true;
    } else if (data.state === "down") {
      this.preventDrag = false;
    }
    if (data.gesture === "drag" && this.preventDrag) {
      return;
    }
    if (e.target != null) {
      this.touchTarget = e.target;
    }
    evtName = "touch:" + (data.gesture || data.type);
    event = document.createEvent('CustomEvent');
    event.initCustomEvent(evtName, true, true, _.extend({}, e, data));
    return this.touchTarget.dispatchEvent(event);
  };

  return MainView;

})(Backbone.View);

module.exports = MainView;
});

;require.register("views/slide.coffee", function(exports, require, module) {
var Analytics, BaseSlide, Element, SlideView, device, fitText, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Element = require("lib/element");

BaseSlide = require("views/base/slide");

device = require("lib/device");

fitText = require("lib/fit-text");

Analytics = Application.actions().Analytics;

SlideView = (function(_super) {
  __extends(SlideView, _super);

  function SlideView() {
    _ref = SlideView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  SlideView.prototype.fitTextOnResize = true;

  SlideView.prototype.fitTextOnRender = true;

  SlideView.prototype.initialize = function(options) {
    var _base;
    this.options = options;
    this.transform = Element.transform, this.transition = Element.transition, this.getBounds = Element.getBounds;
    return (_base = this.options).metadata != null ? (_base = this.options).metadata : _base.metadata = {};
  };

  SlideView.prototype.lock = function(direction, bounce) {
    return this.options.lock(direction, bounce);
  };

  SlideView.prototype.unlock = function() {
    return this.options.unlock();
  };

  SlideView.prototype.next = function(ms) {
    return this.options.next(_.isNumber(ms) ? ms : void 0);
  };

  SlideView.prototype.prev = function(ms) {
    return this.options.prev(_.isNumber(ms) ? ms : void 0);
  };

  SlideView.prototype.trackEvent = function(_arg) {
    var action, category, label, value;
    category = _arg.category, action = _arg.action, label = _arg.label, value = _arg.value;
    if (this.getTrackingTitle()) {
      category += " - " + (this.getTrackingTitle());
    }
    return Analytics.trackEvent(category, action, label, value);
  };

  SlideView.prototype.trackOnce = function(_arg) {
    var action, category, key, label, value;
    category = _arg.category, action = _arg.action, label = _arg.label, value = _arg.value;
    if (this.tracked == null) {
      this.tracked = {};
    }
    key = "" + category + " - " + action;
    if (!this.tracked[key]) {
      this.trackEvent({
        category: category,
        action: action,
        label: label,
        value: value
      });
      return this.tracked[key] = label;
    }
  };

  SlideView.prototype.trackSetOnce = function(evts) {
    var evt, key, _i, _len;
    if (evts.length < 0 || !_.isObject(evts[0])) {
      return;
    }
    if (this.tracked == null) {
      this.tracked = {};
    }
    key = "" + evts[0].category + " - " + evts[0].action;
    if (!this.tracked[key]) {
      for (_i = 0, _len = evts.length; _i < _len; _i++) {
        evt = evts[_i];
        this.trackEvent(evt);
      }
      return this.tracked[key] = evts[0].label;
    }
  };

  SlideView.prototype.getTrackingTitle = function() {
    return this.el.dataset.title || this.el.id;
  };

  SlideView.prototype.setState = function(state, key) {
    if (key == null) {
      key = "state";
    }
    if (this.currentState == null) {
      this.currentState = {};
    }
    if (state === "touched" && this.currentState[key] === "narration") {
      return this.hasInteracted = true;
    } else {
      this.el.classList.remove("" + key + "-" + this.currentState[key]);
      if (state === false) {
        return delete this.currentState[key];
      } else {
        return this.el.classList.add("" + key + "-" + (this.currentState[key] = state));
      }
    }
  };

  SlideView.prototype.setEl = function(el, key) {
    if (this.elements == null) {
      this.elements = {};
    }
    return this.elements[key] = el || document.createElement("div");
  };

  SlideView.prototype.getEl = function(key) {
    var _ref1;
    return (_ref1 = this.elements) != null ? _ref1[key] : void 0;
  };

  SlideView.prototype.render = function() {
    var data, _base, _ref1, _ref2, _ref3,
      _this = this;
    data = _.extend(this.serialize());
    this.el.innerHTML = typeof (_base = this.template || ((_ref1 = this.templates) != null ? _ref1["default"] : void 0)) === "function" ? _base(data) : void 0;
    if (!this.ignoreStateOnRefresh) {
      this.setState("prompt");
    }
    this.setEl(this.el.querySelector(".narration-progress-bar"), "narration-progress");
    if (this.fixTextFontSize) {
      if ((_ref2 = this.el.querySelector(".content-fit")) != null) {
        _ref2.style.fontSize = this.fixTextFontSize;
      }
    }
    if (this.fitTextOnRender) {
      if ((_ref3 = this.currentState) != null ? _ref3.refresh : void 0) {
        window.clearTimeout(this.fitTextTimeout);
        this.fitTextTimeout = window.setTimeout((function() {
          return _this.fitText();
        }), 120);
      } else {
        this.el.classList.remove("active");
        this.fitText(function() {
          return window.setTimeout((function() {
            return _this.el.classList.add("active");
          }), 300);
        });
      }
    }
    window.setTimeout((function() {
      return _this.preloadMedia();
    }), 400);
    if (data.hasNarration) {
      return this.showLoadingNarration();
    } else {
      return this.hideLoadingNarration();
    }
  };

  SlideView.prototype.toggleLoadingNarration = function(v) {
    return Backbone.Events.trigger("load-narration", v);
  };

  SlideView.prototype.showLoadingNarration = function() {
    return this.toggleLoadingNarration(true);
  };

  SlideView.prototype.hideLoadingNarration = function() {
    return this.toggleLoadingNarration(false);
  };

  SlideView.prototype.fitText = function(done) {
    var el, _ref1,
      _this = this;
    if (el = this.el.querySelector(".content-fit")) {
      if ((_ref1 = this._fitText) != null) {
        _ref1.cancel();
      }
      return this._fitText = fitText(el, function() {
        _this.fixTextFontSize = el.style.fontSize;
        return typeof done === "function" ? done() : void 0;
      });
    } else {
      return typeof done === "function" ? done() : void 0;
    }
  };

  SlideView.prototype.findOne = function(selector) {
    var el;
    el = this.el.querySelector(".content-fit");
    return (el != null ? el.querySelector(selector) : void 0) || this.el.querySelector(selector);
  };

  SlideView.prototype.findAll = function(selector) {
    var el, res;
    el = this.el.querySelector(".content-fit");
    res = el != null ? el.querySelectorAll(selector) : void 0;
    if ((res != null ? res.length : void 0) > 0) {
      return res;
    } else {
      return this.el.querySelectorAll(selector);
    }
  };

  SlideView.prototype.preloadMedia = function() {
    var iframe, media, player, trigger, update, _i, _j, _len, _len1, _ref1, _ref2, _results,
      _this = this;
    update = function(e) {
      e.target.removeEventListener("timeupdate", update, false);
      e.target.pause();
      return e.target.volume = 1;
    };
    _ref1 = this.el.querySelectorAll(".multi-content");
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      media = _ref1[_i];
      if (media.getAttribute("webkit-playsinline") && device.platform === "iOS") {
        if (media.nodeName === "AUDIO") {
          media.volume = 0;
          media.addEventListener("timeupdate", update, false);
        }
      }
      if (media.nodeName === "VIDEO") {
        trigger = function() {
          return window.setTimeout((function() {
            return _this.trigger("resize");
          }), 300);
        };
        if (this.players == null) {
          this.players = [];
        }
        player = window.videojs(media, {
          fluid: true
        });
        player.one("error", function() {
          return player.src(player.currentSources());
        });
        player.on("loadedmetadata", trigger);
        player.on("play", function() {
          return _this.trigger("video-play");
        });
        player.on("pause", function() {
          return _this.trigger("video-pause");
        });
        this.players.push(player);
        if (device.platform === "iOS") {
          player.ready(function() {
            player.play().pause();
            return window.setTimeout((function() {
              return player.hasStarted(false);
            }), 1);
          });
        }
      }
    }
    if (device.ios) {
      _ref2 = this.el.querySelectorAll(".multi-content-iframe iframe");
      _results = [];
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        iframe = _ref2[_j];
        if (iframe.src.match(/\?/)) {
          _results.push(iframe.src += "&forceReloadForAppContext=true");
        } else {
          _results.push(iframe.src += "?forceReloadForAppContext=true");
        }
      }
      return _results;
    }
  };

  SlideView.prototype.stopMedia = function() {
    var iframe, media, _i, _j, _len, _len1, _ref1, _ref2, _results;
    _ref1 = this.el.querySelectorAll("audio, video");
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      media = _ref1[_i];
      if (!media.paused) {
        media.pause();
      }
    }
    _ref2 = this.el.querySelectorAll("iframe");
    _results = [];
    for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
      iframe = _ref2[_j];
      _results.push(iframe.parentNode.removeChild(iframe));
    }
    return _results;
  };

  SlideView.prototype.serialize = function() {
    var locals, starsEnabled, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;
    starsEnabled = (typeof __ !== "undefined" && __ !== null ? (_ref1 = __.slidedeck) != null ? _ref1.enableStars : void 0 : void 0) || this.options.enableStars;
    locals = {
      width: this.el.offsetWidth,
      height: this.el.offsetHeight,
      config: this.options.config(),
      hasPrompt: ((_ref2 = this.options.data) != null ? _ref2.prompt : void 0) != null,
      hasNarration: (_ref3 = this.options.data) != null ? (_ref4 = _ref3.narration) != null ? _ref4.audio_file : void 0 : void 0,
      hasStars: starsEnabled && ((_ref5 = this.options.data) != null ? (_ref6 = _ref5.challenge_configuration) != null ? _ref6.nb_stars : void 0 : void 0) > 0,
      scorm: this.options.scorm
    };
    return _.extend(locals, this.options.data, {
      metadata: this.options.metadata
    });
  };

  SlideView.prototype.onRefresh = function() {
    return typeof this.show === "function" ? this.show() : void 0;
  };

  SlideView.prototype.onNarrationLoaded = function() {
    return this.hideLoadingNarration();
  };

  SlideView.prototype.onNarrationProgress = function(progress) {
    var interval, _ref1;
    interval = progress === 0 ? 0 : Date.now() - this.narrationTimestamp;
    this.transform(this.getEl("narration-progress"), {
      scale: "" + progress + ", 1",
      transition: "transform " + interval + "ms linear"
    });
    if ((_ref1 = this.getEl("narration-progress")) != null) {
      _ref1.offsetLeft;
    }
    return this.narrationTimestamp = Date.now();
  };

  SlideView.prototype.onNarrationComplete = function() {
    if (this.hasInteracted) {
      delete this.hasInteracted;
      this.setState("");
      return this.setState("touched");
    } else if (this.currentState.state === "narration") {
      return this.setState("prompt");
    }
  };

  SlideView.prototype.hide = function() {
    var p, _i, _len, _ref1;
    if (this.players != null) {
      _ref1 = this.players;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        p = _ref1[_i];
        if ((p != null ? p.dispose : void 0) != null) {
          p.dispose();
        }
      }
      return this.players = [];
    }
  };

  SlideView.prototype.delegateEvents = function() {
    SlideView.__super__.delegateEvents.apply(this, arguments);
    if (this.fitTextOnResize) {
      return this.on("resize", this.fitText, this);
    }
  };

  return SlideView;

})(BaseSlide);

module.exports = SlideView;
});

;require.register("views/slides.coffee", function(exports, require, module) {
var BaseSlidesView, SlidesView, app, device, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

app = require("app");

device = require("lib/device");

BaseSlidesView = require("views/base/slides");

SlidesView = (function(_super) {
  __extends(SlidesView, _super);

  function SlidesView() {
    _ref = SlidesView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  SlidesView.prototype.id = "slides-view";

  SlidesView.prototype.template = require("templates/slides");

  SlidesView.prototype.initialize = function() {
    var h, w,
      _this = this;
    SlidesView.__super__.initialize.apply(this, arguments);
    w = window.innerWidth;
    h = window.innerHeight;
    this._debounceResize = _.debounce((function() {
      if (w !== window.innerWidth || h !== window.innerHeight) {
        w = window.innerWidth;
        h = window.innerHeight;
        return _this.onResize();
      }
    }), 200);
    return window.addEventListener(device.events.resize, this._debounceResize);
  };

  SlidesView.prototype.render = function(params) {
    var afterRender, index, initialSlideWidth, _ref1,
      _this = this;
    this.hasRendered = true;
    this.el.innerHTML = this.template(params);
    this.el.classList.add("direction-" + ((params != null ? (_ref1 = params.config) != null ? _ref1.direction : void 0 : void 0) || "ltr"));
    this.options = this.getExtraConfig(params);
    this.createSlideViews(params.config);
    index = this.cleanIndex(params.index);
    if (this.options.title) {
      document.title = this.options.title;
    }
    this.sizeContent(params.forceResize);
    initialSlideWidth = this.slideViews[index].el.offsetWidth;
    afterRender = function() {
      _this.createScroller(params);
      _this.goToPage(index, 0);
      return window.setTimeout((function() {
        var _ref2;
        if (_this.slideViews[index].el.offsetWidth !== initialSlideWidth) {
          return (_ref2 = _this.slideViews[index]) != null ? _ref2.trigger("resize") : void 0;
        }
      }), 600);
    };
    if (params.isRefresh) {
      afterRender();
    } else {
      window.setTimeout(afterRender, 300);
    }
    return Backbone.trigger("ready");
  };

  SlidesView.prototype.display = function(callback, params) {
    var index;
    index = this.cleanIndex(params.index);
    if (index <= this.currentIndex && this.options.config.webAccess) {
      app.router.navigate("slide/" + (this.currentIndex + 1));
      callback();
      return;
    }
    if (this.currentIndex !== index) {
      this.toggleViewInDOM(this.slideViews[index], true);
      this.slideViews[index].el.offsetWidth;
      this.goToPage(index, params.ms);
    }
    return callback();
  };

  SlidesView.prototype.removeScroller = function() {
    this.scroller.off("scrollEnd");
    return this.scroller.destroy();
  };

  SlidesView.prototype.createScroller = function(params) {
    var indicators, _ref1, _ref2,
      _this = this;
    if ((_ref1 = this.options) != null ? (_ref2 = _ref1.config) != null ? _ref2.fade : void 0 : void 0) {
      this.scroller = {
        currentPage: {
          pageX: 0
        },
        scroller: this.el.querySelector("#slides-scroller"),
        goToPage: function(nextPage) {
          var prevPage;
          prevPage = _this.scroller.currentPage.pageX;
          _this.scroller.currentPage.pageX = nextPage;
          return _this.onScrollEnd();
        }
      };
    } else {
      if (this.scroller != null) {
        this.removeScroller();
      }
      indicators = [];
      if (this.options.config.background) {
        indicators.push({
          el: "#slides-background-wrap",
          resize: false,
          shrink: "clip",
          listenY: false,
          speedRatioX: 1 / (this.slideViews.length - 1) * 0.5,
          ignoreBoundaries: true
        });
      }
      if (this.options.config.indicator) {
        indicators.push({
          el: "#indicator",
          resize: true,
          shrink: "clip",
          listenY: false,
          ignoreBoundaries: true
        });
      }
      this.scroller = new IScroll(this.el.querySelector("#slides"), {
        scrollX: true,
        scrollY: false,
        snap: true,
        tap: "scrolltap",
        snapThreshold: 0.15,
        momentum: false,
        resizePolling: 9999999,
        eventPassthrough: true,
        indicators: indicators,
        preventDefaultException: {
          tagName: /^(INPUT|TEXTAREA|BUTTON|SELECT|IFRAME)$/
        }
      });
      if (!params.cms) {
        this.scroller.on("scrollEnd", function() {
          return _this.onScrollEnd();
        });
      }
      if (this.options.config.locked) {
        this.toggleScroller(false);
      }
    }
    if (this.options.config.pagination) {
      this.pagination = this.el.querySelector("#pagination");
    }
    if (this.options.config.pageNumbers) {
      return this.pageNumber = this.el.querySelector("#lesson-header-nav-page-number");
    }
  };

  SlidesView.prototype.optionsForView = function(el, data, config) {
    var _this = this;
    if (data == null) {
      data = {};
    }
    if (config == null) {
      config = {};
    }
    return _.extend({}, data, {
      lessonConfiguration: config,
      enableStars: this.options.enableStars,
      scorm: this.options.scorm
    }, {
      el: el,
      lock: function() {
        return _this.toggleScroller.apply(_this, [false].concat(__slice.call(arguments)));
      },
      unlock: function() {
        return _this.toggleScroller(true);
      },
      next: function(ms) {
        return _this.goToPage(_this.currentIndex + 1, ms);
      },
      prev: function(ms) {
        return _this.goToPage(_this.currentIndex - 1, ms);
      },
      config: function() {
        return _this.options.config;
      }
    });
  };

  SlidesView.prototype.goToPage = function(index, ms, options) {
    var maxScrollX, minScrollX, nextView, prevView, view, wrapperWidth, _i, _len, _ref1, _ref2, _ref3,
      _this = this;
    if (ms == null) {
      ms = 600;
    }
    if (options == null) {
      options = {};
    }
    if ((index !== this.currentIndex || (this.currentIndex != null)) && (0 <= index && index < this.slideViews.length)) {
      prevView = this.slideViews[this.currentIndex];
      nextView = this.slideViews[index];
      this.trigger.apply(this, ["goToPage"].concat(__slice.call(arguments)));
      if (prevView != null) {
        if (typeof prevView.beforeHide === "function") {
          prevView.beforeHide();
        }
      }
      nextView.render();
      if (typeof nextView.beforeShow === "function") {
        nextView.beforeShow();
      }
      _ref1 = this.slideViews;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        view = _ref1[_i];
        view.el.classList.remove("visible");
      }
      nextView.el.classList.add("visible");
      if ((this.scroller != null) && this.slideViews.length > 1) {
        _ref2 = this.scroller, wrapperWidth = _ref2.wrapperWidth, maxScrollX = _ref2.maxScrollX, minScrollX = _ref2.minScrollX;
        if (!(this.options.config.locked || (minScrollX > (_ref3 = -index * wrapperWidth) && _ref3 > maxScrollX))) {
          this.toggleScroller(true);
        }
        this.scroller.goToPage(this.getIndexForDirection(index), 0, ms);
        return window.setTimeout((function() {
          return _this.onScrollEnd();
        }), ms);
      } else if (!options.fromCMS) {
        return this.onScrollEnd();
      }
    }
  };

  SlidesView.prototype.cleanIndex = function(index) {
    var i, slide;
    if (_.isNaN(+index)) {
      return ((function() {
        var _i, _len, _ref1, _ref2, _results;
        _ref1 = this.slideViews;
        _results = [];
        for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
          slide = _ref1[i];
          if (((_ref2 = slide.el) != null ? _ref2.id : void 0) === index) {
            _results.push(i);
          }
        }
        return _results;
      }).call(this))[0] || 0;
    } else {
      return _.limit(index - 1, 0, this.slideViews.length - 1);
    }
  };

  SlidesView.prototype.getIndexForDirection = function(index) {
    if (this.options.config.direction === "rtl") {
      return this.slideViews.length - 1 - index;
    } else {
      return index;
    }
  };

  SlidesView.prototype.onScrollEnd = function() {
    var i, isActive, j, slideView, _i, _len, _ref1, _ref2, _ref3, _ref4, _ref5;
    i = this.getIndexForDirection(+((_ref1 = this.scroller) != null ? (_ref2 = _ref1.currentPage) != null ? _ref2.pageX : void 0 : void 0));
    if (_.isNaN(i)) {
      return;
    }
    if (i !== this.currentIndex) {
      _ref3 = this.slideViews;
      for (j = _i = 0, _len = _ref3.length; _i < _len; j = ++_i) {
        slideView = _ref3[j];
        if (this.options.config.fade) {
          slideView.el.style.opacity = j === i ? 1 : 0;
          slideView.transition(slideView.el, "opacity 300ms");
          isActive = j === i || j === this.currentIndex;
        } else {
          isActive = (j - 1 <= i && i <= j + 1);
        }
        this.toggleViewInDOM(slideView, isActive);
        if ((_ref4 = this.pagination) != null) {
          _ref4.children[j].classList.toggle("active", i === j);
        }
        if ((_ref5 = this.pageNumber) != null) {
          _ref5.innerHTML = i + 1;
        }
      }
      if (this.currentIndex != null) {
        this.hideView(this.slideViews[this.currentIndex]);
      }
      this.showView(this.slideViews[i]);
      this.currentIndex = i;
      if (this.disableHistory == null) {
        return app.router.navigate("slide/" + (i + 1), true);
      }
    }
  };

  SlidesView.prototype.onResize = function() {
    var _this = this;
    if (this.hasRendered) {
      this.sizeContent(true);
      window.clearTimeout(this.resizeTimeout);
      return this.resizeTimeout = window.setTimeout(function() {
        var _ref1, _ref2;
        if ((_ref1 = _this.scroller) != null) {
          if (typeof _ref1.refresh === "function") {
            _ref1.refresh();
          }
        }
        return window.clearTimeout((_ref2 = _this.scroller) != null ? _ref2.resizeTimeout : void 0);
      }, 100);
    }
  };

  SlidesView.prototype.toggleViewInDOM = function(slideView, isActive) {
    if (!slideView) {
      return;
    }
    if (slideView.__isActive !== isActive) {
      slideView.__isActive = isActive;
      if (isActive && slideView.el.parentNode !== this.scroller.scroller) {
        return this.scroller.scroller.appendChild(slideView.el);
      } else if (!isActive && slideView.el.parentNode === this.scroller.scroller) {
        return this.scroller.scroller.removeChild(slideView.el);
      }
    }
  };

  SlidesView.prototype.hideView = function(slideView) {
    slideView.el.classList.remove("active");
    if (typeof slideView.undelegateEvents === "function") {
      slideView.undelegateEvents();
    }
    slideView.stopMedia();
    return typeof slideView.hide === "function" ? slideView.hide() : void 0;
  };

  SlidesView.prototype.showView = function(slideView) {
    if (slideView == null) {
      return;
    }
    slideView.el.offsetWidth;
    slideView.el.classList.add("active");
    if (typeof slideView.delegateEvents === "function") {
      slideView.delegateEvents();
    }
    if (typeof slideView.show === "function") {
      slideView.show();
    }
    return this.trigger("showView", slideView);
  };

  SlidesView.prototype.toggleScroller = function(isEnabled, direction, bounce) {
    var index, pageX, wrapperWidth, _ref1, _ref2;
    if (bounce == null) {
      bounce = true;
    }
    if (this.options.config.fade) {
      return;
    }
    _ref1 = this.scroller, wrapperWidth = _ref1.wrapperWidth, (_ref2 = _ref1.currentPage, pageX = _ref2.pageX);
    index = this.getIndexForDirection(pageX);
    switch (direction) {
      case "left":
      case "l":
        this.scroller.minScrollX = -wrapperWidth * index;
        return this.scroller.options.bounce = bounce;
      case "right":
      case "r":
        this.scroller.maxScrollX = -wrapperWidth * index;
        return this.scroller.options.bounce = bounce;
      default:
        this.scroller.options.bounce = bounce;
        this.scroller.refresh();
        return this.scroller.enabled = isEnabled;
    }
  };

  SlidesView.prototype.sizeContent = function(forceResize) {
    var i, innerEl, outerEl, slideView, width, _i, _j, _len, _len1, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;
    if (forceResize == null) {
      forceResize = false;
    }
    if (((_ref1 = this.scroller) != null ? _ref1.wrapperWidth : void 0) === this.el.offsetWidth && !forceResize) {
      return;
    }
    outerEl = this.el.querySelector("#slides");
    innerEl = this.el.querySelector("#slides-scroller");
    width = outerEl.offsetWidth;
    if ((_ref2 = this.options) != null ? (_ref3 = _ref2.config) != null ? _ref3.fade : void 0 : void 0) {
      _ref4 = this.slideViews;
      for (i = _i = 0, _len = _ref4.length; _i < _len; i = ++_i) {
        slideView = _ref4[i];
        slideView.el.style.width = width + "px";
      }
    } else {
      innerEl.style.width = width * this.slideViews.length + "px";
      _ref5 = this.slideViews;
      for (i = _j = 0, _len1 = _ref5.length; _j < _len1; i = ++_j) {
        slideView = _ref5[i];
        slideView.el.style.width = width + "px";
        slideView.el.style.left = width * this.getIndexForDirection(i) + "px";
      }
    }
    if ((this.scroller != null) || this.slideViews.length === 1) {
      return (_ref6 = this.slideViews[this.currentIndex]) != null ? _ref6.trigger("resize", {
        width: width
      }) : void 0;
    }
  };

  SlidesView.prototype.stopListening = function() {
    window.removeEventListener("resize", this._debounceResize);
    window.removeEventListener("orientationchange", this._debounceResize);
    return SlidesView.__super__.stopListening.apply(this, arguments);
  };

  return SlidesView;

})(BaseSlidesView);

module.exports = SlidesView;
});

;require.register("views/video.coffee", function(exports, require, module) {
var SlideView, VideoView, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SlideView = require("views/slide");

VideoView = (function(_super) {
  __extends(VideoView, _super);

  function VideoView() {
    _ref = VideoView.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  VideoView.prototype.events = function() {
    return {
      "iostap .video": "toggleVideo",
      "iostap .video-play": "playVideo",
      "iostap .video-replay": "restartVideo",
      "iostap .btn-done": "next"
    };
  };

  VideoView.prototype.render = function() {
    var evt, _i, _len, _ref1, _results;
    this.unbindVideoEvents();
    VideoView.__super__.render.apply(this, arguments);
    this.initializeVideo();
    this.listeners = {};
    this.setState("loading", "video");
    _ref1 = ["load", "timeupdate", "error"];
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      evt = _ref1[_i];
      this.listeners[evt] = _.bind(this["onVideo" + (_.capitalize(evt))], this);
      _results.push(this.getEl("video").addEventListener(evt, this.listeners[evt]));
    }
    return _results;
  };

  VideoView.prototype.initializeVideo = function() {
    var vid;
    vid = this.el.querySelector(".video");
    return this.setEl(vid, "video");
  };

  VideoView.prototype.onVideoLoad = function() {
    this.getEl("video").pause();
    return this.setState("paused", "video");
  };

  VideoView.prototype.onVideoError = function() {
    return this.setState("error", "video");
  };

  VideoView.prototype.onVideoTimeupdate = function() {
    if (this.getEl("video").currentTime === this.getEl("video").duration && this.getEl("video").ended) {
      return this.onVideoEnd();
    }
  };

  VideoView.prototype.toggleVideo = function() {
    if (this.getEl("video").paused) {
      return this.playVideo();
    } else {
      return this.stopVideo();
    }
  };

  VideoView.prototype.playVideo = function() {
    if (this.currentState.video === "error") {
      return;
    }
    this.setState("playing", "video");
    if (this.getEl("video").ended) {
      this.getEl("video").load();
    }
    this.getEl("video").play();
    return this.trackEvent({
      category: "Video",
      action: "Play",
      label: this.getVideoName()
    });
  };

  VideoView.prototype.stopVideo = function() {
    var _this = this;
    if (this.currentState.video === "error") {
      return;
    }
    this.getEl("video").pause();
    this.trackEvent({
      category: "Video",
      action: "Pause",
      label: this.getVideoName()
    });
    return window.setTimeout(function() {
      return _this.setState("paused", "video");
    }, 1);
  };

  VideoView.prototype.restartVideo = function() {
    if (this.getEl("video").ended) {
      this.getEl("video").load();
    } else {
      this.getEl("video").currentTime = 0;
    }
    return this.playVideo();
  };

  VideoView.prototype.onVideoEnd = function() {
    return this.setState("paused", "video");
  };

  VideoView.prototype.getVideoName = function() {
    return this.getEl("video").src.split("/").slice(-1)[0];
  };

  VideoView.prototype.hide = function() {
    this.getEl("video").pause();
    this.onVideoEnd();
    return this.unbindVideoEvents();
  };

  VideoView.prototype.unbindVideoEvents = function() {
    var evt, _ref1, _results;
    _results = [];
    for (evt in this.listeners) {
      _results.push((_ref1 = this.getEl("video")) != null ? _ref1.removeEventListener(evt, this.listeners[evt]) : void 0);
    }
    return _results;
  };

  return VideoView;

})(SlideView);

module.exports = VideoView;
});

;require.register("___globals___", function(exports, require, module) {
  
});})();require('___globals___');


//# sourceMappingURL=app.js.map